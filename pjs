function rotate(r) {
	ctx.rotate(r/180*Math.PI)
}
function sin(r){
    return(Math.sin(r/180*Math.PI));   
}
function cos(r){
    return(Math.cos(r/180*Math.PI));
}
function arcs(x,y,w,h,start,stop){

    arc(x,y,w,h,start/180*Math.PI,stop/180*Math.PI);
    
} 

Array.prototype.pick = function(){
    return(this[~~random(0,this.length)]);  
};

var level  = 4;
var scene = 'load';
var click = false;

var particles = [];
var bullets = [];

var Player, npcs;

var new_ = (function() {
    /*
        Replace the new function because KAs new function sucks
        @author KWC
        @example of usage
        
        new Object(param1, param2)
        vs
        new_.call(Object, param1, param2)
        
    */
    var obj = Object.create(this.prototype);
    this.apply(obj, arguments);
    return obj;
});

var imgs = (function(){
    var rock = function(x,y,r,s){
        pushMatrix();
        translate(x,y);
        rotate(r);
        scale(s);
    
        fill(random(70,90));
        beginShape();
        for(var i = 0; i < 360; i += 360/5){
            var r = random(20,30);
            vertex(cos(i)*r,sin(i)*r);
        }
        endShape(CLOSE);
        
        fill(0,30);
        beginShape();
        for(var i = 0; i < 360; i += 360/5){
            var r = random(10,18);
            vertex(cos(i)*r,sin(i)*r);
        }
        endShape(CLOSE);
        popMatrix();
        
        
    };
    var tree = function(X,Y,R,sx,sy,seed){
        var branch = function(x,y,r,s,sy){
            pushMatrix();
            translate(x,y-5);
            rotate(r);
            scale(s,sy);
            beginShape();
            vertex(0,-5);
            vertex(-25,12);
            vertex(-50,20);
            for(var i = 0; i < 50;i +=random(2,3)){
                vertex(i-50,i/5+20+random(-3,5));
            }
            endShape();
            popMatrix();
        };
        function leaf(x,y,s,r){
            pushMatrix();
            translate(x,y);
            rotate(r || random(0,360));
            scale(s || random(0.2,0.25));
            
            beginShape();
            vertex(0,1);
            bezierVertex(15,1,27,5,30,31);
            bezierVertex(5,27,-1,22,0,1);
            endShape();
            
            popMatrix();
        }  
        
        background(0);
        pushMatrix();
        translate(25,20);
        noStroke();
        fill(color(255));
        randomSeed(seed || 1.e+25);
            
        branch(50,120,0,1.4,1.7);
        branch(53,91,0,1.2,1.5);
        branch(54,63,0,1.1,1.5);
        branch(59,41,-3,1,1.3);
        branch(56,18,-5,0.8,1.3);
        branch(56,-5,-5,0.7,1.3);
        branch(50,120,180,1.4,-1.7);
        branch(53,91,180,1.2,-1.5);
        branch(54,63,180,1.1,-1.5);
        branch(59,41,177,1,-1.3);
        branch(56,18,175,0.8,-1.3);
        branch(55,-5,183,0.7,-1.3);
        rect(47,0,20,160);
        popMatrix();  
        var mask = get(0,0,150,200);
        
        var points = [];
        for(var i = 0; i < 2000; i ++){
            var x = random(0,150);
            var y = random(0,200);
            if(get(x,y) === color(255)){
                points.push([x,y]);
            }
        }
        pushMatrix();
        translate(75,0);
        scale(0.75,1);
        translate(-75,0);
        image(mask,0,0);
        for(var i = 0; i < 300; i ++){
            fill(0);
            var x = random(0,150);
            var y = random(0,250);
            var r = 90+random(-20,20);
            leaf(x,y,random(0.2,0.25),r);
        }
        popMatrix();
        mask = get(0,0,150,200);
        background(99, 63, 13);
        var img = get(0,0,150,200);
        if(img){
            img.mask(mask);
        }
        background(255,0);
        pushMatrix();
        //translate(X,Y);
        rotate(R);
        scale(sx,sy);
        image(img,0,0);
        var clrs = [
            color(4, 97, 60),
            color(15, 120, 67),
            color(42, 135, 70),
        ];
        fill(99, 63, 13);
        quad(60,220,90,220,85,170,65,170);
        fill(0,50);
        quad(65,170,85,170,87,190,62,210);
        for(var i = 0; i < points.length; i ++){
            fill(clrs[~~random(0,clrs.length)]);
            var x = points[i][0]+2;
            var y = points[i][1]-2;
            var r = 90+random(-20,20);
            leaf(x,y,random(0.2,0.25),r);
        }
        popMatrix();
        return(get(0,0,~~(150*sx),~~(250*sy)));
        
    };
    function leaf(x,y,s,r){
        pushMatrix();
        translate(x,y);
        rotate(r || random(0,360));
        scale(s || random(0.2,0.25));
        
        beginShape();
        vertex(0,1);
        bezierVertex(15,1,27,5,30,31);
        bezierVertex(5,27,-1,22,0,1);
        endShape();
        
        popMatrix();
    }  
    var stone = function(x,y,clr,s,r){
        pushMatrix();
        translate(x,y);
        scale(s);
        rotate(r);
        fill(clr);
        noStroke();
        var w = random(38,40);
        var h = random(18,20);
        rect(0,0,w,h,10);
        fill(255,30);
        rect(random(3,5),random(3,5),random(27,30),random(7,10),10);
        stroke(0,30);
        strokeWeight(3);
        line(3,h-3,w-3,h-3);
        line(w-4,h-3,w-3,3);
        noStroke();
        fill(0,10);
        for(var i = 0; i < random(2,5); i ++){
            ellipse(random(5,w-5),random(5,h-5),10,10);
        }
        popMatrix();
    };
    function laurel(clr1,clr2,weight){
    
        var laurelLeaf = function(x,y,r,s){
            pushMatrix();
            translate(x,y+50);
            rotate(r);
            translate(0,-50);
            scale(s);
            beginShape();
            vertex(0,0);
            bezierVertex(10 + random(-3,3),10 + random(-4,4),20+random(-3,3),40 + random(-4,4),0,50);
            bezierVertex(-13 + random(-3,3),40 + random(-4,4),-5+ random(-3,3),20 + random(-4,4),0,0);
            endShape();
            popMatrix();
        };
                        
        function laurelHalf(clr,clr2,weight){
            stroke(clr2);
            noFill();
            strokeWeight(weight);
            arcs(450,300,400,400,90,225);
            
            noStroke();
            stroke(clr2);
            strokeWeight(weight);
            fill(clr);
            laurelLeaf(310,110,40,1);
            laurelLeaf(294,122,0,1);
            laurelLeaf(291,131,70,1);
            laurelLeaf(278,143,-10,1);
            laurelLeaf(276,154,75,1);
            laurelLeaf(264,167,-15,1);
            laurelLeaf(267,174,80,1);
            laurelLeaf(257,192,-25,1);
            laurelLeaf(257,194,85,1);
            laurelLeaf(251,214,-35,1);
            laurelLeaf(251,214,90,1);
            laurelLeaf(250,243,-35,1);
            laurelLeaf(250,235,90,1);
            laurelLeaf(250,258,85,1);
            laurelLeaf(250,270,-45,1);
            laurelLeaf(253,295,-55,1);
            laurelLeaf(253,286,70,1);
            laurelLeaf(259,312,55,1);
            laurelLeaf(260,318,-70,1);
            laurelLeaf(264,326,70,1);
            laurelLeaf(270,342,-75,1);
            laurelLeaf(273,347,70,1);
            laurelLeaf(286,365,-80,1);
            laurelLeaf(286,366,60,1);
            laurelLeaf(300,381,-95,1);
            laurelLeaf(302,384,50,1);
            laurelLeaf(320,400,40,1);
            laurelLeaf(318,397,-105,1);
            laurelLeaf(329,407,-125,1);
            laurelLeaf(338,415,30,1);
            laurelLeaf(347,418,-135,1);
            laurelLeaf(359,430,20,1);
            laurelLeaf(359,430,-150,1);
            laurelLeaf(381,437,-150,1);
            laurelLeaf(384,437,10,1);
            laurelLeaf(404,446,10,1);
            laurelLeaf(423,448,10,1);
            laurelLeaf(447,451,10,1);
            laurelLeaf(398,443,-160,1);
            laurelLeaf(417,446,-170,1);
            laurelLeaf(437,446,-170,1);
            laurelLeaf(450,446,-180,1);
        };
        
        pushMatrix();
        translate(450,300);
        scale(1.1);
        translate(-450,-300);
        translate(0,-30);
        laurelHalf(clr1,clr2,weight);
        pushMatrix();
        translate(450,0);
        scale(-1,1);
        translate(-450,0);
        laurelHalf(clr1,clr2,weight);
        popMatrix();
        
        strokeWeight(weight * 3);
        stroke(clr2);
        fill(clr1);
        beginShape();
        
        for(var i = -90; i < 270 + 72; i += 72){
            curveVertex(450 + cos(i) * 100, 250 + sin(i) * 100);
            curveVertex(450 + cos(i + 36) * 50, 250 + sin(i + 36) * 50);
        }
        endShape(CLOSE);
        popMatrix();
        
        
    }
    
    function landMass(){
        beginShape();
        vertex(242 ,223);
        vertex(243,265);
        vertex(257, 289);
        vertex(259,286);
        vertex(256,274);
        vertex(253, 269);
        vertex(258,267);
        vertex(263 ,279);
        vertex(266,293);
        vertex(272,303);
        vertex(282, 308);
        vertex(303,320);
        vertex(329,340);
        vertex(330, 351);
        vertex(323,371);
        vertex(334,394);
        vertex(350, 411);
        vertex(356,428);
        vertex(356 ,428);
        vertex(350,462);
        vertex(352, 493) ;
        vertex(360,505);
        vertex(372,511 );
        vertex(372,493);
        vertex(375, 477);
        vertex(390,468);
        vertex(387 ,458);
        vertex(401,454);
        vertex(408 ,437);
        vertex(423,432);
        vertex(427, 417);
        vertex(433,398);
        vertex(446 ,374);
        vertex(419,359);
        vertex(406, 358);
        vertex(406,348);
        vertex(394,343);
        vertex(377 ,329);
        vertex(374, 324) ;
        vertex(358,324);
        vertex(348 , 316);
        vertex(338,327);
        vertex(330, 327);
        vertex(325, 321);
        vertex(325,307);
        vertex(312 ,307);
        vertex(314 ,295);
        vertex(312 ,290);
        vertex(301 ,296);
        vertex(292,296);
        vertex(287 ,284);
        vertex(297 ,272);
        vertex(309,270);
        vertex(318 ,268);
        vertex(325,280);
        vertex(332 ,284);
        vertex(335,279);
        vertex(331, 267 );
        vertex(340,256);
        vertex(338,251);
        vertex(345, 250) ;
        vertex(356,234);
        vertex(381,219);
        vertex(378, 213);
        vertex(374, 215);
        vertex(374,208);
        vertex(380, 202);
        vertex(386 ,207);
        vertex(398,199);
        vertex(392 ,208);
        vertex(388 ,213);
        vertex(405,216);
        vertex(409,210);
        vertex(386 ,166);
        vertex(381,170);
        vertex(381 ,173);
        vertex(373,171);
        vertex(373, 161);
        vertex(365,162);
        vertex(359,159);
        vertex(354, 159);
        vertex(356,177);
        vertex(341 ,195);
        vertex(339,185);
        vertex(330, 182);
        vertex(322,174);
        vertex(322 ,167);
        vertex(332,156);
        vertex(335,154);
        vertex(340, 160);
        vertex(347,154);
        vertex(353, 154);
        vertex(349,146);
        vertex(355, 141);
        vertex(358,132);
        vertex(368,137);
        vertex(359, 151);
        vertex(377 ,159);
        vertex(382,159);
        vertex(386 ,154);
        vertex(381,148);
        vertex(383 ,148);
        vertex(391,151);
        vertex(395 ,146);
        vertex(381, 129);
        vertex(369,118);
        vertex(364, 111);
        vertex(375,75);
        vertex(394, 84);
        vertex(395,93);
        vertex(384, 97);
        vertex(385 ,104);
        vertex(407, 113);
        vertex(412,126);
        vertex(411 ,134);
        vertex(413,145);
        vertex(417, 145);
        vertex(415 ,152);
        vertex(418,163);
        vertex(425, 169);
        vertex(431 ,169);
        vertex(439,162);
        vertex(448 ,152);
        vertex(456 ,140);
        vertex(458,142);
        vertex(467, 140 ) ;
        vertex(486,133);
        vertex(482, 124);
        vertex(485,118);
        vertex(486, 103);
        vertex(491,91);
        vertex(496, 90);
        vertex(551,68);
        vertex(578, 135);
        vertex(557,146);
        vertex(543, 165);
        vertex(543 ,178);
        vertex( 548,178);
        vertex(553,178);
        vertex(558,167);
        vertex( 561,165);
        vertex(565, 166);
        vertex(560,177);
        vertex(567,  176);
        vertex(561 ,190);
        vertex(554,191);
        vertex(554,183);
        vertex(550, 185);
        vertex(551, 192);
        vertex(545,192);
        vertex(538,203);
        vertex(530, 208);
        vertex(526,208);
        vertex(526,211);
        vertex(517 ,212);
        vertex(522,221);
        vertex(524,227);
        vertex(515 ,227);
        vertex(506,231);
        vertex(506 ,249);
        vertex(514, 251);
        vertex(519,251);
        vertex(531, 247);
        vertex(532,236);
        vertex(544 ,231);
        vertex(551, 230);
        vertex(551,235);
        vertex(559,235);
        vertex(565 ,243);
        vertex(561,250);
        vertex(566,250);
        vertex(572 ,245);
        vertex(569,236);
        vertex(574 ,238);
        vertex(577,245);
        vertex(582, 250);
        vertex(588,246);
        vertex(588,240);
        vertex(591 ,240);
        vertex(592,252);
        vertex(610,256);
        vertex(612 ,266);
        vertex(609,268);
        vertex(602, 269);
        vertex(587, 269);
        vertex(580,263);
        vertex(574,265);
        vertex(574 ,269);
        vertex(555,261);
        vertex(555 ,252);
        vertex(535,251);
        vertex(509,258);
        vertex(504 ,267);
        vertex(492,281);
        vertex(489,293);
        vertex(491 ,295);
        vertex(488,298);
        vertex(488 ,312);
        vertex(485,323);
        vertex(499 ,341);
        vertex(508,348);
        vertex(530,350);
        vertex(546, 353);
        vertex(555,368);
        vertex(557,393);
        vertex(551 ,405);
        vertex(558,425);
        vertex(565,459);
        vertex(581 ,457);
        vertex(602,440);
        vertex(622,403);
        vertex(621,391);
        vertex(624 ,377);
        vertex(640,349);
        vertex(647,332);
        vertex(647 ,323);
        vertex(634,327);
        vertex(624,307);
        vertex(617 ,279);
        vertex(620,279);
        vertex(636,313);
        vertex(641 ,321);
        vertex(659,318);
        vertex(680,307);
        vertex(677 ,288);
        vertex(664,284);
        vertex(655,274);
        vertex(658 ,267);
        vertex(669,275);
        vertex(672,162);
        vertex(593 ,12);
        vertex(201 ,43);
        endShape(CLOSE);
        
        beginShape();
        vertex(323, 290);
        vertex(334, 288);
        vertex(344,290);
        vertex(350, 289);
        vertex(350,293);
        vertex(342, 295);
        vertex(330,293);
        vertex(325, 290);
        endShape(CLOSE);
        
        beginShape();
        vertex(638, 391);
        vertex(627,404);
        vertex(624, 414);
        vertex(625,425);
        vertex(636, 425);
        vertex(642,403);
        vertex(638, 394);
        endShape(CLOSE);
        
        beginShape();
        vertex(518, 209);
        vertex(523, 205);
        vertex(530,205);
        vertex(535, 202);
        vertex(531,196);
        vertex(527, 183);
        vertex(527,175);
        vertex(517, 176);
        vertex(511,182);
        vertex(516, 183);
        vertex(512,186);
        vertex(517, 189);
        vertex(516,193);
        vertex(515, 206);
        endShape(CLOSE);
        
        beginShape();
        vertex(510,192);
        vertex(511, 205);
        vertex(504,206);
        vertex(500, 199);
        vertex(506,191);
        endShape(CLOSE);
    }
    
    /*
        images are stored as objects. The loading algorithm loops through and turns them into PImages based on information.
        
        @example
        img:{
            w: width,
            h: height,
            d: function(){
                //Draw the graphic
            }
        },
        
        lol, there is no way that I am commenting on all of the graphics. I couldn't even if I wanted to.
    */
    return({
        apocalypseBackdrop:{
            w:900,
            h:600,
            d:function(){
                var cloud = function(x,y,w,h,r,clr,density,opac){
                    pushMatrix();
                    translate(x,y);
                    rotate(r);
                    
                    strokeWeight(1);
                    var o = 255 - opac;
                    
                    for(var i = 0; i < w; i += 4){
                        for(var j = 0; j < h; j += 4){
                            var n = noise(i/density,j/density);
                            var m = map(n,0,1,0,255 - map(j,0,h,0,255));
                            
                            strokeWeight(5);
                            stroke(clr,m - o);
                            point(i,j);
                        }
                    }
                    
                    popMatrix();
                };
                
                background(143, 23, 65);
                
                cloud(0,0,900,400,0,color(222, 90, 13),60,255);
                cloud(0,0,900,200,0,color(94, 7, 15),100,255);
                cloud(900,600,900,200,180,color(240, 141, 192),100,255);
                
                
                noFill();
                strokeWeight(1);
                for(var i = 800; i < 1400; i ++){
                    stroke(100,0,0,map(i,800,1400,0,100));
                    ellipse(450,350,i,i/1.5);
                }
                
                filter(BLUR,2);
            }
        },
        redLaurel:{
            w:900,
            h:600,
            d:function(){
                background(255,0);
                
                pushMatrix();
                translate(450,300);
                scale(0.65);
                translate(-450,-300);
                laurel(color(255,0),color(207, 20, 45,50),15);
                laurel(color(255,0),color(207, 20, 45,50),10);
                laurel(color(255,0),color(207, 20, 45,50),5);
                laurel(color(255,0),color(255,200,255,100),2);
                popMatrix();
            },
        },
        window1:{
            w:90,
            h:180,
            d:function(){
                background(0);
				fill(255);
				noStroke();
				quad(10,0,0,15,10,30,20,15);
				var mask = get(0,0,20,30);
				
				background(255,0);
				var c1 = color(222, 151, 36);
				var c2 = color(224, 211, 32);
				for(var i = 40; i > 0; i --){
					fill(lerpColor(c2,c1,i/40));
					ellipse(10,15,i,i);
				}
				noFill();
				strokeWeight(1);
				stroke(23, 23, 140);
				quad(10,0,0,15,10,30,20,15);
				var img = get(0,0,20,30);
				
				if(img){
					img.mask(mask);
				}
				background(255,0);
				//image(img,0,0);
				
				for(var i = 0; i < 5; i ++){
					for(var j = 0; j < 5; j ++){
						image(img,i*20,j*30-15);
						image(img,i*20-10,j*30);
					}
				}
				var pane = get(0,0,80,120);
				
				background(0);
				fill(255);
				noStroke();
				rect(0,0,80,120,30,30,5,5);
				var mask = get(0,0,80,120);
				
				if(pane){
					pane.mask(mask);
				}
				
				background(255,0);
				
				noStroke();
				fill(59, 33, 18);
				rect(0,0,91,131,33,33,5,5);
				
				image(pane,5,5);
				
				strokeWeight(3);
				noFill();
				stroke(107, 68, 13);
				rect(5,5,80,120,30,30,5,5);
				
				noStroke();
				for(var i = 30; i > 0; i --){
					fill(0,i);
					rect(0,130+30-i,90,1);
				}
            }
        },
        window2:{
            w:90,
            h:90,
            d:function(){
                background(0);
				fill(255);
				noStroke();
				quad(10,0,0,15,10,30,20,15);
				var mask = get(0,0,20,30);
				
				background(255,0);
				var c1 = color(222, 151, 36);
				var c2 = color(224, 211, 32);
				for(var i = 40; i > 0; i --){
					fill(lerpColor(c2,c1,i/40));
					ellipse(10,15,i,i);
				}
				noFill();
				strokeWeight(1);
				stroke(23, 23, 140);
				quad(10,0,0,15,10,30,20,15);
				var img = get(0,0,20,30);
				
				if(img){
					img.mask(mask);
				}
				background(255,0);
				//image(img,0,0);
				
				for(var i = 0; i < 5; i ++){
					for(var j = 0; j < 5; j ++){
						image(img,i*20,j*30-15);
						image(img,i*20-10,j*30);
					}
				}
				var pane = get(0,0,80,120);
				
				background(0);
				fill(255);
				noStroke();
				ellipse(40,40,80,80);
				var mask = get(0,0,80,120);
				
				if(pane){
					pane.mask(mask);
				}
				
				background(255,0);
				
				noStroke();
				fill(59, 33, 18);
				ellipse(45,45,90,90);
				
				image(pane,5,5);
				
				strokeWeight(3);
				noFill();
				stroke(107, 68, 13);
				ellipse(45,45,80,80);
				
				noStroke();
				for(var i = 30; i > 0; i --){
					fill(0,i);
					rect(0,130+30-i,90,1);
				} 
            }
        },
        window3:{
            w:90,
            h:180,
            d:function(){
                background(0);
                fill(0);
                stroke(255);
                strokeWeight(2);
                quad(10,0,0,15,10,30,20,15);
                var mask = get(0,0,20,30);
                
                background(255,0);
                noFill();
                strokeWeight(2);
                stroke(51, 22, 4);
                fill(51, 22, 4);
                quad(10,0,0,15,10,30,20,15);
                var img = get(0,0,20,30);
                
                if(img){
                    img.mask(mask);
                }
                background(255,0,0,0);
                //image(img,0,0);
                
                for(var i = 0; i < 5; i ++){
                    for(var j = 0; j < 5; j ++){
                        if((i !== 0 || j !== 0) && (j !== 0 || i !== 4)){
                            image(img,i*20,j*30 + 15);
                            image(img,i*20-10,j*30);
                        }
                    }
                }
                image(img,0,15);
                var pane = get(0,0,80,120);
                
                background(255,0);
                
                noStroke();
                fill(255,50);
                rect(0,0,90,128,50,50,7,7);
                
                image(pane,5,5);
                
                strokeWeight(7);
                noFill();
                stroke(59, 33, 18);
                rect(0,0,90,128,50,50,7,7);
                
                strokeWeight(3);
                noFill();
                stroke(82, 46, 50);
                rect(5,5,80,120,30,30,5,5);
                
                noStroke();
                for (var i = 30; i > 0; i --){
                    fill(0,i);
                    rect(0,130+30-i,90,1);
                }         
            }
        },
        tavernSign:{
            w:350/5,
            h:300/5,
            d:function(){
                background(0);
                fill(255);
                noStroke();
                rect(0,0,300,150,20);
                var mask = get(0,0,300,150);
                
                
                background(99, 57, 28);
                stroke(84, 42, 14);
                strokeWeight(1);
                var off = 3704;
                for(var j = -10; j <= 150; j ++){
                    if(j % 50 === 49){
                        off += 137;
                    }
                    for(var i = 0; i < 300; i ++){
                        var n = noise((i+off)/1000,(j+off)/200).toFixed(2);
                        if((n * 100)%2===0){
                        point(i,j);
                        }
                    }
                }
                var c1 = color(61, 29, 8);
                strokeWeight(5);
                stroke(c1);
                line(0,40,300,39);
                line(0,110,300,111);
                line(0,40,300,40);
                line(0,110,300,110);
                noStroke();
                fill(c1);
                for(var i = 0; i < 400; i += 50){
                    ellipse(50/2+random(-1,1),(i+25)/2,10,10);
                    ellipse(550/2+random(-3,3),(i+25)/2,10,10);
                }
                
                var c2 = color(26, 13, 2);
                fill(c2);
                textFont(createFont('Verdana Bold'),60);
                textAlign(CENTER,CENTER);
                text('TAVERN',150,75);
                
                var img = get(0,0,300,150);
                
                if(img){
                    img.mask(mask);
                }
                
                pushMatrix();
                scale(1/5);
                
                background(255,0);
                stroke(c1);
                strokeWeight(15);
                line(50,50,50,100);
                line(250,40,250,100);
                pushMatrix();
                translate(150,75);
                rotate(4);
                translate(-140,9);
                fill(0,50);
                noStroke();
                rect(0,0,310,160,20);
                image(img,0,0);
                popMatrix();
                
                popMatrix();
            }
        },
        tavernMenu:{
            w:320,
            h:220,
            d:function(){
                noStroke();
                fill(50,50,60);
                rect(0,0,300,200);
                
                fill(245,245,255);
                textFont(createFont('Noto Sans Bold'),40);
                textAlign(CENTER,CENTER);
                text('Menu',150,30);
                rect(25,28,60,5);
                rect(215,28,60,5);
                //rect(25,170,250,5);
                
                textAlign(LEFT,CORNER);
                textSize(20);
                text('Entrées',55,80);
                text('Drinks',186,80);
                textFont(createFont('Noto Sans'),15);
                text('Tomato Soup\nPotato Stew\nLambchops\nDaily Special',25,100);
                text('Root Beer\nGrape Juice\nSpecial Sauce\nLemonade',160,100);
                text('$4\n$5\n$5\n$4',125,100);
                text('$2\n$2\n$1\n$1',258,100);
                for(var i = 0; i < 200; i ++){
                    fill(0,6);
                    ellipse(random(0,300),random(0,200),50,50);
                }
                textAlign(CENTER,CENTER);
                var img = get(0,0,300,200);
                
                background(0);
                fill(255);
                noStroke();
                rect(0,0,300,200,20);
                var mask = get(0,0,300,200);
                
                if(img){
                    img.mask(mask);
                }
                
                background(255,0);
                fill(84, 48, 20);
                rect(0,0,320,220,25);
                fill(130, 89, 57,50);
                rect(5,5,310,210,25);
                image(img,10,10);
            }
        },
        rootbeer:{
            w:30,
            h:30,
            d:function(){
                noStroke();
                fill(89, 44, 6);
                rect(2,15,16,12,0,0,5,5);
                fill(255,50);
                rect(0,0,20,30,0,0,5,5);
                
                noFill();
                strokeCap(SQUARE);
                strokeWeight(5);
                stroke(255,50);
                arcs(20,15,15,15,-90,90);
            }
        },
        soup:{
            w:30,
            h:30,
            d:function(){
                background(0);
                noStroke();
                fill(255);
                arcs(15,10,30,30,0,180);
                rect(7,21,16,5);
                var mask = get(0,0,30,30);
                
                background(103, 109, 171);
                fill(0,20);
                rect(7,21,16,5);
                fill(0,5);
                for(var i = 0; i < 20; i ++){
                    ellipse(4,30,i*4,i*6);
                }
                var img = get(0,0,30,30);
                
                if(img){
                    img.mask(mask);
                }
                background(255,0);
                stroke(100);
                strokeWeight(3);
                line(18,15,30,3);
                image(img,0,0);

            }
        },
        stool:{
            w:50,
            h:75,
            d:function(){
                strokeCap(SQUARE);
                strokeWeight(5);
                stroke(82, 44, 12);
                line(40,40,10,40);
                stroke(94, 55, 22);
                line(10,5,5,75);
                line(40,5,45,75);
                
                strokeWeight(7);
                stroke(115, 72, 25);
                line(5,5,45,5);
                noStroke();
                fill(255,30);
                triangle(5,2,46,2,46,6);
            }
        },
        bar:{
            w:300,
            h:100,
            d:function(){
                background(0);
                fill(255);
                noStroke();
                rect(-5,0,250,10,5);
                rect(0,10,235,200);
                var mask = get(0,0,300,200);
                
                background(99, 60, 38);
                stroke(84, 44, 18);
                strokeWeight(1);
                var off = 110;
                for(var i = 0; i <= 300; i ++){
                    for(var j = 0; j < 200; j ++){
                        var n = noise((i+off)/500,(j+off)/50).toFixed(2);
                        if((n * 100)%2===0){
                            point(i,j);
                        }
                    }
                }
                fill(0,100);
                rect(0,10,285,200);
                var img = get(0,0,300,200);
                if(img){
                    img.mask(mask);
                }
                
                background(255,0);
                image(img,0,0);
            }
        },
        barrel1:{
            w:75,
            h:75,
            d:function(){
                background(100);
                fill(255,5);
                noStroke();
                for(var i = 0; i < 60; i += 3){
                    ellipse(i,random(0,5),10,10);
                }
                var metal = get(0,0,60,5);
                
                background(0);
                fill(255);
                noStroke();
                beginShape();
                vertex(10,0);
                vertex(50,0);
                bezierVertex(60,25,60,50,50,75);
                vertex(10,75);
                bezierVertex(2,50,0,25,10,0);
                endShape();
                var mask = get(0,0,60,75);
                
                background(99, 60, 38);
                stroke(84, 44, 18);
                strokeWeight(1);
                var off = 175;
                for(var i = 0; i <= 60; i ++){
                    for(var j = 0; j < 75; j ++){
                        var n = noise((i+off)/20,(j+off)/200).toFixed(2);
                        if((n * 100)%2===0){
                            point(i,j);
                        }
                    }
                }
                stroke(69, 30, 3,200);
                strokeWeight(1);
                for(var i = 0; i < 60; i += 10){
                    line(i,0,i,75);
                }
                image(metal,0,0);
                image(metal,0,70);
                
                image(metal,0,20,60,3);
                image(metal,0,50,60,3);
                var img = get(0,0,60,75);
                
                if(img){
                    img.mask(mask);
                }
                
                background(255,0);
                image(img,0,0);
            }
        },
        barrel2:{
            w:50,
            h:50,
            d:function(){
                background(0);
                fill(255);
                noStroke();
                ellipse(25,25,50,50);
                fill(0);
                ellipse(25,25,43,43);
                fill(255);
                ellipse(25,15,7,7);
                var mask = get(0,0,50,50);
                
                background(100);
                fill(255,5);
                noStroke();
                for(var i = 0; i < 200; i ++){
                    ellipse(random(0,50),random(0,50),10,10);
                }
                var metal = get(0,0,50,50);
                if(metal){
                    metal.mask(mask);
                }
                
                background(0);
                fill(255);
                noStroke();
                ellipse(25,25,45,45);
                var mask = get(0,0,60,75);
                
                background(99, 60, 38);
                stroke(84, 44, 18);
                strokeWeight(1);
                var off = 175;
                for(var i = 0; i <= 60; i ++){
                    for(var j = 0; j < 75; j ++){
                        var n = noise((i+off)/20,(j+off)/200).toFixed(2);
                        if((n * 100)%2===0){
                            point(i,j);
                        }
                    }
                }
                stroke(69, 30, 3,200);
                strokeWeight(1);
                for(var i = 0; i < 60; i += 10){
                    line(i,0,i,75);
                }
                var img = get(0,0,60,75);
                
                if(img){
                    img.mask(mask);
                }
                
                background(255,0);
                image(img,0,0);
                image(metal,0,0);
                
                noStroke();
                fill(0,100);
                ellipse(25,15,5,5);
            }
        },
        villageHouse1:{
            w:600,
            h:600,
            d:function(){
                background(0);
				noStroke();
				pushMatrix();
				translate(200,0);
				fill(255);
				rect(185,100,15,200);
				rect(-190,100,15,200);
				rect(-190,285,390,15);
				stroke(255);
				strokeWeight(15);
				rect(70,185,50,115,50,50,0,0);
				//rect(0,101,200,30);
				popMatrix();
				var mask = get(0,100,400,200);
				
				background(59, 33, 18);
				stroke(36, 17, 5);
				strokeWeight(1);
				var off = 1010;
				for(var i = 0; i <= 400; i ++){
					for(var j = 100; j < 300; j ++){
						var n = noise((i+off)/50,(j+off)/70).toFixed(2);
						if((n * 100)%2===0){
						    stroke(36+random(-5,20), 17+random(0,5), 5);
							point(i,j);
							
						}
					}
				}
				var img = get(0,100,400,200);
				if(img){
					img.mask(mask);
				}
				background(255,0);
				
				background(0);
				fill(255);
				rect(70,185,50,115,50,50,0,0);
				var mask2 = get(0,0,200,300);
				
				background(125, 73, 30);
				stroke(102, 50, 24);
				strokeWeight(1);
				for(var i = 0; i < 200; i += 5){
					line(i,0,i,300);
				}
				var img2 = get(0,0,200,300);
				if(img2){
					img2.mask(mask2);
				}
				
				
				background(255,0);
				pushMatrix();
				translate(200,0);
				
				fill(163, 155, 114);
				rect(-180,100,380,200);
				strokeWeight(1);
				for(var i = 0; i < 1000; i ++){
					stroke(0,random(20,50));
					point(random(-200,200),random(100,300));
				}
				
				image(img,-200,100);
				
				fill(0,50);
				rect(-180,282,385,3);
				rect(182,100,3,181);
				
				image(img2,0,0);
				
				noStroke();
				for(var i = 0; i < 70; i ++){
					fill(0,i*1.5);
					rect(-180,180-i,362,1);
				}
				
				fill(217, 180, 32);
				ellipse(110,245,10,10);
				fill(255,100);
				ellipse(111,243,7,5);
				
				noStroke();
                var colors = [
                    color(148, 120, 65),
                    color(143, 112, 59),
                    color(133, 106, 68),
                ];
                strokeWeight(3); 
                var d = 28;
                randomSeed(3);
                for(var i = 0; i < 2000; i ++){
                   
                    var clr = colors[~~random(0,colors.length)];
                    stroke(red(clr)-d,green(clr)-d,blue(clr)-d);
                    var r = random(70,110);
                    var x = random(-190,200);
                    var y = random(0,100);
                    line(x,y,x+cos(r)*40,y+sin(r)*40);
                    
                }
                image(imgs.window1,-150,170,50,100);
                image(imgs.window1,-75,170,50,100);
				popMatrix();
            }
        },
        villageHouse2:{
            w:420,
            h:400,
            d:function(){
                
                background(230);
                noStroke();
                for(var i = 0; i < 100; i ++){
                    fill(0,20);
                    ellipse(random(0,100),random(0,200),10,10);
                }
                for(var i = 0; i < 200; i += 40){
                    for(var j = 0; j < 400; j += 40){
                        stone(i,j,random(80,120));
                        stone(i-20,j+20,random(80,120));
                    }
                }
                var chimney = get(0,0,100,200);
                
                
                background(0);
				noStroke();
				pushMatrix();
				translate(200,0);
				fill(255);
				rect(185,100,15,200);
				rect(-190,100,15,200);
				rect(-190,285,390,15);
				rect(-190,285,390,15);
				stroke(255);
				strokeWeight(15);
				rect(-20,185,50,115,50,50,0,0);
				//rect(0,101,200,30);
				popMatrix();
				var mask = get(0,100,400,200);
				
				background(59, 33, 18);
				stroke(36, 17, 5);
				strokeWeight(1);
				var off = 1010;
				for(var i = 0; i < 400; i ++){
					for(var j = 100; j < 300; j ++){
						var n = noise((i+off)/50,(j+off)/70).toFixed(2);
						if((n * 100)%2===0){
						    stroke(36+random(-5,20), 17+random(0,5), 5);
							point(i,j);
							
						}
					}
				}
				var pillar = get(0,100,20,200);
				var img = get(0,100,400,200);
				if(img){
					img.mask(mask);
				}
				
				background(255,0);
				
				background(0);
				fill(255);
				rect(70,185,50,115,50,50,0,0);
				var mask2 = get(0,0,200,300);
				
				background(125, 73, 30);
				stroke(102, 50, 24);
				strokeWeight(1);
				for(var i = 0; i < 200; i += 5){
					line(i,0,i,300);
				}
				var img2 = get(0,0,200,300);
				if(img2){
					img2.mask(mask2);
				}
				
				
				background(255,0);
				pushMatrix();
				translate(200,100);
				
				noStroke();
				fill(163, 155, 114);
				rect(-180,100,380,200);
				strokeWeight(1);
				for(var i = 0; i < 1000; i ++){
					stroke(0,random(20,50));
					point(random(-200,200),random(100,300));
				}
				noStroke();
                fill(184, 175, 131);
				triangle(100,125,-100,125,0,25);
				rect(-95,125,200,157);
				
				image(img,-200,100);
				
				fill(0,50);
				rect(-180,282,368,3);
				rect(182,100,3,182);
				rect(-175,100,3,182);
				rect(-98,100,3,182);
				rect(108,100,3,182);
				
				image(img2,-90,0);
				
				
				
				noStroke();
				for(var i = 0; i < 70; i ++){
					fill(0,i*1.5);
					rect(-180,179-i,365,1);
				}
				
				fill(217, 180, 32);
				ellipse(20,245,10,10);
				fill(255,100);
				ellipse(21,243,7,5);
				
				noStroke();
                var colors = [
                    color(148, 120, 65),
                    color(143, 112, 59),
                    color(133, 106, 68),
                ];
                strokeWeight(3); 
                var d = 28;
                randomSeed(3);
                for(var i = 0; i < 2000; i ++){
                   
                    var clr = colors[~~random(0,colors.length)];
                    stroke(red(clr)-d,green(clr)-d,blue(clr)-d);
                    var r = random(70,110);
                    var x = random(-190,200);
                    var y = random(0,100);
                    line(x,y,x+cos(r)*40,y+sin(r)*40);
                    
                }
                pushMatrix();
                translate(5,0);
                noStroke();
                fill(184, 175, 131);
				triangle(100,125,-100,125,0,25);
                rect(-100,125,200,53);
                
                image(pillar,-100,119,10,180);
                image(pillar,93,119,10,180);
				
				strokeWeight(1);
				for(var i = 0; i < 70; i ++){
				    stroke(0,56-i);
				    line(100,125+i,0,25+i);
				    line(-100,125+i,0,25+i);
				}
				
			
				d = 70;
				strokeWeight(4);
				for(var i = 0; i < 300; i ++){
                    var clr = colors[~~random(0,colors.length)];
                    stroke(red(clr)-d,green(clr)-d,blue(clr)-d);
                    var x = map(i,0,300,100,-0);
                    var y = map(i,0,300,125,25);
                    point(x+random(-2,2),y+random(-2,2));
                    
                }
                for(var i = 0; i < 300; i ++){
                    var clr = colors[~~random(0,colors.length)];
                    stroke(red(clr)-d,green(clr)-d,blue(clr)-d);
                    var x = map(i,0,300,-100,-0);
                    var y = map(i,0,300,125,25);
                    point(x+random(-2,2),y+random(-2,2));
                    
                }
                strokeWeight(1);
				for(var i = 0; i < 1000; i ++){
					stroke(0,random(20,50));
					point(random(-100,100),random(0,400));
				}
				popMatrix();
				d = 28;
                image(chimney,-150,-53,50,100);
                for(var i = 0; i < 100; i ++){
                   
                    var clr = colors[~~random(0,colors.length)];
                    stroke(red(clr)-d,green(clr)-d,blue(clr)-d);
                    var r = random(70,110);
                    var x = random(-150,-100);
                    var y = random(20,50);
                    line(x,y,x+cos(r)*20,y+sin(r)*20);
                    
                }
                
                image(imgs.window1,-160,180,50,100);
                image(imgs.window1,120,180,50,100);
                image(imgs.window2,-27,75,60,60);
				popMatrix();
            }
        },
        cloud1:{
            w:150,
            h:50,
            d:function(){
                var cloud = function(x,y,s){
                    pushMatrix();
                    translate(x,y);
                    scale(s);
                    beginShape();
                    vertex(0,50);
                    bezierVertex(1,3,36,5,36,20);
                    bezierVertex(50,6,67,-3,75,14);
                    bezierVertex(114,0,104,18,125,30);
                    bezierVertex(153,40,140,51,125,50);
                    endShape();
                    popMatrix();
                };
    
                noStroke();
                background(0);
                fill(255);
                cloud(0,0,1);
                var mask = get(0,0,150,50);
                
                background(200);
                noStroke();
                fill(220);
                ellipse(132,39,30,10);
                ellipse(70,40,30,15);
                ellipse(105,23,20,15);
                ellipse(66,14,20,15);
                filter(BLUR,2);
                var img = get(0,0,150,50);
                
                if(img){
                    img.mask(mask);   
                }
                
                background(255,0);
                image(img,0,0);
                fill(255,20);
                cloud(-4,-4,1.05);
            },
        },
        cloud2:{
            w:150,
            h:50,
            d:function(){
                var cloud2 = function(x,y,s){
                    pushMatrix();
                    translate(x,y);
                    scale(s);
                    beginShape();
                    vertex(0,50);
                    bezierVertex(0,30,13,34,37,22);
                    bezierVertex(66,0,72,0,94,25);
                    bezierVertex(105,22,117,13,120,30);
                    bezierVertex(127,38,153,26,150,50);
                    endShape();
                    popMatrix();
                };
                background(0);
                fill(255);
                noStroke();
                cloud2();
                var mask2 = get(0,0,150,60);
                
                background(200);
                fill(220);
                ellipse(138,40,20,15);
                ellipse(114,26,15,15);
                ellipse(77,14,30,20);
                ellipse(71,41,40,10);
                filter(BLUR,2);
                var img2 = get(0,0,150,60);
                
                if(img2){
                    img2.mask(mask2);
                }  
                
                background(255,0);
                
                fill(255,20);
                image(img2,0,0);
                cloud2(-4,-4,1.05);
            }
        },
        stars1:{
            w:900,
            h:600,
            d:function(){
                background(8, 36, 54);
                randomSeed(1);
                fill(3, 17, 31,100);
                beginShape();
                vertex(900,600);
                vertex(0,600);
                vertex(0,200);
                noStroke();
                for(var i = 0; i <= 900; i += 100){
                    curveVertex(i,200+random(-50,50));
                }
                vertex(900,600);
                endShape(CLOSE);
                fill(15, 48, 82,100);
                beginShape();
                vertex(900,600);
                vertex(0,600);
                vertex(0,200);
                noStroke();
                for(var i = 0; i <= 900; i += 100){
                    curveVertex(i,100+random(-50,50));
                }
                vertex(900,600);
                endShape(CLOSE);
                
                filter(BLUR,10);
                for(var i = 0; i < 300; i ++){
                    var s = random(2,5);
                    fill(255,random(50,100));
                    ellipse(random(0,900),random(0,600), s, s);  
                }   
            }
        },
        stars2:{
            w:900,
            h:600,
            d:function(){
                background(8, 36, 54);
                randomSeed(10);
                fill(3, 17, 31,100);
                beginShape();
                vertex(900,600);
                vertex(0,600);
                vertex(0,200);
                noStroke();
                for(var i = 0; i <= 900; i += 100){
                    curveVertex(i,200+random(-50,50));
                }
                vertex(900,600);
                endShape(CLOSE);
                fill(15, 48, 82,100);
                beginShape();
                vertex(600,600);
                vertex(0,600);
                vertex(0,200);
                noStroke();
                for(var i = 0; i <= 900; i += 100){
                    curveVertex(i,100+random(-50,50));
                }
                vertex(900,600);
                endShape(CLOSE);
                
                filter(BLUR,10);
                for(var i = 0; i < 300; i ++){
                    var s = random(2,5);
                    fill(255,random(50,100));
                    ellipse(random(0,900),random(0,600), s, s);  
                }   
            }
        },
        hills1:{
            w:900,
            h:600,
            d:function(){
                background(0);
                fill(255);
                noStroke();
                randomSeed(5);
                beginShape();
                vertex(0,300);
                for(var i = 0; i < 900; i += 50){
                    curveVertex(i,cos(i+90)*20+300+random(5,-5));
                }
                vertex(900,300);
                vertex(900,300);
                vertex(900,600);
                vertex(0,600);
                endShape(CLOSE);
                var mask = get();
                
                background(24, 87, 59);
                
                randomSeed(5);
                fill(24, 77, 48);
                beginShape();
                vertex(0,300);
                for(var i = 0; i < 900; i += 50){
                    vertex(i-30,cos(i+90)*20+300+random(5,-5)+10);
                }
                vertex(900,320);
                vertex(900,600);
                vertex(0,600);
                endShape(CLOSE);
                var hills = get();
                if(hills){
                    hills.mask(mask);
                }  
                
                background(255,0);
                image(hills,0,0);
                var Tree = function(x,y,s){
                    fill(3, 64, 40);
                    pushMatrix();
                    translate(x,y);
                    scale(s);
                    var branch = function(x,y,r,s,sy){
                        pushMatrix();
                        translate(x,y-5);
                        rotate(r);
                        scale(s,sy);
                        beginShape();
                        vertex(0,-5);
                        vertex(-25,12);
                        vertex(-50,20);
                        for(var i = 0; i < 50;i +=random(2,3)){
                            vertex(i-50,i/5+20+random(-3,5));
                        }
                        endShape();
                        popMatrix();
                    };
                    branch(50,120,0,1.4,1.7);
                    branch(53,91,0,1.2,1.5);
                    branch(54,63,0,1.1,1.5);
                    branch(59,41,-3,1,1.3);
                    branch(56,18,-5,0.8,1.3);
                    branch(56,-5,-5,0.7,1.3);
                    branch(50,120,180,1.4,-1.7);
                    branch(53,91,180,1.2,-1.5);
                    branch(54,63,180,1.1,-1.5);
                    branch(59,41,177,1,-1.3);
                    branch(56,18,175,0.8,-1.3);
                    branch(55,-5,183,0.7,-1.3);
                    rect(41,9,20,188);
                    popMatrix();
                };
                noStroke();
                randomSeed(2);
                for(var i = 0; i < 900; i += 15){
                    var x = i;
                    var y = random(cos(i+90)*20+290,400);
                    var s = map(y,300,400,0.2,0.4);
                    Tree(x,y,s);
                }
                
            },
        },
        hills2:{
            w:900,
            h:600,
            d:function(){
                
                
                background(0);
                fill(255);
                noStroke();
                randomSeed(10);
                beginShape();
                vertex(0,300);
                for(var i = 0; i < 900; i += 50){
                    curveVertex(i,cos(i+180)*20+300+random(5,-5));
                }
                vertex(900,300);
                vertex(900,300);
                vertex(900,600);
                vertex(0,600);
                endShape(CLOSE);
                var mask = get();
                
                background(24, 87, 59);
                
                randomSeed(12);
                fill(24, 77, 48);
                beginShape();
                vertex(0,300);
                for(var i = 0; i < 900; i += 50){
                    vertex(i-30,cos(i+180)*20+300+random(5,-5)+10);
                }
                vertex(900,320);
                vertex(900,600);
                vertex(0,600);
                endShape(CLOSE);
                var hills = get();
                if(hills){
                    hills.mask(mask);
                }  
                
                background(255,0);
                image(hills,0,0);
                
                var Tree = function(x,y,s){
                    fill(3, 64, 30);
                    pushMatrix();
                    translate(x,y);
                    scale(s);
                    var branch = function(x,y,r,s,sy){
                        pushMatrix();
                        translate(x,y-5);
                        rotate(r);
                        scale(s,sy);
                        beginShape();
                        vertex(0,-5);
                        vertex(-25,12);
                        vertex(-50,20);
                        for(var i = 0; i < 50;i +=random(2,3)){
                            vertex(i-50,i/5+20+random(-3,5));
                        }
                        endShape();
                        popMatrix();
                    };
                    branch(50,120,0,1.4,1.7);
                    branch(53,91,0,1.2,1.5);
                    branch(54,63,0,1.1,1.5);
                    branch(59,41,-3,1,1.3);
                    branch(56,18,-5,0.8,1.3);
                    branch(56,-5,-5,0.7,1.3);
                    branch(50,120,180,1.4,-1.7);
                    branch(53,91,180,1.2,-1.5);
                    branch(54,63,180,1.1,-1.5);
                    branch(59,41,177,1,-1.3);
                    branch(56,18,175,0.8,-1.3);
                    branch(55,-5,183,0.7,-1.3);
                    rect(41,9,20,188);
                    popMatrix();
                };
                
                noStroke();
                randomSeed(3);
                for(var i = 0; i < 900; i += 15){
                    var x = i;
                    var y = random(cos(i+180)*20+290,400);
                    var s = map(y,300,400,0.2,0.4);
                    Tree(x,y,s);
                }
                
            },
        },
        wellForeground:{
            w:800,
            h:600,
            d:function(){
                background(0);
                noiseSeed(1);
                noStroke();
                fill(255);
                randomSeed(3);
                for(var  i = 0; i < 800; i += random(5,10)){
                    var yOff = i<720?cos(i/2):1;
                    ellipse(i,yOff*50+400+random(-2,2),random(10,20),20);
                    triangle(i+random(-1,4),yOff*50+380+random(5,3),i-random(2,4),yOff*50+395,i+random(2,4),yOff*50+395);
                    triangle(i+4+random(-1,4),yOff*50+380+random(-5,3),i-random(2,4)+4,yOff*50+395,i+random(2,4)+4,yOff*50+395);
                    
                }
                var mask = get();
                background(49, 130, 106);
                fill(30, 112, 87,100);
                for(var i = 0; i < 400; i ++){
                    ellipse(random(0,800),random(350,450),20,20);
                }
                filter(BLUR,2);
                var img = get();
                if(img){
                    img.mask(mask);
                }
                
                background(255,0);
            
                fill(89, 74, 50);
                beginShape();
                for(var i = 0; i <= 800; i += 5){
                    var yOff = i<720?cos(i/2):1;
                    vertex(i,yOff*50+400);
                }
                vertex(800,600);
                vertex(0,600);
                endShape();
                fill(82, 64, 41);
                beginShape();
                for(var i = 0; i <= 850; i += random(50,100)){
                    var yOff = i<720?cos(i/2):1;
                    vertex(i,yOff*50+400+100+random(-20,20));
                }
                vertex(800,600);
                vertex(0,600);
                endShape();
                fill(0,20);
                beginShape();
                for(var i = 0; i <= 850; i += random(50,100)){
                    var yOff = i<720?cos(i/2):1;
                    vertex(i,yOff*50+550+random(-20,20));
                }
                vertex(600,600);
                vertex(0,600);
                endShape();
                image(img,0,0);
                
                randomSeed(1);
                fill(0,20);
                for(var i = 0; i < 60; i ++){
                    var y = random(500,600);
                    var s = map(y,500,600,20,40)+random(3,-3);
                    ellipse(random(0,800),y,s,s);
                }
                
                rock(100,500,1,1);
                rock(200,550,20,0.8);
                rock(320,480,20,0.5);
                rock(450,540,10,1);
                rock(600,580,20,0.8);
                rock(725,540,10,0.65);
            }
        },
        well:{
            w:600,
            h:600,
            d:function(){
                noStroke();
                for(var i = 0; i < 200; i += 2){
                    for(var j = 0; j < 200; j += 2){
                        fill(random(180,220));
                        rect(i,j,2,2);
                    }
                }
                for(var i = 0; i < 200; i += 40){
                    for(var j = 0; j < 200; j += 40){
                        stone(i,j,random(80,120));
                        stone(i-20,j+20,random(80,120));
                    }
                }
                var well = get(0,0,180,200);
                
                background(255);
                strokeWeight(1);
                for(var i = 0; i < 10; i ++){
                    for(var j = 0; j < 100; j ++){
                        var n = noise(i/0.1,j/20)*100;
                        stroke(110+n, 62+n, 22+n);
                        point(i,j);
                    }
                }
                var woodPillar = get(0,0,10,100);
                
                background(0);
                fill(255);
                noStroke();
                for(var i = 240; i < 300; i ++){
                    ellipse(50+cos(i)*70,60+sin(i)*50,10,10);
                }
                var woodMask = get(0,0,120,30);
                
                for(var i = 0; i < 120; i ++){
                    for(var j = 0; j < 30; j ++){
                        var n = noise(i/20,j/0.1)*100;
                        stroke(110+n, 62+n, 22+n);
                        point(i,j);
                    }
                }
                fill(0,30);
                rect(0,0,120,30);
                var woodTexture = get(0,0,120,30);
                if(woodTexture){
                    woodTexture.mask(woodMask);   
                }
            
        

                background(255,0);
                pushMatrix();
                scale(0.8);
                translate(100,90);
                image(woodPillar,305,250);
                image(woodPillar,360,250);
                image(woodTexture,288,239);
                image(well,300,300,75,100);
                for(var i = 0; i < 80; i += 17){
                    stone(i+295,292,random(80,120),0.5);
                }
                popMatrix();

            },
        },  
        wellTree:{
            w:600,
            h:600,
            d:function(){
                var leaf = function(x,y,d,off,clr){
                    noStroke();
                    background(0);
                    fill(255);
                    var seed = random(0,100);
                    randomSeed(seed);
                    beginShape();
                        for(var i = 0; i < 360; i += 5){
                            vertex(50+cos(i)*100/2+random(-2,2),50+sin(i)*100/2+random(-2,2));   
                        }
                    endShape();
                    var mask = get(0,0,100,100);
                    background(clr);
                    
                    for(var i = 0; i < 200; i ++){
                        fill(89, 168, 99,10);
                        ellipse(random(0,100),random(0,100),10,10);
                    }
                    randomSeed(seed);
                    fill(255,20);
                    beginShape();
                        for(var i = 0; i < 360; i += 5){
                            vertex(50+cos(i)*100/2-random(-2,2)-off,50+sin(i)*100/2+random(-2,2)-off);   
                        }
                    endShape();
                    var img = get(0,0,100,100);
                    
                    if(img){
                        img.mask(mask);
                    }
                    background(255,0);
                    image(img,x,y,d,d);
                };
                leaf(0,0,100,30,color(16, 74, 44));
                var leaf1 = get(0,0,100,100);
                
                leaf(0,0,100,10,color(16, 74, 44));
                var leaf2 = get(0,0,100,100);
                
                leaf(0,0,100,20,color(16, 74, 44));
                var leaf3 = get(0,0,100,100);
                
                leaf(0,0,100,100,color(16, 74,44));
                var leaf4 = get(0,0,100,100);
                
                
                
                background(0);
                pushMatrix();
                fill(255);
                beginShape();
                vertex(600,430);
                vertex(458,429);
                vertex(486,409);
                vertex(538,401);
                vertex(561,385);
                vertex(567,196);
                vertex(548,172);
                vertex(489,146);
                vertex(384,167);
                vertex(476,127);
                vertex(387,103);
                vertex(351,83);
                vertex(394,91);
                vertex(507,121);
                vertex(563,140);
                vertex(571,-20);
                vertex(600,-20);
                endShape(CLOSE);
                popMatrix();
                var mask = get();
                background(92, 64, 49);
                
                noStroke();
                pushMatrix();
                translate(4,4);
                fill(125, 84, 65);
                beginShape();
                vertex(483,404);
                vertex(505,419);
                vertex(545,411);
                vertex(572,397);
                vertex(573,227);
                vertex(565,190);
                vertex(510,300);
                endShape(CLOSE);
                
                beginShape();
                vertex(565,139);
                vertex(574,125);
                vertex(578,0);
                vertex(550,0);
                vertex(549,121);
                endShape(CLOSE);
                
                beginShape();
                vertex(378,80);
                vertex(420,104);
                vertex(565,148);
                vertex(566,137);
                endShape(CLOSE);
                
                fill(0,50);
                translate(4,4);
                beginShape();
                vertex(488,431);
                vertex(503,420);
                vertex(558,413);
                vertex(579,403);
                vertex(589,0);
                vertex(599,1);
                vertex(599,429);
                endShape(CLOSE);
                
                beginShape();
                vertex(567,194);
                vertex(559,166);
                vertex(484,132);
                vertex(410,161);
                endShape(CLOSE);
                
                filter(BLUR,3);
                var img = get();
                popMatrix();
                
                if(img){
                    img.mask(mask);   
                }
                background(255,0);
                pushMatrix();
                translate(0,20);
                image(leaf4,530,-50);
                image(leaf4,432,25);
                image(leaf4,444,109);
                image(leaf4,392,51);
                image(leaf1,367,-40);
                image(leaf4,500,-10);
                image(leaf1,450,-40);
                image(leaf4,500,52);
                image(leaf1,425,39);
                image(img,0,0);
                image(leaf2,535,-4);
                image(leaf1,324,22);
                image(leaf4,349,98);
                popMatrix();
            },
            
        },
        wire:{
            w:600,
            h:600,
            d:function(){
                pushMatrix();
                translate(0,-100);
                noFill();
                stroke(70);
                strokeWeight(3);
                beginShape();
                vertex(600,210);
                bezierVertex(468,282,300,265,200,250);
                endShape();
                strokeWeight(2);
                stroke(100);
                pushMatrix();
                translate(0,-2);
                beginShape();
                vertex(600,210);
                bezierVertex(468,282,300,265,200,250);
                endShape();
                popMatrix();
                popMatrix();

            },
        },
        rock1:{
            w:200,
            h:200,
            d:function(){
                noStroke();
                background(0);
                fill(255);
                beginShape();
                vertex(600,413);
                vertex(533,429);
                vertex(491,476);
                vertex(472,600);
                vertex(600,600);
                endShape(CLOSE);
                var mask = get(400,400,200,200);
                
                background(150);
                fill(0,20);
                pushMatrix();
                translate(20,20);
                beginShape();
                vertex(599,413);
                vertex(533,429);
                vertex(491,476);
                vertex(472,599);
                vertex(599,599);
                endShape(CLOSE);
                popMatrix();
                
                pushMatrix();
                translate(60,60);
                beginShape();
                vertex(599,413);
                vertex(533,429);
                vertex(491,476);
                vertex(472,599);
                vertex(599,599);
                endShape(CLOSE);
                popMatrix();
                
                fill(30, 140, 116);
                rect(547,420,10,40,20);
                rect(557,420,10,25,20);
                fill(0,20);
                rect(551,416,6,36,20);
                rect(557,420,10,25,20);
                ellipse(561,429,10,15);
                var img = get(400,400,200,200);
                
                if(img){
                    img.mask(mask);   
                }
                background(255,0);
                image(img,0,0);

            },  
        },
        pot:{
            w:30,
            h:30,
            d:function(){
                pushMatrix();
                translate(0,-20);
                noStroke();
                fill(130, 80, 40);
                rect(0,20,30,5);
                quad(2,25,6,50,24,50,28,25);
                fill(0,50);
                quad(2,25,6,50,24,50,28,25);
                popMatrix(); 
            },  
        },  
        playerHead:{
            w:40,
            h:40,
            d:function(){
                background(0);
                fill(255);
                noStroke();
                beginShape();
                vertex(35,10);
                vertex(23,15);
                vertex(20,20);
                vertex(18,28);
                vertex(11,31);
                vertex(7,16);
                vertex(12,5);
                vertex(21,2);
                vertex(33,5);
                endShape();
                var mask = get(0,0,40,40);
                
                var points = [];
                for(var i = 0; i < 1000; i ++){
                    var x = ~~random(0,40);
                    var y = ~~random(0,40);
                    if(get(x,y) === color(255)){
                        points.push(x,y);
                    }
                }
                background(255,0);
                for(var i = 0; i < points.length; i += 2){
                    pushMatrix();
                    translate(points[i],points[i+1]);
                    rotate(random(0,360));
                    fill(74+random(0,-30), 52-random(0,10), 10);
                    ellipse(0,0,2,4);
                    popMatrix();
                }
                
                var hair = get(0,0,40,40);
                
                background(255,0);
                strokeWeight(1);
                pushMatrix();
                noStroke();
                fill(214, 184, 148);
                translate(0,5);
                beginShape();
                vertex(20,0);
                bezierVertex(33,-2,37,8,35,15);
                vertex(40,20);
                vertex(35,22);
                bezierVertex(35,34,30,35,20,35);
                bezierVertex(11,38,5,0,20,0);
                endShape();
                popMatrix();
                fill(250, 232, 232);
                ellipse(29,20,5,4);
                fill(20, 4, 92);
                ellipse(30,20,3,3);
                stroke(0);
                line(34,31,29,31);
                noStroke();
                fill(48, 25, 2);
                image(hair,0,0);
                fill(214, 184, 148);
                ellipse(14,24,5,10);
                fill(138, 119, 96);
                ellipse(14,24,2,7);
            }
        },
        jessieHead:{
            w:40,
            h:50,
            d:function(){
                background(0);
                fill(255);
                noStroke();
                beginShape();
                curveVertex(35,10);
                curveVertex(23,15);
                curveVertex(20,20);
                curveVertex(18,28);
                curveVertex(11,31);
                curveVertex(7,16);
                curveVertex(12,5);
                curveVertex(21,2);
                curveVertex(33,5);
                curveVertex(35,10);
                endShape(CLOSE);
                ellipse(12,33,7,10);
                ellipse(11,40,5,8);
                ellipse(10,46,5,8);
                var mask = get(0,0,40,50);
                
                randomSeed(2);
                
                var points = [];
                for(var i = 0; i < 1000; i ++){
                    var x = ~~random(0,40);
                    var y = ~~random(0,40);
                    if(get(x,y) === color(255)){
                        points.push(x,y);
                    }
                }
                background(255,0);
                for(var i = 0; i < points.length; i += 2){
                    pushMatrix();
                    translate(points[i],points[i+1]);
                    rotate(random(0,360));
                    ellipse(0,0,2,4);
                    popMatrix();
                }
                noStroke();
                fill(153, 85, 40);
                rect(0,0,40,60);
                
                fill(89, 43, 10,50);
                noStroke();
                for(var i = 0; i < 100; i ++){
                    ellipse(random(0,40),random(0,40),5,5);
                }
                filter(BLUR,2);
                
                stroke(120, 59, 24);
                strokeWeight(1);
                noFill();
                for(var i = 0; i < 40; i += 3){
                    bezier(i,50,i,50,i,10,i+20,3);
                }
                
                
                var hair = get(0,0,40,50);
                if(hair){
                    hair.mask(mask);
                }
                
                background(255,0);
                strokeWeight(1);
                pushMatrix();
                noStroke();
                fill(212, 165, 111);
                translate(0,5);
                beginShape();
                vertex(20,0);
                bezierVertex(31,-2,37,8,35,15);
                vertex(38,21);
                vertex(35,22);
                bezierVertex(35,33,30,35,22,35);
                bezierVertex(11,38,5,0,20,0);
                endShape();
                popMatrix();
                fill(250, 232, 232);
                ellipse(29,20,5,4);
                fill(11, 143, 8);
                ellipse(30,20,3,3);
                fill(0);
                ellipse(30,20,1,1);
                stroke(94, 29, 30);
                noFill();
                bezier(34,32,31,33,26,31,29,31);
                noStroke();
                fill(48, 25, 2);
                image(hair,0,0);
                fill(235, 9, 167,20);
                ellipse(30,25,10,10);
                fill(153, 85, 40,100);
                for(var i = 0; i < 4; i ++){
                    ellipse(random(37,25),random(22,27),2,2);
                }
            
            }
        },
        jessieTorso:{
            w:40,
            h:40,
            d:function(){
                background(0);
                fill(255);
                noStroke();
                beginShape();
                vertex(25,40);
                vertex(10,40);
                bezierVertex(17,15,6,10,10,0);
                vertex(26,0);
                bezierVertex(36,5,37,16,32,21);
                bezierVertex(31,25,32,35,33,40);
                endShape();
                var mask = get(0,0,40,40);
                
                background(77, 86, 140);
                fill(0,15);
                noStroke();
                beginShape();
                vertex(10,40);
                vertex(15,40);
                bezierVertex(22,15,11,10,15,0);
                vertex(10,0);
                endShape();
                
                beginShape();
                vertex(10,40);
                vertex(20,40);
                bezierVertex(29,15,18,10,22,0);
                vertex(10,0);
                endShape();
                
                fill(255,15);
                beginShape();
                vertex(32,20);
                bezierVertex(27,25,28,35,29,40);
                vertex(33,40);
                endShape();
                
                pushMatrix();
                translate(32,7);
                rotate(-38);
                ellipse(0,0,8,20);
                popMatrix();
                
                var img = get(0,0,40,40);
                if(img){
                    img.mask(mask);
                }
                background(255,0);
                image(img,0,0);
            }
        },
        jessieDress:{
            w:40,
            h:40,
            d:function(){
                noStroke();
                background(0);
                fill(255);
                beginShape();
                vertex(10,0);
                vertex(33,0);
                bezierVertex(35,10,37,15,40,20);
                vertex(3,20);
                bezierVertex(10,10,8,10,10,0);
                endShape();
                randomSeed(8);
                for(var i = 6; i < 40; i += 4){
                    ellipse(i,19,4,random(6,10));
                }
                var mask = get(0,0,40,40);
                
                background(77, 86, 140);
                var img = get(0,0,40,40);
                
                if(img){
                    img.mask(mask);
                }
                background(255,0);
                image(img,0,0);
                
                fill(0,15);
                beginShape();
                vertex(10,0);
                vertex(3,25);
                vertex(8,23);
                bezierVertex(15,10,10,10,18,0);
                vertex(15,0);
                endShape();
                
                beginShape();
                vertex(3,25);
                vertex(14,23);
                bezierVertex(23,10,21,10,21,0);
                vertex(15,0);
                vertex(10,0);
                endShape();
                
                fill(255,15);
                beginShape();
                vertex(33,0);
                vertex(28,0);
                bezierVertex(30,10,32,15,35,25);
                vertex(40,25);
                endShape();
            }
        },
        jessieShoulder:{
            w:30,
            h:30,
            d:function(){
                background(0);
                noStroke();
                fill(255);
                rect(0,0,30,30,30,30,0,0);
                var mask = get(0,0,30,30);
                
                background(58, 67, 107);
                
                noStroke();
                fill(0,25);
                rect(0,10,20,20,10,10,0,0);
                
                var img = get(0,0,30,30);
                if(img){
                    img.mask(mask);
                }
                
                background(255,0);
                image(img,0,0); 
            }
        },
        jessieUpperArm:{
            w:20,
            h:40,
            d:function(){
                background(0);
                noStroke();
                fill(255);
                rect(5,0,10,40,0,0,10,10);
                ellipse(13,10,8,30);
                var mask = get(0,0,20,40);
                
                background(212, 165, 111);
                fill(140, 84, 20,50);
                randomSeed(1);
                for(var i = 0; i < 20; i ++){
                    ellipse(random(0,20),random(0,40),2,2);
                }
                
                var img = get(0,0,20,40);
                if(img){
                    img.mask(mask);
                }
                background(255,0);
                image(img,0,0);
            }
        },
        jessieLowerArm:{
            w:20,
            h:40,
            d:function(){
                background(0);
                noStroke();
                fill(255);
                rect(5,0,10,30,10,10,0,0);
                rect(3,22,3,16,3);
                rect(7,25,3,15,2);
                rect(11,25,3,15,2);
                pushMatrix();
                rotate(-10);
                rect(10,25,3,13,2);
                popMatrix();
                var mask = get(0,0,20,40);
                
                background(212, 165, 111);
                fill(140, 84, 20,50);
                randomSeed(1);
                for(var i = 0; i < 20; i ++){
                    ellipse(random(0,20),random(0,40),2,2);
                }
                
                var img = get(0,0,20,40);
                if(img){
                    img.mask(mask);
                }
                background(255,0);
                image(img,0,0);
            }
        },
        jessieUpperLeg:{
            w:20,
            h:40,
            d:function(){
                background(0);
                noStroke();
                fill(255);
                rect(5,0,10,40);
                ellipse(7.5,10,15,30);
                triangle(15,0,20,0,15,40);
                
                popMatrix();
                var mask = get(0,0,20,40);
                
                background(212, 165, 111);
                fill(140, 84, 20,50);
                randomSeed(1);
                for(var i = 0; i < 20; i ++){
                    ellipse(random(0,20),random(0,40),2,2);
                }
                fill(0,20);
                quad(0,0,15,0,12,40,0,40);
                
                noFill();
                var img = get(0,0,20,40);
                if(img){
                    img.mask(mask);
                }
                background(255,0);
                image(img,0,0);  
            }
        },
        jessieLowerLeg:{
            w:20,
            h:40,
            d:function(){
                background(0);
                noStroke();
                fill(255);
                quad(5,0,15,0,12,40,3,40);
                rect(10,30,6,10);
                arcs(15,35,10,10,-90,90);
                
                
                popMatrix();
                var mask = get(0,0,20,40);
                
                background(99, 41, 0);
                strokeWeight(1);
                for(var i = 0; i < 40; i ++){
                    for(var j = 0; j < 40; j ++){
                        var n = map(noise((i-100)/15,j/15),0.4,0.6,10,50);
                        stroke(200,200,255,n);
                        point(i,j);
                    }
                }
                
                
                fill(212, 165, 111);
                quad(0,0,15,0,14,22,-123,27);
                fill(140, 84, 20,50);
                randomSeed(1);
                for(var i = 0; i < 20; i ++){
                    ellipse(random(0,20),random(0,30),2,2);
                }
                
                
                noFill();
                var img = get(0,0,20,40);
                if(img){
                    img.mask(mask);
                }
                background(255,0);
                image(img,0,0);
            }
        },
        mayaHead:{
            w:40,
            h:50,
            d:function(){
                background(0);
                fill(255);
                noStroke();
                beginShape();
                curveVertex(35,10);
                curveVertex(23,15);
                curveVertex(20,20);
                curveVertex(18,28);
                curveVertex(11,31);
                curveVertex(7,16);
                curveVertex(12,5);
                curveVertex(21,2);
                curveVertex(33,5);
                curveVertex(35,10);
                endShape(CLOSE);
                beginShape();
                vertex(7,16);
                vertex(6,50);
                bezierVertex(10,45,14,59,10,50);
                bezierVertex(14,44,19,57,20,44);
                vertex(20,20);
                endShape();
                var mask = get(0,0,40,50);
                
                randomSeed(2);
                
                noStroke();
                fill(38, 17, 3);
                rect(0,0,40,60);
                
                fill(138, 76, 35,50);
                noStroke();
                for(var i = 0; i < 100; i ++){
                    ellipse(random(0,40),random(0,40),5,5);
                }
                filter(BLUR,2);
                
                stroke(77, 38, 17);
                strokeWeight(1);
                noFill();
                for(var i = 0; i < 40; i += 3){
                    bezier(i,50,i,50,i,10,i+20,3);
                }
                
                
                var hair = get(0,0,40,50);
                if(hair){
                    hair.mask(mask);
                }
                
                background(255,0);
                strokeWeight(1);
                pushMatrix();
                noStroke();
                fill(166, 116, 58);
                translate(0,5);
                beginShape();
                vertex(20,0);
                bezierVertex(31,-2,37,8,35,15);
                vertex(38,21);
                vertex(35,22);
                bezierVertex(35,33,30,35,22,35);
                bezierVertex(11,38,5,0,20,0);
                endShape();beginShape();
                vertex(20,0);
                bezierVertex(31,-2,37,8,35,15);
                vertex(38,21);
                vertex(35,22);
                bezierVertex(35,33,30,35,22,35);
                bezierVertex(11,38,5,0,20,0);
                endShape();
                popMatrix();
                fill(212, 180, 180);
                ellipse(29,20,5,4);
                fill(64, 33, 8);
                ellipse(30,20,3,3);
                fill(0);
                ellipse(30,20,1,1);
                stroke(94, 29, 30);
                noFill();
                bezier(34,32,31,33,26,31,29,31);
                noStroke();
                fill(48, 25, 2);
                image(hair,0,0);
                fill(181, 0, 127,20);
                ellipse(30,25,10,10);
                fill(153, 85, 40,100);
                for(var i = 0; i < 4; i ++){
                    ellipse(random(37,25),random(22,27),2,2);
                }
            }
        },
        mayaTorso:{
            w:40,
            h:40,
            d:function(){
                background(0);
                fill(255);
                noStroke();
                beginShape();
                vertex(25,40);
                vertex(10,40);
                bezierVertex(18,21,6,10,10,0);
                vertex(26,0);
                bezierVertex(36,9,34,13,32,21);
                bezierVertex(28,30,32,35,33,40);
                endShape();
                var mask = get(0,0,40,40);
                
                background(91, 110, 84);
                fill(0,15);
                noStroke();
                beginShape();
                vertex(10,40);
                vertex(15,40);
                bezierVertex(22,15,11,10,15,0);
                vertex(10,0);
                endShape();
                
                beginShape();
                vertex(10,40);
                vertex(20,40);
                bezierVertex(29,15,18,10,22,0);
                vertex(10,0);
                endShape();
                
                fill(255,15);
                beginShape();
                vertex(32,20);
                bezierVertex(27,25,28,35,29,40);
                vertex(33,40);
                endShape();
                
                pushMatrix();
                translate(32,7);
                rotate(-38);
                ellipse(0,0,8,20);
                popMatrix();
                
                var img = get(0,0,40,40);
                if(img){
                    img.mask(mask);
                }
                background(255,0);
                image(img,0,0);
            }
        },
        mayaDress:{
            w:40,
            h:40,
            d:function(){
                noStroke();
                background(0);
                fill(255);
                beginShape();
                vertex(10,0);
                vertex(33,0);
                bezierVertex(35,10,37,15,40,35);
                bezierVertex(30,37,20,35,3,35);
                bezierVertex(10,10,8,10,10,0);
                endShape();
                randomSeed(8);

                var mask = get(0,0,40,40);
                
                background(91, 110, 84);
                var img = get(0,0,40,40);
                
                if(img){
                    img.mask(mask);
                }
                background(255,0);
                image(img,0,0);
                
                fill(0,15);
                beginShape();
                vertex(10,0);
                vertex(3,35);
                vertex(8,33);
                bezierVertex(15,10,10,10,18,0);
                vertex(15,0);
                endShape();
                
                beginShape();
                vertex(3,35);
                vertex(14,33);
                bezierVertex(23,10,21,10,21,0);
                vertex(15,0);
                vertex(10,0);
                endShape();
                
                fill(255,15);
                beginShape();
                vertex(33,0);
                vertex(28,0);
                bezierVertex(30,10,32,15,35,35);
                vertex(40,35);
                endShape();
            }
        },
        mayaShoulder:{
            w:30,
            h:30,
            d:function(){
                
                background(0);
                noStroke();
                fill(255);
                rect(0,0,30,30,30,30,0,0);
                var mask = get(0,0,30,30);
                
                background(69, 92, 66);
                
                noStroke();
                fill(0,25);
                rect(0,10,20,20,10,10,0,0);
                
                var img = get(0,0,30,30);
                if(img){
                    img.mask(mask);
                }
                
                background(255,0);
                image(img,0,0); 
            }
        },  
        mayaUpperArm:{
            w:20,
            h:40,
            d:function(){
                background(0);
                noStroke();
                fill(255);
                rect(5,0,10,40,0,0,10,10);
                ellipse(13,10,8,30);
                var mask = get(0,0,20,40);
                
                background(166, 116, 58);
                fill(140, 84, 20,50);
                randomSeed(1);
                for(var i = 0; i < 20; i ++){
                    ellipse(random(0,20),random(0,40),2,2);
                }
                
                var img = get(0,0,20,40);
                if(img){
                    img.mask(mask);
                }
                background(255,0);
                image(img,0,0);
            }
        },
        mayaLowerArm:{
            w:20,
            h:40,
            d:function(){
                background(0);
                noStroke();
                fill(255);
                rect(5,0,10,30,10,10,0,0);
                rect(3,22,3,16,3);
                rect(7,25,3,15,2);
                rect(11,25,3,15,2);
                pushMatrix();
                rotate(-10);
                rect(10,25,3,13,2);
                popMatrix();
                var mask = get(0,0,20,40);
                
                background(166, 116, 58);
                fill(140, 84, 20,50);
                randomSeed(1);
                for(var i = 0; i < 20; i ++){
                    ellipse(random(0,20),random(0,40),2,2);
                }
                
                var img = get(0,0,20,40);
                if(img){
                    img.mask(mask);
                }
                background(255,0);
                image(img,0,0);
            }
        },
        nicholasHead:{
            w:40,
            h:40,
            d:function(){
                background(0);
                fill(255);
                noStroke();
                beginShape();
                vertex(33,10);
                vertex(23,15);
                vertex(20,20);
                vertex(18,28);
                vertex(11,31);
                vertex(7,16);
                vertex(12,5);
                vertex(21,2);
                vertex(33,5);
                endShape();
                var mask = get(0,0,40,40);
                
                var points = [];
                for(var i = 0; i < 1000; i ++){
                    var x = ~~random(0,40);
                    var y = ~~random(0,40);
                    if(get(x,y) === color(255)){
                        points.push(x,y);
                    }
                }
                background(255,0);
                for(var i = 0; i < points.length; i += 2){
                    pushMatrix();
                    translate(points[i],points[i+1]);
                    rotate(random(0,360));
                    fill(random(0,20));
                    ellipse(0,0,2,4);
                    popMatrix();
                }
                
                var hair = get(0,0,40,40);
                
                background(255,0);
                strokeWeight(1);
                pushMatrix();
                noStroke();
                fill(115, 80, 39);
                translate(0,5);
                beginShape();
                vertex(20,0);
                bezierVertex(30,-2,37,8,35,15);
                vertex(38,21);
                vertex(35,23);
                bezierVertex(31,30,40,34,20,35);
                bezierVertex(11,38,5,0,20,0);
                endShape();
                popMatrix();
                fill(250, 232, 232);
                ellipse(29,20,5,4);
                fill(20, 4, 92);
                ellipse(30,20,3,3);
                stroke(0);
                line(34,31,29,31);
                noStroke();
                fill(48, 25, 2);
                image(hair,0,0);
                fill(115, 80, 39);
                ellipse(14,24,5,10);
                fill(87, 66, 41);
                ellipse(14,24,2,7);
            }
        },
        knightBreastPlate:{
            w:40,
            h:40,
            d:function(){
                background(0);
                noStroke();
                fill(255);
                beginShape();
                vertex(5,10);
                vertex(10,0);
                vertex(30,0);
                bezierVertex(46,13,30,40,30,40);
                vertex(10,40);
                endShape();
                var mask = get(0,0,40,40);
                
                background(150);
                strokeWeight(1);
                for(var i = 0; i < 40; i ++){
                    for(var j = 0; j < 40; j ++){
                        var n = map(noise((i-10)/15,j/15),0.4,0.6,10,50);
                        stroke(200,200,255,n);
                        point(i,j);
                    }
                }
                
                fill(0,30);
                beginShape();
                vertex(5,10);
                vertex(10,0);
                vertex(25,0);
                vertex(25,1);
                bezierVertex(41,13,25,40,25,40);
                vertex(10,40);
                endShape();  
                
                noFill();
                stroke(168, 154, 117);
                strokeWeight(1.5);
                beginShape();
                vertex(11,39);
                vertex(29,39);
                vertex(26,34);
                vertex(23,39);
                vertex(20,34);
                vertex(17,39);
                vertex(14,34);
                vertex(11,39);
                endShape();
                line(9,33,31,33);
                var img = get(0,0,40,40);
                 
                if(img){
                    img.mask(mask);
                }
                
                background(255,0);
                image(img,2.5,0,35,40);

            },
        },
        knightUpperArm:{
            w:20,
            h:40,
            d:function(){
                background(0);
                noStroke();
                fill(255);
                rect(5,0,10,40);
                ellipse(13,10,10,30);
                var mask = get(0,0,20,40);
                
                background(100);
                strokeWeight(1);
                for(var i = 0; i < 40; i ++){
                    for(var j = 0; j < 40; j ++){
                        var n = map(noise((i-100)/15,j/15),0.4,0.6,10,50);
                        stroke(200,200,255,n);
                        point(i,j);
                    }
                }
                var img = get(0,0,20,40);
                if(img){
                    img.mask(mask);
                }
                background(255,0);
                image(img,0,0);

            }
        },
        knightLowerArm:{
            w:20,
            h:40,
            d:function(){
                background(0);
                noStroke();
                fill(255);
                rect(5,0,10,30);
                rect(3,22,3,16,2);
                rect(7,25,3,15,2);
                rect(11,25,3,15,2);
                pushMatrix();
                rotate(-10);
                rect(10,25,3,13,2);
                popMatrix();
                var mask = get(0,0,20,40);
                
                background(100);
                strokeWeight(1);
                for(var i = 0; i < 40; i ++){
                    for(var j = 0; j < 40; j ++){
                        var n = map(noise((i-100)/15,j/15),0.4,0.6,10,50);
                        stroke(200,200,255,n);
                        point(i,j);
                    }
                }
                fill(0,50);
                rect(0,20,20,20);
                
                noFill();
                stroke(168, 154, 117);
                strokeWeight(2);
                arcs(10,15,20,10,0,180);
                var img = get(0,0,20,40);
                if(img){
                    img.mask(mask);
                }
                background(255,0);
                image(img,0,0);

            },
        },
        knightShoulder:{
            w:30,
            h:30,
            d:function(){
                background(0);
                noStroke();
                fill(255);
                rect(0,0,30,30,30,30,0,0);
                var mask = get(0,0,30,30);
                
                background(100);
                
                noStroke();
                for(var i = 0; i < 30; i ++){
                    fill(0,50 - i%10 * 5);
                    rect(0,i,30,1);
                }
                strokeWeight(2);
                stroke(168, 154, 117);
                line(0,10,15,12);
                line(0,20,15,22);
                line(30,10,15,12);
                line(30,20,15,22);
                
                noStroke();
                fill(0,50);
                rect(0,10,20,20,10,10,0,0);
                strokeWeight(1);
                for(var i = 0; i < 30; i ++){
                    for(var j = 0; j < 30; j ++){
                        var n = map(noise(i/15,j/15),0.4,0.6,5,50);
                        stroke(200,200,255,n);
                        point(i,j);
                    }
                }
                
                var img = get(0,0,30,30);
                if(img){
                    img.mask(mask);
                }
                
                background(255,0);
                image(img,0,0); 
            }
        },
        knightUpperLeg:{
            w:20,
            h:40,
            d:function(){
                background(0);
                noStroke();
                fill(255);
                rect(5,0,10,40);
                ellipse(7.5,10,15,30);
                triangle(15,0,20,0,15,40);
                
                popMatrix();
                var mask = get(0,0,20,40);
                
                background(100);
                strokeWeight(1);
                for(var i = 0; i < 40; i ++){
                    for(var j = 0; j < 40; j ++){
                        var n = map(noise((i-100)/15,j/15),0.4,0.6,10,50);
                        stroke(200,200,255,n);
                        point(i,j);
                    }
                }
                
                fill(0,40);
                quad(0,0,15,0,12,40,0,40);
                
                noFill();
                var img = get(0,0,20,40);
                if(img){
                    img.mask(mask);
                }
                background(255,0);
                image(img,0,0);  
            }
        },
        knightLowerLeg:{
            w:20,
            h:40,
            d:function(){
                background(0);
                noStroke();
                fill(255);
                quad(5,0,15,0,12,40,3,40);
                rect(10,30,6,10);
                arcs(15,35,10,10,-90,90);
                
                
                popMatrix();
                var mask = get(0,0,20,40);
                
                background(100);
                strokeWeight(1);
                for(var i = 0; i < 40; i ++){
                    for(var j = 0; j < 40; j ++){
                        var n = map(noise((i-100)/15,j/15),0.4,0.6,10,50);
                        stroke(200,200,255,n);
                        point(i,j);
                    }
                }
                
                fill(0,40);
                quad(0,0,15,0,12,22,0,27);
                stroke(168, 154, 117);
                strokeWeight(2);
                line(12,22,0,27);
                
                
                noFill();
                var img = get(0,0,20,40);
                if(img){
                    img.mask(mask);
                }
                background(255,0);
                image(img,0,0);

            }
        },
        torch:{
            w:20,
            h:50,
            d:function(){
	            background(0);
				fill(255);
				noStroke();
				for(var i = 5; i < 40; i ++){
					var s = map(i,5,40,10,5);
					ellipse(10,i,s,s);
				}
				var mask = get(0,0,20,50);
				background(99, 49, 9);
				fill(0,50);
				for(var i = 0; i < 200; i ++){
					ellipse(random(0,50),random(0,50),2,5);
				}
				var img = get(0,0,20,50);
				if(img){
					img.mask(mask);
				}
				
				background(255,0);
				image(img,0,0);
				noStroke();
				fill(0,0, 18);
				rect(4,10,12,4);
            }
        },
        villageForeground:{
            w:800,
            h:600,
            d:function(){
                background(0);
                noiseSeed(1);
                noStroke();
                fill(255);
                randomSeed(3);
                for(var  i = 0; i < 800; i += random(5,10)){
                    var yOff = i<620?sin((i+100)/2):map(i,620,800,0,4);
                    ellipse(i,yOff*10+400+random(-2,2),random(10,20),20);
                    triangle(i+random(-1,4),yOff*10+380+random(5,3),i-random(2,4),yOff*10+395,i+random(2,4),yOff*10+395);
                    triangle(i+4+random(-1,4),yOff*10+380+random(-5,3),i-random(2,4)+4,yOff*10+395,i+random(2,4)+4,yOff*10+395);
                    
                }
                var mask = get();
                background(49, 130, 106);
                fill(30, 112, 87,100);
                for(var i = 0; i < 400; i ++){
                    ellipse(random(0,800),random(350,450),20,20);
                }
                filter(BLUR,2);
                var img = get();
                if(img){
                    img.mask(mask);
                }
                
                background(255,0);
            
                fill(89, 74, 50);
                beginShape();
                for(var i = 0; i <= 800; i += 5){
                    var yOff = i<620?sin((i+100)/2):map(i,620,800,0,4);
                    vertex(i,yOff*10+400);
                }
                vertex(800,600);
                vertex(0,600);
                endShape();
                fill(82, 64, 41);
                beginShape();
                for(var i = 0; i <= 850; i += random(50,100)){
                    var yOff = i<620?sin((i+100)/2):map(i,620,800,0,4);
                    vertex(i,yOff*10+400+100+random(-20,20));
                }
                vertex(800,600);
                vertex(0,600);
                endShape();
                fill(0,20);
                beginShape();
                for(var i = 0; i <= 850; i += random(50,100)){
                    var yOff = i<720?sin(i/2):map(i,720,800,0,2);
                    vertex(i,yOff*10+550+random(-20,20));
                }
                vertex(600,600);
                vertex(0,600);
                endShape();
                image(img,0,0);
                
                randomSeed(1);
                fill(0,20);
                for(var i = 0; i < 60; i ++){
                    var y = random(500,600);
                    var s = map(y,500,600,20,40)+random(3,-3);
                    ellipse(random(0,800),y,s,s);
                }
                
                rock(200,520,1,1);
                rock(320,510,20,0.8);
                rock(450,530,20,0.6);
                rock(600,580,10,0.7);
                rock(725,520,20,0.9);
                rock(100,480,10,0.65);
                
                strokeWeight(3);
                noFill();
                stroke(70);
                beginShape();
                vertex(500,110);
                bezierVertex(551,138,571,141,620,145);
                endShape();
                strokeWeight(2);
                stroke(100);
                beginShape();
                vertex(500,108);
                bezierVertex(551,136,571,139,620,143);
                endShape();
            }
            
            
        },
        homeForeground:{
            w:800,
            h:600,
            d:function(){
                background(0);
                noiseSeed(1);
                noStroke();
                fill(255);
                randomSeed(3);
                for(var  i = 0; i < 800; i += random(5,10)){
                    var yOff = sin((i+138)/3)*30;
                    ellipse(i,yOff+400+random(-2,2),random(10,20),20);
                    triangle(i+random(-1,4),yOff+380+random(5,3),i-random(2,4),yOff+395,i+random(2,4),yOff+395);
                    triangle(i+4+random(-1,4),yOff+380+random(-5,3),i-random(2,4)+4,yOff+395,i+random(2,4)+4,yOff+395);
                    
                }
                var mask = get();
                background(49, 130, 106);
                fill(30, 112, 87,100);
                for(var i = 0; i < 400; i ++){
                    ellipse(random(0,800),random(350,450),20,20);
                }
                filter(BLUR,2);
                var img = get();
                if(img){
                    img.mask(mask);
                }
                
                background(255,0);
            
                fill(89, 74, 50);
                beginShape();
                for(var i = 0; i <= 800; i += 5){
                    var yOff = sin((i+138)/3)*30;
                    vertex(i,yOff+400);
                }
                vertex(800,600);
                vertex(0,600);
                endShape();
                fill(82, 64, 41);
                beginShape();
                for(var i = 0; i <= 850; i += random(50,100)){
                    var yOff = sin((i+138)/3)*30;
                    vertex(i,yOff+400+100+random(-20,20));
                }
                vertex(800,600);
                vertex(0,600);
                endShape();
                fill(0,20);
                beginShape();
                for(var i = 0; i <= 850; i += random(50,100)){
                    var yOff = sin((i+138)/3)*30;
                    vertex(i,yOff+550+random(-20,20));
                }
                vertex(600,600);
                vertex(0,600);
                endShape();
                image(img,0,0);
                
                randomSeed(10);
                fill(0,20);
                for(var i = 0; i < 60; i ++){
                    var y = random(500,600);
                    var s = map(y,500,600,20,40)+random(3,-3);
                    ellipse(random(0,800),y,s,s);
                }
                
                rock(300,480,1,1);
                rock(120,545,20,0.8);
                rock(350,554,20,0.6);
                rock(700,540,10,0.7);
                rock(440,512,20,0.9);
                rock(600,480,10,0.65);
            }
        },
        homeBackground:{
            w:400,
            h:600,
            d:function(){
                
                var t1 = tree(500,150,0,1,1);
                var t2 = tree(600,150,0,1,1,100);
                background(255,0);
                image(t1,250,179,125,250/150*125);
                image(t2,100,150);
            
            }
        },
        wallForeground:{
            w:800,
            h:600,
            d:function(){
                background(0);
                noiseSeed(1);
                noStroke();
                fill(255);
                randomSeed(3);
                for(var  i = 0; i < 800; i += random(5,10)){
                    var yOff = cos((i+38)/3)*30;
                    ellipse(i,yOff+400+random(-2,2),random(10,20),20);
                    triangle(i+random(-1,4),yOff+380+random(5,3),i-random(2,4),yOff+395,i+random(2,4),yOff+395);
                    triangle(i+4+random(-1,4),yOff+380+random(-5,3),i-random(2,4)+4,yOff+395,i+random(2,4)+4,yOff+395);
                    
                }
                var mask = get();
                background(49, 130, 106);
                fill(30, 112, 87,100);
                for(var i = 0; i < 400; i ++){
                    ellipse(random(0,800),random(350,450),20,20);
                }
                filter(BLUR,2);
                var img = get();
                if(img){
                    img.mask(mask);
                }
                
                background(255,0);
            
                fill(89, 74, 50);
                beginShape();
                for(var i = 0; i <= 800; i += 5){
                    var yOff = cos((i+38)/3)*30;
                    vertex(i,yOff+400);
                }
                vertex(800,600);
                vertex(0,600);
                endShape();
                fill(82, 64, 41);
                beginShape();
                for(var i = 0; i <= 850; i += random(50,100)){
                    var yOff = cos((i+38)/3)*30;
                    vertex(i,yOff+400+100+random(-20,20));
                }
                vertex(800,600);
                vertex(0,600);
                endShape();
                fill(0,20);
                beginShape();
                for(var i = 0; i <= 850; i += random(50,100)){
                    var yOff = cos((i+38)/3)*30;
                    vertex(i,yOff+550+random(-20,20));
                }
                vertex(600,600);
                vertex(0,600);
                endShape();
                image(img,0,0);
                
                randomSeed(120);
                fill(0,20);
                for(var i = 0; i < 60; i ++){
                    var y = random(500,600);
                    var s = map(y,500,600,20,40)+random(3,-3);
                    ellipse(random(0,800),y,s,s);
                }
                
                rock(88,554,1,1);
                rock(200,480,1,1);
                rock(720,485,20,0.8);
                rock(250,524,20,0.6);
                rock(600,530,10,0.7);
                rock(340,472,20,0.9);
                rock(500,500,10,0.65);
            }
        },
        wallBackground:{
            w:600,
            h:600,
            d:function(){
                var t1 = tree(0,0,0,1,1,123);
                var t2 = tree(0,0,0,0.9,0.9,193);
                background(255,0);
                image(t1,190,170);
                image(t2,300,180);
            }
        },  
        bush1:{
            w:120,
            h:100,
            d:function(){
                noStroke();
                background(0);
                fill(255);
                ellipse(20,10,10,7);
                ellipse(15,13,10,7);
                ellipse(25,13,10,7);
                ellipse(17,17,8,8);
                ellipse(23,17,8,8);
                fill(0);
                ellipse(20,14,4,4);
                var mask = get(0,0,40,25);
                
                background(232, 144, 232);
                for(var i = 0; i < 100; i ++){
                    fill(196, 33, 196,30);
                    ellipse(random(0,40),random(0,20),4,4);
                }
                //filter(BLUR,1);
                var flower1 = get(0,0,40,25);
                if(flower1){
                    flower1.mask(mask);
                }
                background(242, 3, 142);
                for(var i = 0; i < 50; i ++){
                    fill(255, 0, 179,50);
                    ellipse(random(0,40),random(0,20),10,10);
                    fill(255,30);
                    ellipse(random(0,40),random(0,20),10,10);
                }
                var flower2 = get(0,0,40,25);
                if(flower2){
                    flower2.mask(mask);
                }
                
                background(0);
                noStroke();
                fill(color(255));
                ellipse(60,50,100,80);
                
                var points = [];
                randomSeed(15);
                for(var i = 0; i < 2000; i ++){
                    var x = random(0,120);
                    var y = random(0,100);
                    if(get(x,y) === color(255)){
                        points.push([x,y]);
                    }
                }
                background(255,0);
                
                var clrs = [
                    color(42, 135, 70),
                    color(15, 120, 67),
                    color(4, 97, 60),
                    color(5, 87, 54),
                    color(4, 82, 51),
                    color(5, 82, 51),
                    color(3, 79, 49),
                    
                ];
                randomSeed(0);
                for(var i = 0; i < points.length; i ++){
                    var clr = ~~random(0,3);
                    var x = points[i][0]+2;
                    var y = points[i][1]-2;
                    var r = random(0,360);
                    
                    if(y > 20){
                        clr += ~~random(0,1.5);
                    }
                    if(y > 50 || x > 70){
                        clr += ~~random(0,2);
                    }
                    if(y > 70 || x > 90){
                        clr += ~~random(0,2.5);
                    }
                    clr = round(clr);
                    fill(clrs[clr]);
                    
                    leaf(x,y,random(0.2,0.25),r);
                }
                
                function flower(x,y,r){
                    pushMatrix();
                    translate(x,y);
                    rotate(r);
                    scale(random(0.8,0.6));
                    imageMode(CENTER);
                    var img = flower1;
                    if(random() < 0.5){
                        img = flower2;
                    }
                    image(img,0,0);
                    imageMode(CORNER);
                    popMatrix();
                }
                for(var i = 10; i < 15; i ++){
                    flower(points[i][0],points[i][1],random(0,360));
                }




            }
        },
        bush2:{
            w:100,
            h:150,
            d:function(){
                noStroke();
                background(0);
                fill(255);
                ellipse(20,10,10,7);
                ellipse(15,13,10,7);
                ellipse(25,13,10,7);
                ellipse(17,17,8,8);
                ellipse(23,17,8,8);
                fill(0);
                ellipse(20,14,4,4);
                var mask = get(0,0,40,25);
                
                background(232, 144, 232);
                for(var i = 0; i < 100; i ++){
                    fill(196, 33, 196,30);
                    ellipse(random(0,40),random(0,20),4,4);
                }
                //filter(BLUR,1);
                var flower1 = get(0,0,40,25);
                if(flower1){
                    flower1.mask(mask);
                }
                background(242, 3, 142);
                for(var i = 0; i < 50; i ++){
                    fill(255, 0, 179,50);
                    ellipse(random(0,40),random(0,20),10,10);
                    fill(255,30);
                    ellipse(random(0,40),random(0,20),10,10);
                }
                var flower2 = get(0,0,40,25);
                if(flower2){
                    flower2.mask(mask);
                }
                
                background(0);
                fill(color(255));
                noStroke();
                beginShape();
                vertex(50,10);
                bezierVertex(91,10,107,127,70,130);
                vertex(30,130);
                bezierVertex(-7,127,9,10,50,10);
                endShape();
                
                var points = [];
                randomSeed(35);
                for(var i = 0; i < 2000; i ++){
                    var x = random(0,100);
                    var y = random(0,130);
                    if(get(x,y) === color(255)){
                        points.push([x,y]);
                    }
                }
                background(255,0);
                
                var clrs = [
                    color(42, 135, 70),
                    color(15, 120, 67),
                    color(4, 97, 60),
                    color(5, 87, 54),
                    color(4, 82, 51),
                    color(5, 82, 51),
                    color(3, 79, 49),
                    
                ];
                randomSeed(0);
                for(var i = 0; i < points.length; i ++){
                    var clr = ~~random(0,3);
                    var x = points[i][0]+2;
                    var y = points[i][1]-2;
                    var r = random(0,360);
                    
                    if(y > 20){
                        clr += ~~random(0,1.5);
                    }
                    if(y > 50 || x > 70){
                        clr += ~~random(0,2);
                    }
                    if(y > 70 || x > 90){
                        clr += ~~random(0,2.5);
                    }
                    clr = round(clr);
                    fill(clrs[clr]);
                    
                    leaf(x,y,random(0.2,0.25),r);
                }
                
                function flower(x,y,r){
                    pushMatrix();
                    translate(x,y);
                    rotate(r);
                    scale(random(0.8,0.6));
                    imageMode(CENTER);
                    var img = flower1;
                    if(random() < 0.5){
                        img = flower2;
                    }
                    image(img,0,0);
                    imageMode(CORNER);
                    popMatrix();
                }
                for(var i = 0; i < 7; i ++){
                    flower(points[i][0],points[i][1],random(0,360));
                }
            }
        },
        wall:{
            w:300,
            h:600,
            d:function(){
                
                noStroke();
                for(var i = 0; i < 600; i += 2){
                    for(var j = 0; j < 600; j += 2){
                        fill(random(180,220));
                        rect(i,j,2,2);
                    }
                }
                for(var i = 0; i < 640; i += 40){
                    for(var j = 0; j < 640; j += 40){
                        stone(i,j,random(80,120));
                        stone(i-20,j+20,random(80,120));
                    }
                }
                var img = get(0,0,600,600);
                
                
                background(255,0);
                image(img,0,0,300,300);
                image(img,0,300,300,300);
                noStroke();
                for(var i = 0; i < 100; i ++){
                    var ci = cos(i/10*18) * 50;
                    if(ci > 0){
                        fill(255,abs(ci));
                    }
                    else{
                        fill(0,abs(ci));
                    }
                    rect(i,0,1,400);
                }
                fill(0,100);
                quad(0,50,100,50,90,60,10,60);
                for(var i = 0; i < 50; i ++){
                    fill(0,50 - i);
                    rect(0,60+i,100,1);
                }
                var tower = get(0,0,100,400);
                
                background(0);
                fill(255);
                rect(0,0,100,50);
                quad(0,50,100,50,90,60,10,60);
                rect(10,60,80,340);
                fill(0);
                rect(20,0,20,10);
                rect(60,0,20,10);
                var mask = get(0,0,100,400);
                
                if(tower){
                    tower.mask(mask);
                }
                
                
                background(0);
                fill(255);
                noStroke();
                beginShape();
                vertex(0,225);
                vertex(100,225);
                bezierVertex(91,155,50,125,50,125);
                bezierVertex(50,125,9,155,0,225);
                endShape();
                var mask = get(0,125,100,99);
                
                image(img,0,0,300,300);
                filter(BLUR,1);
                noStroke();
                fill(84, 52, 14,220);
                rect(0,0,100,100);
                
                noFill();
                strokeWeight(1);
                for(var i = 0; i < 20; i ++){
                    stroke(255,200,200,60-i*3);
                    pushMatrix();
                    translate(i,-125);
                    beginShape();
                    vertex(0,225);
                    vertex(100,225);
                    bezierVertex(91,155,50,125,50,125);
                    bezierVertex(50,125,9,155,0,225);
                    endShape();
                    popMatrix();
                }
                for(var i = 0; i < 50; i ++){
                    stroke(0,0,0,60-i);
                    pushMatrix();
                    translate(-i,-125);
                    beginShape();
                    vertex(0,225);
                    vertex(100,225);
                    bezierVertex(91,155,50,125,50,125);
                    bezierVertex(50,125,9,155,0,225);
                    endShape();
                    popMatrix();
                }
                var roof = get(0,0,100,99);
                
                if(roof){
                    roof.mask(mask);
                }
                
                
                background(255,0);
                noStroke();
                image(img,50,325,300,300);
                fill(255,50);
                rect(50,325,300,300);
                
                image(tower,0,240);
                fill(59, 36, 5);
                rect(7,225,5,15);
                rect(47,225,5,15);
                rect(87,225,5,15);
                
                image(roof,0,126);

            }
        },
        bed:{
            w:200,
            h:100,
            d:function(){
                background(125, 73, 30);
                var off = random(0,100);
                strokeWeight(1);
                stroke(102, 50, 24);
                for(var i = 0; i < 200; i ++){
                    for(var j = 0; j < 70; j ++){
                        var n = noise((j+off)/70,(i+off)/60).toFixed(2);
                        if((n * 100)%2===0){
                            point(i,j);
                        }
                    }
                }
                noStroke();
                fill(0,20);
                rect(0,0,200,50);
                fill(0,50);
                rect(15,30,170,10);
                var img = get(0,0,200,70);
                
                background(0);
                fill(255);
                rect(0,0,15,70);
                rect(0,30,200,10);
                rect(185,20,15,60);
                var mask = get(0,0,200,70);
                
                if(img){
                    img.mask(mask);
                }
                
                background(0);
                fill(255);
                noStroke();
                beginShape();
                vertex(185,40);
                vertex(185,50);
                vertex(15,50);
                vertex(15,40);
                for(var i = 15; i <= 185; i += 30){
                    curveVertex(i,random(40,35));
                }
                vertex(185,40);
                endShape(CLOSE);
                var mask = get(0,0,200,50);
                
                background(97, 139, 186);
                fill(0,7);
                for(var i = 0; i < 300; i ++){
                    ellipse(random(0,200),random(0,50),15,15);
                }
                filter(BLUR,2);
                
                var sheets = get(0,0,200,50);
                
                if(sheets){
                    sheets.mask(mask);
                }
                
                
                background(255,0);
                pushMatrix();
                translate(0,-20);
                noStroke();
                fill(245, 239, 210);
                rect(15,25,30,15,10);
                fill(0,20);
                rect(15,30,25,10,20);
                image(sheets,0,0);
                image(img,0,20);
                popMatrix();
            }
        },  
        drawer:{
            w:50,
            h:50,
            d:function(){
                background(0);
                fill(255);
                noStroke();
                rect(0,0,50,10,5);
                rect(5,10,40,40);
                var mask = get(0,0,50,50);
                
                
                background(125, 73, 30);
                var off = random(0,100);
                strokeWeight(1);
                stroke(102, 50, 24);
                for(var i = 0; i < 50; i ++){
                    for(var j = 0; j < 50; j ++){
                        var n = noise((j+off)/70,(i+off)/60).toFixed(2);
                        if((n * 100)%2===0){
                            point(i,j);
                        }
                    }
                }
                noStroke();
                fill(0,50);
                rect(5,10,40,40);
                fill(38, 23, 7);
                for(var i = 0; i < 40; i += 40/3){
                    fill(38, 23, 7);
                    rect(4,i+10,40,1);
                    fill(0);
                    ellipse(25,i+10+40/6,4,4);
                }
                
                var img = get(0,0,50,50);
                
                if(img){
                    img.mask(mask);
                }
                
                background(255,0);
                image(img,0,0);
            }
        },
        teddy:{
            w:40,
            h:60,
            d:function(){
                noStroke();
                fill(125, 66, 24);
                ellipse(20,40,26,30);
                
                pushMatrix();
                translate(6,29);
                rotate(30);
                rect(0,0,7,15,3);
                popMatrix();
                
                pushMatrix();
                translate(28,32);
                rotate(-30);
                rect(0,0,7,15,3);
                popMatrix();
                
                fill(153, 94, 46);
                
                pushMatrix();
                translate(10,44);
                rotate(45);
                rect(0,0,10,10,3,3,10,10);
                popMatrix();
                
                pushMatrix();
                translate(22,51);
                rotate(-45);
                rect(0,0,10,10,3,3,10,10);
                popMatrix();
                
                pushMatrix();
                fill(125, 66, 24);
                translate(10,15);
                rotate(60);
                ellipse(0,0,12,10);
                fill(207, 175, 143);
                ellipse(0,0,5,5);
                popMatrix();
                
                pushMatrix();
                fill(125, 66, 24);
                translate(30,15);
                rotate(-60);
                ellipse(0,0,12,10);
                fill(207, 175, 143);
                ellipse(0,0,5,5);
                popMatrix();
                
                
                
                fill(153, 94, 46);
                ellipse(20,25,30,27);
                fill(207, 175, 143);
                ellipse(20,30,15,10);
                fill(89, 37, 11);
                ellipse(20,28,5,5);
                rect(19,28,2,5);
                noFill();
                stroke(89, 37, 11);
                strokeWeight(1.5);
                arcs(20,32,5,3,0,180);
                noStroke();
                fill(0);
                ellipse(15,23,4,4);
                ellipse(25,23,4,4);
            }
        },
        water:{
            w:20,
            h:40,
            d:function(){
                noStroke();
                
                fill(185, 227, 237,100);
                rect(0,0,15,15);
                arcs(7.5,15,15,15,0,180);
                fill(98, 135, 196);
                rect(2,5,10.5,10);
                arcs(7.5,15,11,10,0,180);
            }
        },
        insideHouseRoof:{
            w:800,
            h:200,
            d:function(){
                noStroke();
                var colors = [
                    color(148, 120, 65),
                    color(143, 112, 59),
                    color(133, 106, 68),
                ];
                strokeWeight(3); 
                var d = 28;
                randomSeed(3);
                for(var i = 0; i < 3000; i ++){
                   
                    var clr = colors[~~random(0,colors.length)];
                    stroke(red(clr)-d,green(clr)-d,blue(clr)-d);
                    var r = random(70,110);
                    var x = random(100,700);
                    var y = random(-20,100);
                    line(x,y,x+cos(r)*40,y+sin(r)*40);
                    
                }
            }
        },
        insideHouse1:{
            w:800,
            h:600,
            d:function(){
                strokeCap(SQUARE);
                background(0);
                noiseSeed(1);
                noStroke();
                fill(255);
                randomSeed(3);
                for(var  i = 0; i < 800; i += random(5,10)){
                    var yOff = 50;
                    if(i < 100 || i > 695){
                    ellipse(i,yOff+400+random(-2,2),random(10,20),20);
                    triangle(i+random(-1,4),yOff+380+random(5,3),i-random(2,4),yOff+395,i+random(2,4),yOff+395);
                    triangle(i+4+random(-1,4),yOff+380+random(-5,3),i-random(2,4)+4,yOff+395,i+random(2,4)+4,yOff+395);
                    }
                    
                }
                var mask = get();
                background(49, 130, 106);
                fill(30, 112, 87,100);
                for(var i = 0; i < 400; i ++){
                    ellipse(random(0,800),random(350,450),20,20);
                }
                filter(BLUR,2);
                var img = get();
                if(img){
                    img.mask(mask);
                }
                background(0);
                fill(255);
                rect(100,100,20,350);
                rect(680,100,20,350);
                stroke(255);
                strokeWeight(20);
                rect(500,300,100,150);
                arcs(550,300,100,100,-180,0);
                noStroke();
                rect(100,440,600,20);
                var mask = get(100,100,600,350);
                
                background(59, 33, 18);
                stroke(36, 17, 5);
                strokeWeight(1);
                var off = 1010;
                for(var i = 0; i <= 600; i ++){
                    for(var j = 0; j < 350; j ++){
                        var n = noise((i+off)/50,(j+off)/70).toFixed(2);
                        if((n * 100)%2===0){
                            stroke(36+random(-5,20), 17+random(0,5), 5);
                            point(i,j);
                        }
                    }
                }
                fill(0,80);
                rect(20,0,560,350);
                var img2 = get(0,0,600,350);
                if(img2){
                    img2.mask(mask);
                }
                
                background(0);
                noStroke();
                fill(255);
                rect(500,300,100,150);
                arcs(550,300,100,100,-180,0);
                var mask = get(500,0,100,600);
                
                background(125, 73, 30);
                strokeWeight(1);
                stroke(102, 50, 24);
                for(var i = 500; i < 600; i += 7.5){
                    line(i,0,i,600);
                }
                noFill();
                stroke(0,50);
                strokeWeight(10);
                arcs(550,300,100,100,-180,0);
                rect(500,300,0,150);
                rect(600,300,0,150);
                var door = get(500,0,100,600);
                
                if(door){
                    door.mask(mask);
                }
                
                noStroke();
                fill(163, 155, 114);
                rect(100,100,600,350);
                strokeWeight(1);
                for(var i = 0; i < 3000; i ++){
                    stroke(0,random(20,50));
                    point(random(100,700),random(100,450));
                }
                var wall = get();
                
                background(0);
                noStroke();
                fill(255);
                rect(100,100,600,350);
                fill(0);
                rect(155,205,80,120,30,30,5,5);
                rect(305,205,80,120,30,30,5,5);
                var mask = get();
                
                if(wall){
                    wall.mask(mask);
                }
                
                background(255,0);
                
                fill(89, 74, 50);
                noStroke();
                beginShape();
                for(var i = 0; i <= 800; i += 5){
                    var yOff = 50;
                    vertex(i,yOff+400);
                }
                vertex(800,600);
                vertex(0,600);
                endShape();
                fill(82, 64, 41);
                beginShape();
                for(var i = 0; i <= 850; i += random(50,100)){
                    var yOff = random(-10,20);
                    vertex(i,yOff+400+100+random(-20,20));
                }
                vertex(800,600);
                vertex(0,600);
                endShape();
                fill(0,20);
                beginShape();
                for(var i = 0; i <= 850; i += random(50,100)){
                    var yOff = random(-20,20);
                    vertex(i,yOff+550+random(-20,20));
                }
                vertex(800,600);
                vertex(0,600);
                endShape();
                image(img,0,0);
                
                randomSeed(120);
                fill(0,20);
                for(var i = 0; i < 60; i ++){
                    var y = random(500,600);
                    var s = map(y,500,600,20,40)+random(3,-3);
                    ellipse(random(0,800),y,s,s);
                }
                
                rock(88,554,1,1);
                rock(250,524,20,0.5);
                rock(600,530,10,0.6);
                rock(340,565,20,0.5);
                rock(500,500,10,0.65);
                
                image(wall,0,0);
                
                fill(0,50);
                rect(120,100,5,345);
                rect(675,100,5,345);
                rect(125,435,550,5);
                noFill();
                stroke(0,50);
                strokeWeight(30);
                rect(500,315,100,105);
                arcs(550,300,100,100,-180,0);
                
                var floorBoard = function(x,y){
                    pushMatrix();
                    translate(x,y);
                    noStroke();
                    fill(125, 73, 30);
                    randomSeed(x*y);
                    quad(0,random(0,2),0,random(12,15),30,random(12,15),30,random(0,2));
                    var off = random(0,100);
                    strokeWeight(1);
                    stroke(102, 50, 24);
                    for(var i = 0; i < 30; i ++){
                        for(var j = 0; j < 14; j ++){
                            var n = noise((j+off)/70,(i+off)/60).toFixed(2);
                            if((n * 100)%2===0){
                                point(i,j);
                            }
                        }
                    }
                    noFill();
                    randomSeed(x*y);
                    strokeWeight(3);
                    stroke(79, 36, 15);
                    quad(0,random(0,2),0,random(12,15),30,random(12,15),30,random(0,2));
                    popMatrix();
                
                };
                image(img2,100,100);
                image(door,500,0);
                noStroke();
                fill(217, 180, 32);
                ellipse(520,360,13,13);
                fill(255,100);
                ellipse(521,357,8,6);
                for(var i = 100; i < 700; i += 30){
                    floorBoard(i,450);
                }
            }
        },
        insideHouse2:{
            w:800,
            h:600,
            d:function(){

                strokeCap(SQUARE);
                background(0);
                noiseSeed(1);
                noStroke();
                fill(255);
                randomSeed(3);
                for(var  i = 0; i < 800; i += random(5,10)){
                    var yOff = 50;
                    if(i < 100 || i > 695){
                    ellipse(i,yOff+400+random(-2,2),random(10,20),20);
                    triangle(i+random(-1,4),yOff+380+random(5,3),i-random(2,4),yOff+395,i+random(2,4),yOff+395);
                    triangle(i+4+random(-1,4),yOff+380+random(-5,3),i-random(2,4)+4,yOff+395,i+random(2,4)+4,yOff+395);
                    }
                    
                }
                var mask = get();
                background(49, 130, 106);
                fill(30, 112, 87,100);
                for(var i = 0; i < 400; i ++){
                    ellipse(random(0,800),random(350,450),20,20);
                }
                filter(BLUR,2);
                var img = get();
                if(img){
                    img.mask(mask);
                }
                background(0);
                fill(255);
                rect(100,100,20,350);
                rect(680,100,20,350);
                stroke(255);
                strokeWeight(20);
                rect(350,300,100,150);
                arcs(400,300,100,100,-180,0);
                noStroke();
                rect(100,440,600,20);
                var mask = get(100,100,600,350);
                
                background(59, 33, 18);
                stroke(36, 17, 5);
                strokeWeight(1);
                var off = 1010;
                for(var i = 0; i <= 600; i ++){
                    for(var j = 0; j < 350; j ++){
                        var n = noise((i+off)/50,(j+off)/70).toFixed(2);
                        if((n * 100)%2===0){
                            stroke(36+random(-5,20), 17+random(0,5), 5);
                            point(i,j);
                        }
                    }
                }
                fill(0,80);
                rect(20,0,560,350);
                var img2 = get(0,0,600,350);
                if(img2){
                    img2.mask(mask);
                }
                
                background(0);
                noStroke();
                fill(255);
                rect(500,300,100,150);
                arcs(550,300,100,100,-180,0);
                var mask = get(500,0,100,600);
                
                background(125, 73, 30);
                strokeWeight(1);
                stroke(102, 50, 24);
                for(var i = 500; i < 600; i += 7.5){
                    line(i,0,i,600);
                }
                noFill();
                stroke(0,50);
                strokeWeight(10);
                arcs(550,300,100,100,-180,0);
                rect(500,300,0,150);
                rect(600,300,0,150);
                var door = get(500,0,100,600);
                
                if(door){
                    door.mask(mask);
                }
                
                background(255,0);
                noStroke();
                fill(163, 155, 114);
                rect(100,100,600,350);
                strokeWeight(1);
                for(var i = 0; i < 3000; i ++){
                    stroke(0,random(20,50));
                    point(random(100,700),random(100,450));
                }
                var wall = get();
                
                background(0);
                noStroke();
                fill(255);
                rect(100,100,600,350);
                fill(0);
                rect(530,205,80,120,30,30,5,5);
                var mask = get();
                
                if(wall){
                    wall.mask(mask);
                }
                
                
                background(255,0);
                
                fill(89, 74, 50);
                noStroke();
                beginShape();
                for(var i = 0; i <= 800; i += 5){
                    var yOff = 50;
                    vertex(i,yOff+400);
                }
                vertex(800,600);
                vertex(0,600);
                endShape();
                fill(82, 64, 41);
                beginShape();
                for(var i = 0; i <= 850; i += random(50,100)){
                    var yOff = random(-10,20);
                    vertex(i,yOff+400+100+random(-20,20));
                }
                vertex(800,600);
                vertex(0,600);
                endShape();
                fill(0,20);
                beginShape();
                for(var i = 0; i <= 850; i += random(50,100)){
                    var yOff = random(-20,20);
                    vertex(i,yOff+550+random(-20,20));
                }
                vertex(800,600);
                vertex(0,600);
                endShape();
                image(img,0,0);
                
                randomSeed(120);
                fill(0,20);
                for(var i = 0; i < 60; i ++){
                    var y = random(500,600);
                    var s = map(y,500,600,20,40)+random(3,-3);
                    ellipse(random(0,800),y,s,s);
                }
                
                rock(88,554,1,1);
                rock(250,524,20,0.5);
                rock(600,530,10,0.6);
                rock(340,565,20,0.5);
                rock(500,500,10,0.65);
                
                image(wall,0,0);
                
                fill(0,50);
                rect(120,100,5,345);
                rect(675,100,5,345);
                rect(125,435,550,5);
                noFill();
                stroke(0,50);
                strokeWeight(30);
                rect(350,315,100,105);
                arcs(400,300,100,100,-179,0);
                
                var floorBoard = function(x,y){
                    pushMatrix();
                    translate(x,y);
                    noStroke();
                    fill(125, 73, 30);
                    randomSeed(x*y);
                    quad(0,random(0,2),0,random(12,15),30,random(12,15),30,random(0,2));
                    var off = random(0,100);
                    strokeWeight(1);
                    stroke(102, 50, 24);
                    for(var i = 0; i < 30; i ++){
                        for(var j = 0; j < 14; j ++){
                            var n = noise((j+off)/70,(i+off)/60).toFixed(2);
                            if((n * 100)%2===0){
                                point(i,j);
                            }
                        }
                    }
                    noFill();
                    randomSeed(x*y);
                    strokeWeight(3);
                    stroke(79, 36, 15);
                    quad(0,random(0,2),0,random(12,15),30,random(12,15),30,random(0,2));
                    popMatrix();
                
                };
                image(img2,100,100);
                image(door,350,0);
                noStroke();
                fill(217, 180, 32);
                ellipse(370,360,13,13);
                fill(255,100);
                ellipse(371,357,8,6);
                
                noStroke();
                
                for(var i = 100; i < 700; i += 30){
                    floorBoard(i,450);
                }
            }
        },
        insideHouse3:{
            w:900,
            h:600,
            d:function(){
                strokeCap(SQUARE);
                background(0);
                noiseSeed(1);
                noStroke();
                fill(255);
                randomSeed(3);
                for(var  i = 0; i < 800; i += random(5,10)){
                    var yOff = 50;
                    if(i < 100 || i > 695){
                    ellipse(i,yOff+400+random(-2,2),random(10,20),20);
                    triangle(i+random(-1,4),yOff+380+random(5,3),i-random(2,4),yOff+395,i+random(2,4),yOff+395);
                    triangle(i+4+random(-1,4),yOff+380+random(-5,3),i-random(2,4)+4,yOff+395,i+random(2,4)+4,yOff+395);
                    }
                    
                }
                var mask = get();
                background(49, 130, 106);
                fill(30, 112, 87,100);
                for(var i = 0; i < 400; i ++){
                    ellipse(random(0,800),random(350,450),20,20);
                }
                filter(BLUR,2);
                var img = get();
                if(img){
                    img.mask(mask);
                }
                background(0);
                fill(255);
                rect(100,100,20,350);
                rect(680,100,20,350);
                stroke(255);
                strokeWeight(20);
                rect(500,300,100,150);
                arcs(550,300,100,100,-180,0);
                noStroke();
                rect(100,440,600,20);
                var mask = get(100,100,600,350);
                
                background(59, 33, 18);
                stroke(36, 17, 5);
                strokeWeight(1);
                var off = 1010;
                for(var i = 0; i <= 600; i ++){
                    for(var j = 0; j < 350; j ++){
                        var n = noise((i+off)/50,(j+off)/70).toFixed(2);
                        if((n * 100)%2===0){
                            stroke(36+random(-5,20), 17+random(0,5), 5);
                            point(i,j);
                        }
                    }
                }
                fill(0,80);
                rect(20,0,560,350);
                var img2 = get(0,0,600,350);
                if(img2){
                    img2.mask(mask);
                }
                
                background(0);
                noStroke();
                fill(255);
                rect(500,300,100,150);
                arcs(550,300,100,100,-180,0);
                var mask = get(500,0,100,600);
                
                background(125, 73, 30);
                strokeWeight(1);
                stroke(102, 50, 24);
                for(var i = 500; i < 600; i += 7.5){
                    line(i,0,i,600);
                }
                noFill();
                stroke(0,50);
                strokeWeight(10);
                arcs(550,300,100,100,-180,0);
                rect(500,300,0,150);
                rect(600,300,0,150);
                var door = get(500,0,100,600);
                
                if(door){
                    door.mask(mask);
                }
                
                noStroke();
                fill(163, 155, 114);
                rect(100,100,600,350);
                strokeWeight(1);
                for(var i = 0; i < 3000; i ++){
                    stroke(0,random(20,50));
                    point(random(100,700),random(100,450));
                }
                var wall = get();
                
                background(0);
                noStroke();
                fill(255);
                rect(100,100,600,350);
                var mask = get();
                
                if(wall){
                    wall.mask(mask);
                }
                
                background(255,0);
                
                fill(89, 74, 50);
                noStroke();
                beginShape();
                for(var i = 0; i <= 800; i += 5){
                    var yOff = 50;
                    vertex(i,yOff+400);
                }
                vertex(800,600);
                vertex(0,600);
                endShape();
                fill(82, 64, 41);
                beginShape();
                for(var i = 0; i <= 850; i += random(50,100)){
                    var yOff = random(-10,20);
                    vertex(i,yOff+400+100+random(-20,20));
                }
                vertex(800,600);
                vertex(0,600);
                endShape();
                fill(0,20);
                beginShape();
                for(var i = 0; i <= 850; i += random(50,100)){
                    var yOff = random(-20,20);
                    vertex(i,yOff+550+random(-20,20));
                }
                vertex(800,600);
                vertex(0,600);
                endShape();
                image(img,0,0);
                
                randomSeed(120);
                fill(0,20);
                for(var i = 0; i < 60; i ++){
                    var y = random(500,600);
                    var s = map(y,500,600,20,40)+random(3,-3);
                    ellipse(random(0,800),y,s,s);
                }
                
                rock(88,554,1,1);
                rock(250,524,20,0.5);
                rock(600,530,10,0.6);
                rock(340,565,20,0.5);
                rock(500,500,10,0.65);
                
                image(wall,0,0);
                
                fill(0,50);
                rect(120,100,5,345);
                rect(675,100,5,345);
                rect(125,435,550,5);
                noFill();
                stroke(0,50);
                strokeWeight(30);
                rect(500,315,100,105);
                arcs(550,300,100,100,-180,0);
                
                var floorBoard = function(x,y){
                    pushMatrix();
                    translate(x,y);
                    noStroke();
                    fill(125, 73, 30);
                    randomSeed(x*y);
                    quad(0,random(0,2),0,random(12,15),30,random(12,15),30,random(0,2));
                    var off = random(0,100);
                    strokeWeight(1);
                    stroke(102, 50, 24);
                    for(var i = 0; i < 30; i ++){
                        for(var j = 0; j < 14; j ++){
                            var n = noise((j+off)/70,(i+off)/60).toFixed(2);
                            if((n * 100)%2===0){
                                point(i,j);
                            }
                        }
                    }
                    noFill();
                    randomSeed(x*y);
                    strokeWeight(3);
                    stroke(79, 36, 15);
                    quad(0,random(0,2),0,random(12,15),30,random(12,15),30,random(0,2));
                    popMatrix();
                
                };
                image(img2,100,100);
                image(door,500,0);
                noStroke();
                fill(217, 180, 32);
                ellipse(520,360,13,13);
                fill(255,100);
                ellipse(521,357,8,6);
                for(var i = 100; i < 700; i += 30){
                    floorBoard(i,450);
                }
            }
        },
        shield:{
            w:125,
            h:200,
            d:function(){
                var shield = function(x,y){
                    pushMatrix();
                    translate(x,y);
                    beginShape();
                    vertex(0,10);
                    vertex(25,10);
                    vertex(50,0);
                    vertex(75,10);
                    vertex(100,10);
                    vertex(100,100);
                    vertex(90,130);
                    vertex(50,150);
                    vertex(10,130);
                    //bezierVertex(75,150,25,150,10,130);
                    vertex(0,100);
                    vertex(0,10);
                    endShape(CLOSE);
                    popMatrix();
                };
                
                
                background(0,0,0);
            
                noStroke();
                fill(255);
                shield();
                var mask = get(0,0,100,150);
                
                background(65, 95, 145);
                strokeWeight(1);
                stroke(102, 50, 24);
                
                var clr = color(10, 44, 79);
                
                strokeWeight(1);
                noStroke();
                fill(clr,50);
                triangle(25,10,50,0,75,10);
                for(var i = 10; i < 30; i ++){
                    fill(clr,50-(i-10)*2.5);
                    rect(0,i,100,1);
                }
                
                noFill();
                strokeWeight(1);
                for(var i = 1; i > 0.5; i -= 0.01){
                    pushMatrix();
                    translate(50,75);
                    scale(i);
                    translate(-50,-75);
                    stroke(clr,50 - map(i,1,0.5,0,80));
                    shield();
                    popMatrix();
                }
                
                noFill();
                stroke(0,50);
                strokeWeight(6);
                shield(0,0);
                strokeWeight(1);
                stroke(0);
                var img = get(0,0,100,150);
                if(img){
                    img.mask(mask);
                }
                background(255,0);
                noStroke();
                fill(0);
                rect(1,11,10,10);
                noFill();
                stroke(0,50);
                strokeWeight(30);
                shield(12,15);
                stroke(0,0,0);
                strokeWeight(22);
                shield(12,12);
                strokeWeight(20);
                stroke(65, 136, 217);
                strokeCap(PROJECT);
                shield(12,12);
                strokeWeight(10);
                stroke(0,20);
                shield(12,12);
                image(img,12,12);
                stroke(0,0,0);
                strokeWeight(1);
                shield(12,12);
            }
        }, 
        shieldBack:{
            w:125,
            h:175,
            d:function(){
                var shield = function(x,y){
                    pushMatrix();
                    translate(x,y);
                    beginShape();
                    vertex(0,10);
                    vertex(25,10);
                    vertex(50,0);
                    vertex(75,10);
                    vertex(100,10);
                    vertex(100,100);
                    vertex(90,130);
                    vertex(50,150);
                    vertex(10,130);
                    //bezierVertex(75,150,25,150,10,130);
                    vertex(0,100);
                    vertex(0,10);
                    endShape(CLOSE);
                    popMatrix();
                };
                background(0);
                strokeWeight(20);
                stroke(255);
                fill(255);
                strokeCap(PROJECT);
                shield(12,12);
                var mask = get(0,0,125,175);
                
                background(65, 136, 217);
                noStroke();
                fill(0,20);
                rect(125/2,0,75,175);
                fill(0,5);
                for(var i = 0; i < 100; i ++){
                    ellipse(random(0,125),random(0,175),20,20);
                }
                filter(BLUR,5);
                rect(125/2,0,75,175);
                var img = get(0,0,125,175);
                
                if(img){
                    img.mask(mask);
                }
                
                background(255,0);
                
                noStroke();
                fill(0);
                rect(1,11,10,10);
                noFill();
                stroke(0,50);
                strokeWeight(30);
                shield(12,15);
                stroke(0,0,0);
                strokeWeight(22);
                shield(12,12);
                image(img,0,0);
            }
        },
        convo:{
            w:580,
            h:175,
            d:function(){
                background(255,0);
                stroke(0,50);
                strokeWeight(1);
                for(var i = -10; i < 60; i ++){
                    for(var j = 0; j < 600; j ++){
                        stroke(0,constrain(map(i+sin(j*360/600)*10,0,50,0,200),0,200));
                        point(j,i+10);
                    }
                }
                noStroke();
                fill(0,200);
                rect(0,70,600,150);
                fill(0,5);
                for(var i = 0; i < 100; i ++){
                    ellipse(random(0,600),random(0,200),20,20);
                }
                filter(BLUR,2);
            }
        },  
        downArrow:{
            w:50,
            h:25,
            d:function(){
                pushMatrix();
                scale(0.5);
                background(0);
                noStroke();
                fill(255);
                triangle(10,10,90,10,50,40);
                var mask = get(0,0,50,25);
                
                background(65, 136, 217);
                noStroke();
                for(var i = 0; i < 50; i ++){
                    fill(0,1);
                    ellipse(50,25,i,i);
                }
                
                fill(0,50);
                beginShape();
                vertex(10,10);
                vertex(70,10);
                bezierVertex(58,20,25,35,10,10);
                endShape();
                fill(0,50);
                rect(10,10,80,4);
                quad(10,10,50,40,56,38,18,10);
                var img = get(0,0,50,25);
                if(img){
                    img.mask(mask);
                }
                
                background(255,0);
                
                
                stroke(240);
                strokeWeight(8);
                
                line(10,10,90,10);
                line(90,10,50,40);
                line(10,10,50,40);
                
                stroke(200);
                strokeWeight(4);
                
                line(10,10,90,10);
                line(90,10,50,40);
                line(10,10,50,40);
                
                image(img,0,0,100,50);
                popMatrix();
            }
        },
        talkerBackground:{
            w:200,
            h:300,
            d:function(){
                noStroke();
                fill(150,2);
                for(var i = 0; i < 100; i += 2){
                    arcs(100,300,i*2,i*6,180,360);
                }
            }
        },
        travellingWagon:{
            w:400,
            h:300,
            d:function(){
                background(0);
                noFill();
                stroke(255);
                strokeWeight(7.5);
                ellipse(100,250,75,75);
                strokeWeight(5);
                for(var i = 0; i < 360; i += 45){
                    line(100,250,100+cos(i)*35,250+sin(i)*35);
                }
                strokeWeight(10);
                ellipse(325,237.5,100,100);
                strokeWeight(6.66);
                for(var i = 0; i < 360; i += 45){
                    line(325,237,325+cos(i)*45,237+sin(i)*45);
                }
                var wheelMask = get(0,0,400,300);
                
                background(117, 89, 62);
                stroke(143, 112, 86);
                strokeWeight(1);
                
                var off = 1000;
                for(var i = 0; i < 400; i ++){
                    for(var j = 150; j < 300; j ++){
                        var n = noise((j+off)/70,(i+off)/70).toFixed(2);
                        if((n * 100)%2===0){
                            point(i,j);
                        }
                    }
                }
                fill(0,30);
                noStroke();
                ellipse(325,237.5,90,90);
                ellipse(100,250,65,65);
                var wheelImg = get(0,0,400,300);
                
                if(wheelImg){
                    wheelImg.mask(wheelMask);
                }
                
                background(99, 75, 59);
                stroke(84, 66, 51);
                strokeWeight(1);
                
                var off = 10;
                for(var i = 0; i < 400; i ++){
                    for(var j = 0; j < 75; j ++){
                        var n = noise((j+off)/45,(i+off)/400).toFixed(2);
                        if((n * 100)%2===0){
                            point(i,j);
                        }
                    }
                }
                stroke(69, 55, 41);
                strokeWeight(2);
                for(var i = 0; i <= 100; i += 25){
                    line(0,i,400,i);
                }
                var wood = get(0,0,400,75);
                
                background(125, 100, 85);
                stroke(138, 112, 91);
                strokeWeight(1);
                
                var off = 10;
                for(var i = 0; i < 400; i ++){
                    for(var j = 0; j < 75; j ++){
                        var n = noise((j+off)/45,(i+off)/400).toFixed(2);
                        if((n * 100)%2===0){
                            point(i,j);
                        }
                    }
                }
                stroke(105, 84, 64);
                strokeWeight(2);
                for(var i = 0; i <= 100; i += 25){
                    line(0,i,400,i);
                }
                
                var wood2 = get(0,0,400,75);
                
                background(0);
                noStroke();
                pushMatrix();
                translate(0,-7);
                textAlign(CENTER,CENTER);
                
                textFont(createFont('Georgia Bold'),15);
                fill(255);
                text('The Great Bernard\'s',218,152);
                textSize(18.5);
                
                text('Peddling Wagon',218,169);
                popMatrix();
                
                fill(0,20);
                for(var i = 0; i < 400; i ++){
                    //fill(94, 91, 42,20);
                    ellipse(random(150,400),random(100,200),10,10);
                }
                var textMask = get(0,0,400,200);
                
                background(199, 182, 105);
                for(var i = 0; i < 400; i ++){
                    fill(94, 91, 42,20);
                    ellipse(random(150,400),random(100,200),10,10);
                }
                //filter(BLUR,5);
                var textImg = get(0,0,400,200);
                
                if(textImg){
                    textImg.mask(textMask);
                }
                
                background(0);
                fill(255);
                noStroke();
                beginShape();
                vertex(365,121);
                vertex(70,121);
                bezierVertex(38,25,87,22,100,25);
                bezierVertex(178,30,257,30,335,25);
                bezierVertex(358,22,397,25,365,121);
                endShape();
                var roofMask = get(0,0,400,125);
                
                background(242, 230, 196);
                for(var i = 0; i < 50; i ++){
                    fill(112, 109, 95,i);
                    rect(0,81+i,500,1);
                }
                
                fill(112, 109, 95,10);
                for(var i = 0; i < 100; i ++){
                    ellipse(random(0,400),random(0,125),20,20);
                }
                filter(BLUR,5);
                
                strokeWeight(1);
                stroke(186, 179, 147);
                noFill();
                for(var i = 50; i < 350; i += 100){  
                    ellipse(218,75,i,200);
                }
                
                
                var roofImg = get(0,0,400,125);
                
                if(roofImg){
                    roofImg.mask(roofMask);
                }
                
                noStroke();
                background(0);
                fill(255);
                beginShape();
                vertex(80,200);
                vertex(20,250+75/2);
                vertex(35,250+75/2);
                bezierVertex(37,287,33,280,52,263);
                bezierVertex(47,261,54,250,67,238);
                bezierVertex(67,220,80,220,80,216);
                endShape();
                var stairsMask = get(0,0,400,300);
                
                background(128, 31, 52);
                fill(0,10);
                for(var i = 0; i < 100; i ++){
                    ellipse(random(0,100),random(200,300),10,10);
                }
                filter(BLUR,2);
                
                fill(0,50);
                quad(80,207,80,230,45,250+75/2,27,250+75/2);
                
                fill(74, 3, 30);
                
                for(var i = 0; i < 1; i += 0.2){
                    var x = lerp(27.5,80,i);
                    var y = lerp(250+75/2,207,i);
                    ellipse(x,y,5,5);
                }
                var stairsImg = get(0,0,400,300);
                
                if(stairsImg){
                    stairsImg.mask(stairsMask);
                }
                background(255,0);
                
                image(wood2,77,121,280,50);
                image(wood2,80,171,275,50);
                image(wood,80,210,275,50);
                
                
                noFill();
                strokeWeight(8);
                strokeCap(PROJECT);
                stroke(128, 16, 68);
                beginShape();
                vertex(75,125);
                vertex(85,206);
                vertex(350,206);
                vertex(360,125);
                endShape(CLOSE);
                
                image(stairsImg,0,0);
                
                
                fill(179, 25, 56);
                noFill();
                stroke(87, 51, 33);
                strokeWeight(7.5);
                ellipse(98,248,75,75);
                strokeWeight(5);
                for(var i = 0; i < 360; i += 45){
                    line(98,248,98+cos(i)*35,248+sin(i)*35);
                }
                strokeWeight(10);
                ellipse(323,235.5,100,100);
                strokeWeight(6.66);
                for(var i = 0; i < 360; i += 45){
                    line(323,235,323+cos(i)*45,235+sin(i)*45);
                }
                stroke(0,70);
                noFill();
                strokeWeight(3);
                beginShape();
                vertex(80,130);
                vertex(90,201);
                vertex(345,201);
                vertex(354,130);
                endShape(CLOSE);
                image(wheelImg,0,0);
                
                noStroke();
                fill(79, 50, 40);
                ellipse(325,237,15,15);
                ellipse(100,250,10,10);
                fill(59, 37, 15);
                ellipse(325,237,7.5,7.5);
                ellipse(100,250,5,5);
                
                image(roofImg,0,0);
                image(textImg,0,0);
            }
        },  
        candle:{
            w:10,
            h:50,
            d:function(){
                background(0);
                fill(255);
                noStroke();
                beginShape();
                vertex(2,40);
                vertex(8,40);
                bezierVertex(10,40,7,13,8,0);
                bezierVertex(7,2,5,0,1,0);
                bezierVertex(1,33,-1,43,2,40);
                endShape();
                var mask = get(0,0,10,40);
                
                background(219, 209, 192);
                var c1 = color(212, 204, 190);
                var c2 = color(242, 228, 206);
                
                for(var i = 0; i < 20; i ++){
                    fill(lerpColor(c1,c2,i/20));
                    ellipse(5,0,20-i,20-i);
                }
                
                fill(255,50);
                rect(7,0,1,40);
                
                for(var i = 0; i < 5; i ++){
                    fill(0,75-i*15);
                    rect(i,0,1,40);
                }
                var img = get(0,0,10,40);
                
                if(img){
                    img.mask(mask);
                }
                
                background(255,0);
                image(img,0,5);
                stroke(50);
                strokeWeight(1);
                bezier(4,5,5,1,4,1,4,0);
            }
        },
        candleLight:{
            w:50,
            h:50,
            d:function(){
                fill(222, 207, 145, 15);
                noStroke();
                for(var i = 0; i < 50; i += 5+(i/10)){
                    ellipse(26,26,i,i);
                }
                filter(BLUR,1);

            }
        },
        bell:{
            w:50,
            h:50,
            d:function(){
               background(0);
                fill(255);
                noStroke();
                beginShape();
                vertex(0,40);
                bezierVertex(3,37,5,32,5,30);
                bezierVertex(7,15,6,5,20,5);
                bezierVertex(34,5,33,15,35,30);
                bezierVertex(35,32,37,37,40,40);
                endShape();
                var mask =  get(0,0,40,40);
                
                background(217, 192, 104);
                pushMatrix();
                translate(2,2);
                
                    fill(245, 220, 144);
                beginShape();
                vertex(20,5);
                bezierVertex(34,5,33,15,35,30);
                bezierVertex(35,32,37,37,40,40);
                vertex(35,40);
                bezierVertex(32,37,30,32,30,30);
                bezierVertex(28,15,29,5,20,5);
                endShape();
                
                fill(204, 174, 74);
                beginShape();
                vertex(10,40);
                bezierVertex(13,37,15,32,15,30);
                bezierVertex(17,15,16,5,20,5);
                vertex(0,0);
                vertex(0,40);
                endShape();
                popMatrix();
                filter(BLUR,2);
                var img = get(0,0,40,40);
                
                if(img){
                    img.mask(mask);
                }
                
                background(255,0);
                fill(204, 174, 74);
                rect(0,40,40,2);
                ellipse(20,42,10,10);
                noFill();
                stroke(217, 180, 95);
                strokeWeight(2);
                ellipse(20,7,10,10);
                image(img,0,0);
 
            }
        },
        clock:{
            w:100,
            h:150,
            d:function(){
                background(92, 65, 39);
                stroke(79, 50, 20);
                strokeWeight(1);
                var off = 100;
                for(var i = 0; i < 100; i ++){
                    for(var j = 0; j < 115; j ++){
                        var n = noise((j+off)/40,(i+off)/300).toFixed(2);
                        if((n * 100)%2===0){
                            point(i,j);
                        }
                    }
                }
                var img = get(0,0,100,115);
                
                background(0);
                fill(255);
                noStroke();
                rect(10,50,80,65);
                triangle(10,50,90,50,50,5);
                var mask = get(0,0,100,115);
                
                if(img){
                    img.mask(mask);
                }
                strokeCap(ROUND);
                
                background(255,0);
                image(img,0,0);
                
                noStroke();
                fill(0,50);
                ellipse(50,75,50,50);
                
                stroke(0,50);
                strokeWeight(10);
                line(12,50,50,7);
                line(50,7,88,50);
                
                stroke(48, 29, 10);
                strokeWeight(2);
                fill(237, 211, 187);
                ellipse(50,70,50,50);
                
                strokeWeight(5);
                line(7,50,50,2);
                line(50,2,93,50);
                
                strokeWeight(3);
                line(50,70,50,50);
                line(50,70,60,80);
                
                noStroke();
                fill(255,50);
                pushMatrix();
                translate(63,57);
                rotate(45);
                ellipse(0,0,30,10);
                popMatrix();
                
                fill(0,20);
                pushMatrix();
                translate(36,83);
                rotate(45);
                ellipse(0,0,30,10);
                popMatrix();
                
                fill(48, 29, 10);
                rect(7,115,86,10,2);
                //quad(10,115,90,115,95,125,5,125);
            }
        },
        rat:{
            w:170,
            h:85,
            d:function(){
                
                pushMatrix();
                translate(10,10);
                
                fill(74, 66, 56);
                noStroke();
                beginShape();
                vertex(50,10);
                bezierVertex(100,-2,125,8,140,53);
                bezierVertex(120,64,33,70,30,30);
                endShape(CLOSE);
                
                fill(94, 84, 72);
                beginShape();
                vertex(50,10);
                bezierVertex(41,-6,10,10,0,30);
                bezierVertex(10,39,20,43,45,36);
                bezierVertex(53,30,58,20,50,10);
                endShape();
                
                ellipse(108,55,30,20);
                rect(81,58,29,7,10);
                
                ellipse(61,55,17,20);
                rect(46,58,19,7,10);
                
                
                fill(102, 92, 80);
                noStroke();
                beginShape();
                vertex(45,15);
                bezierVertex(56,0,47,-10,33,10);
                endShape(CLOSE);
                
                fill(74, 66, 56);
                beginShape();
                vertex(43,13);
                bezierVertex(51,5,47,-5,36,10);
                endShape();
                
                stroke(74, 66, 56);
                strokeWeight(3);
                strokeCap(ROUND);
                noFill();
                beginShape();
                vertex(140,53);
                bezierVertex(166,73,100,60,80,71);
                endShape();
                
                noStroke();
                fill(247, 230, 207);
                pushMatrix();
                translate(25,16);
                rotate(-10);
                ellipse(0,0,12,6);
                popMatrix();
                
                fill(59, 36, 5);
                pushMatrix();
                translate(23,16);
                rotate(-10);
                ellipse(0,0,5,6);
                popMatrix();
                
                fill(56, 42, 28);
                ellipse(2,30,5,5);
                
                popMatrix();
            }
        },
        rat2:{
            w:170,
            h:85,
            d:function(){
                pushMatrix();
                translate(85,0);
                scale(-1,1);
                translate(-85,0);
                image(imgs.rat,0,0);
                popMatrix();
            }
        },
        chest:{
            w:75,
            h:50,
            d:function(){
                background(0);
                fill(255);
                noStroke();
                rect(0,0,5,50);
                rect(0,0,75,5);
                rect(0,45,75,5);
                rect(70,0,5,50);
                ellipse(5,5,10,10);
                ellipse(70,5,10,10);
                ellipse(70,45,10,10);
                ellipse(5,45,10,10);
                var mask = get(0,0,75,50);
                
                background(168, 154, 117);
                fill(234, 237, 31,20);
                for(var i = 0; i < 100; i ++){
                    var f = random(0,100);
                    fill(234 + f, 237 + f, 31 + f*3,random(10,20));
                    ellipse(random(0,80),random(0,55),10,10);
                }
                
                filter(BLUR,3);
                var img = get(0,0,75,50);
                
                background(255,0);
                if(img){
                    img.mask(mask);
                }
                
                pushMatrix();
                translate(0,0);
                background(99, 75, 59);
                stroke(84, 66, 51);
                strokeWeight(1);
                
                var off = 10;
                for(var i = 0; i < 75; i ++){
                    for(var j = 0; j < 50; j ++){
                        var n = noise((j+off)/45,(i+off)/400).toFixed(2);
                        if((n * 100)%2===0){
                            point(i,j);
                        }
                    }
                }
                stroke(69, 55, 41);
                strokeWeight(1.5);
                for(var i = 0; i <= 50; i += 50/3){
                    line(0,i,75,i);
                }
                
                image(img,0,0);
                
                noStroke();
                fill(138, 138, 58);
                ellipse(5,5,5,5);
                ellipse(70,5,5,5);
                ellipse(70,45,5,5);
                ellipse(5,45,5,5);
                
                fill(120, 108, 120);
                rect(30,0,15,20,3);
                fill(69, 62, 69);
                ellipse(75/2,7,7,7);
                rect(75/2-3,7,5,9,3);
                popMatrix();
            }
        },
        chestLid:{
            w:75,
            h:25,
            d:function(){
                background(0);
                fill(255);
                noStroke();
                rect(10,0,5,25);
                rect(60,0,5,25);
                var mask = get(0,0,75,25);
                
                background(255,0);
                background(168, 154, 117);
                fill(234, 237, 31,20);
                for(var i = 0; i < 100; i ++){
                    var f = random(0,100);
                    fill(234 + f, 237 + f, 31 + f*3,random(10,20));
                    ellipse(random(0,80),random(0,55),10,10);
                }
                
                filter(BLUR,3);
                var img = get(0,0,75,25);
                
                if(img){
                    img.mask(mask);
                }
                
                background(255,0);
                background(99, 75, 59);
                stroke(84, 66, 51);
                strokeWeight(1);
                
                var off = 10;
                for(var i = 0; i < 75; i ++){
                    for(var j = 0; j < 25; j ++){
                        var n = noise((j+off)/45,(i+off)/400).toFixed(2);
                        if((n * 100)%2===0){
                            point(i,j);
                        }
                    }
                }
                stroke(69, 55, 41);
                strokeWeight(1.5);
                for(var i = 0; i <= 25; i += 25/2){
                    line(0,i,75,i);
                }
                image(img,0,0);
            }
        },
        chestLidOpen:{
            w:75,
            h:25,
            d:function(){
                noStroke();
                fill(69, 55, 41);
                rect(0,0,75,25);
                fill(51, 39, 27);
                rect(5,5,65,20);
                for(var i = 0; i < 10; i ++){
                    fill(0,i*10);
                    rect(5,15+i,65,1);
                }
            }
        },
        chestLidShadow:{
            w:75,
            h:25,
            d:function(){
                background(255,0);
                noStroke();
                for(var i = 0; i < 25; i ++){
                    fill(54, 23, 4, 75-i*3);
                    rect(0,i,75,1);
                }
            }
        },
        chestBackdrop:{
            w:125,
            h:125,
            d:function(){
                background(255,0);
                strokeWeight(1);
                noFill();
                for(var i = 0; i < 125; i ++){
                    stroke(214, 222, 232,62-i/2);
                    ellipse(62,62,i,i);
                }   
            }
        },
        chestBeam:{
            w:20,
            h:75,
            d:function(){
                background(0);
                noStroke();
                fill(75);
                triangle(0,0,20,0,10,75);
                for(var i = 0; i < 35; i ++){
                    fill(0,180-i*5.5);
                    rect(0,i,20,1);
                }
                var mask = get(0,0,20,75);
                
                background(138, 138, 58);
                stroke(115, 115, 7);
                strokeWeight(1);
                var off = 285;
                for(var i = 0; i < 20; i ++){
                    for(var j = 0; j < 75; j ++){
                        var n = noise((i+off)/10,(j+off)/10);
                        if(n < 0.48){
                            point(i,j);
                        }
                    }
                }
                filter(BLUR,1);
                var img = get(0,0,20,75);
                
                if(img){
                    img.mask(mask);
                }
                background(255,0);
                image(img,0,0);
                

            }
        },
        Apocalypta:{
            w:900,
            h:600,
            d:function(){
                background(0);
                beginShape();
                
                //a
                noStroke();
                fill(255);
                beginShape();
                vertex(126,150);
                vertex(106,150);
                vertex(111,145);
                vertex(106,100);
                vertex(58,100);
                vertex(0,200);
                vertex(0,150);
                vertex(10,160);
                vertex(95,0);
                vertex(126,0);
                vertex(116,10);
                endShape();
                
                fill(0);
                beginShape();
                vertex(65,88);
                vertex(105,88);
                vertex(98,22);
                endShape();
                
                
                
                fill(255);
                textAlign(CENTER,CENTER);
                textFont(createFont('Marcellus Bold'),125);
                pushMatrix();
                translate(450,77);
                scale(1.08,1.59);
                translate(-450,-75);
                text('POCALYPT',445,72);
                popMatrix();
                
                for(var i = 0; i < 360; i += 90){
                    pushMatrix();
                    translate(250,75);
                    rotate(i);
                    beginShape();
                    vertex(0,0);
                    vertex(15,0);
                    bezierVertex(5,3,3,5,0,15);
                    endShape();
                    popMatrix();
                }
                
                //a
                pushMatrix();
                translate(450,0);
                scale(-1,1);
                translate(-450,0);
                fill(255);
                beginShape();
                vertex(126,150);
                vertex(106,150);
                vertex(111,145);
                vertex(106,100);
                vertex(58,100);
                vertex(0,200);
                vertex(0,150);
                vertex(10,160);
                vertex(95,0);
                vertex(126,0);
                vertex(116,10);
                endShape();
                
                fill(0);
                beginShape();
                vertex(65,88);
                vertex(105,88);
                vertex(98,22);
                endShape();
                popMatrix();
                
                fill(255);
                quad(36,170,350,170,350,180,30,180);
                quad(864,170,550,170,550,180,870,180);
                
                textFont(createFont('Noto Sans Bold'),20);
                text('L I A M   K.   2 0 2 3',450,173);
                
                var mask = get(0,0,900,200);
                
                background(255);
                noStroke();
                var c2 = color(255);
                var c1 = color(220,200,255);
                for(var i = 0; i < 200; i ++){
                    fill(lerpColor(c1,c2,i/200));
                    rect(0,i,900,1);
                }
                var img = get(0,0,900,200);
                
                background(28, 143, 189);
                var c2 = color(125, 5, 43);
                var c1 = color(117, 18, 128);
                for(var i = 0; i < 200; i ++){
                    fill(lerpColor(c1,c2,i/200));
                    rect(0,i,900,1);
                }
                var img2 = get(0,0,900,200);
                
                if(img && img2){
                    img.mask(mask);
                    img2.mask(mask);
                }
                
                background(255,0);
                for(var i = 0; i < 10; i ++){
                    image(img2,0,i+200);
                }
                image(img,0,200);  
            },
        },
        Instructions:{
            w:900,
            h:600,
            d:function(){
                background(0);
                fill(255);
                textAlign(CENTER,CENTER);
                textFont(createFont('Marcellus Bold'),125);
                pushMatrix();
                translate(450,77);
                scale(1.08,1.59);
                translate(-450,-75);
                text('Instructions',445,72);
                popMatrix();
                
                noStroke();
                for(var i = 0; i < 360; i += 90){
                    pushMatrix();
                    translate(633,95);
                    rotate(i);
                    beginShape();
                    vertex(0,0);
                    vertex(10,0);
                    bezierVertex(5,2,2,5,0,10);
                    endShape();
                    popMatrix();
                }
                
                
                var mask = get(0,0,900,200);
                
                background(255);
                noStroke();
                var c2 = color(255);
                var c1 = color(220,200,255);
                for(var i = 0; i < 200; i ++){
                    fill(lerpColor(c1,c2,i/200));
                    rect(0,i,900,1);
                }
                var img = get(0,0,900,200);
                
                background(28, 143, 189);
                var c2 = color(125, 5, 43);
                var c1 = color(117, 18, 128);
                for(var i = 0; i < 200; i ++){
                    fill(lerpColor(c1,c2,i/200));
                    rect(0,i,900,1);
                }
                var img2 = get(0,0,900,200);
                
                if(img && img2){
                    img.mask(mask);
                    img2.mask(mask);
                }
                
                background(255,0);
                for(var i = 0; i < 10; i ++){
                    image(img2,0,i+200);
                }
                image(img,0,200);  
            }
        },
        Acknowledgements:{
            w:900,
            h:600,
            d:function(){
                background(0);
                fill(255);
                textAlign(CENTER,CENTER);
                textFont(createFont('Marcellus Bold'),125);
                pushMatrix();
                translate(450,77);
                scale(0.85,1.59);
                translate(-450,-75);
                text('Acknowledgments',445,72);
                popMatrix();
                
                noStroke();
                for(var i = 0; i < 360; i += 90){
                    pushMatrix();
                    translate(277,95);
                    rotate(i);
                    beginShape();
                    vertex(0,0);
                    vertex(10,0);
                    bezierVertex(5,2,2,5,0,10);
                    endShape();
                    popMatrix();
                }
                
                
                var mask = get(0,0,900,200);
                
                background(255);
                noStroke();
                var c2 = color(255);
                var c1 = color(220,200,255);
                for(var i = 0; i < 200; i ++){
                    fill(lerpColor(c1,c2,i/200));
                    rect(0,i,900,1);
                }
                var img = get(0,0,900,200);
                
                background(28, 143, 189);
                var c2 = color(125, 5, 43);
                var c1 = color(117, 18, 128);
                for(var i = 0; i < 200; i ++){
                    fill(lerpColor(c1,c2,i/200));
                    rect(0,i,900,1);
                }
                var img2 = get(0,0,900,200);
                
                if(img && img2){
                    img.mask(mask);
                    img2.mask(mask);
                }
                
                background(255,0);
                for(var i = 0; i < 10; i ++){
                    image(img2,0,i+200);
                }
                image(img,0,200);  
            }
        },
        fightForeground:{
            w:800,
            h:600,
            d:function(){
                background(0);
                noiseSeed(1);
                noStroke();
                fill(255);
                randomSeed(3);
                for(var  i = 0; i < 800; i += random(5,10)){
                    var yOff = sin((i+50)/3)*2;
                    ellipse(i,yOff*10+400+random(-2,2),random(10,20),20);
                    triangle(i+random(-1,4),yOff*10+380+random(5,3),i-random(2,4),yOff*10+395,i+random(2,4),yOff*10+395);
                    triangle(i+4+random(-1,4),yOff*10+380+random(-5,3),i-random(2,4)+4,yOff*10+395,i+random(2,4)+4,yOff*10+395);
                    
                }
                var mask = get();
                background(49, 130, 106);
                fill(30, 112, 87,100);
                for(var i = 0; i < 400; i ++){
                    ellipse(random(0,800),random(350,450),20,20);
                }
                filter(BLUR,2);
                var img = get();
                if(img){
                    img.mask(mask);
                }
                
                background(255,0);
            
                fill(89, 74, 50);
                beginShape();
                for(var i = 0; i <= 800; i += 5){
                    var yOff = sin((i+50)/3);
                    vertex(i,yOff*20+400);
                }
                vertex(800,600);
                vertex(0,600);
                endShape();
                fill(82, 64, 41);
                beginShape();
                for(var i = 0; i <= 850; i += random(50,100)){
                    var yOff = sin((i+50)/3);
                    vertex(i,yOff*20+450+random(-20,20));
                }
                vertex(800,600);
                vertex(0,600);
                endShape();
                fill(0,20);
                beginShape();
                for(var i = 0; i <= 850; i += random(50,100)){
                    var yOff = sin((i+50)/3);
                    vertex(i,yOff*20+500+random(-20,20));
                }
                vertex(900,600);
                vertex(0,600);
                endShape();
                image(img,0,0);
                
                randomSeed(1);
                fill(0,20);
                for(var i = 0; i < 60; i ++){
                    var y = random(500,600);
                    var s = map(y,500,600,20,40)+random(3,-3);
                    ellipse(random(0,800),y,s,s);
                }
                
                rock(200,520,1,1);
                rock(320,510,20,0.8);
                rock(450,530,20,0.6);
                rock(600,580,10,0.7);
                rock(725,520,20,0.9);
                rock(100,480,10,0.65);
                
            }
            
            
        },
        sword:{
            w:200,
            h:500,
            d:function(){
                background(0);
                fill(255);
                noStroke();
                beginShape();
                vertex(5,10);
                bezierVertex(16,100,25,188,14,200);
                bezierVertex(14,205,5,210,0,210);
                bezierVertex(5,230,5,240,10,300);
                vertex(60,300);
                bezierVertex(105,91,36,10,5,10);
                endShape();
                var mask = get(0,0,100,300);
                
                background(172, 180, 196);
                noStroke();
                
                for(var i = 0; i < 100; i ++){
                    fill(255,5);
                    ellipse(random(0,100),random(0,300),random(20,40),random(20,40));
                    fill(0,5);
                    ellipse(random(0,100),random(0,300),random(20,40),random(20,40));
                }
                pushMatrix();
                translate(-10,5);
                noStroke();
                fill(0,10);
                beginShape();
                vertex(0,300);
                vertex(60,300);
                bezierVertex(105,91,36,10,10,10);
                endShape();
                popMatrix();
                fill(0,10);
                pushMatrix();
                translate(-24,5);
                beginShape();
                vertex(0,300);
                vertex(60,300);
                bezierVertex(105,91,36,10,10,10);
                endShape();
                popMatrix();
                filter(BLUR,2);
                
                noFill();
                stroke(0,50);
                strokeWeight(10);
                pushMatrix();
                translate(-20,5);
                 beginShape();
                    vertex(60,300);
                    bezierVertex(105,91,36,10,5,10);
                    endShape();
                    popMatrix();
                
                var blade = get(0,0,100,300);
                
                if(blade){
                    blade.mask(mask);
                }
                
                background(0);
                fill(255);
                noStroke();
                beginShape();
                vertex(30,290);
                bezierVertex(40,295,50,300,60,300);
                vertex(110,300);
                bezierVertex(120,300,130,295,140,290);
                bezierVertex(145,305,145,320,140,335);
                bezierVertex(130,330,120,325,110,325);
                vertex(60,325);
                bezierVertex(50,325,40,330,30,335);
                bezierVertex(25,320,25,305,30,290);
                endShape();
                var mask = get(0,290,200,50);
                
                background(166, 138, 36);
                fill(255,255,0,5);
                for(var i = 0; i < 100; i ++){
                    ellipse(random(0,200),random(290,340),random(10,30),random(10,30));
                }
                
                fill(0,20);
                arc(85,340,150,60,180,360);
                filter(BLUR,2);
                var crossguard = get(0,290,200,50);
                
                if(crossguard){
                    crossguard.mask(mask);
                }
                
                background(0);
                fill(255);
                ellipse(85,400,50,50);
                var mask = get(60,375,50,50);
                
                background(166, 138, 36);
                fill(255,255,0,5);
                for(var i = 0; i < 100; i ++){
                    ellipse(random(60,110),random(375,425),random(10,30),random(10,30));
                }
                filter(BLUR,2);
                fill(0,30);
                ellipse(85,400,20,20);
                for(var i = 0; i < 360; i += 36){
                    pushMatrix();
                    translate(85,400);
                    rotate(i);
                    rect(15,-2,10,4,6);
                    popMatrix();
                }
                var hilt = get(60,375,50,50);
                
                if(hilt){
                    hilt.mask(mask);
                }
                background(255,0);
                
                image(blade,50,0,120,360);
                image(crossguard,10,340);
                fill(74, 44, 12);
                rect(75,375,40,62);
                image(hilt,70,425);
    
            }
        },
        vsBackground:{
            w:900,
            h:600,
            d:function(){
                var diagonalGradient = function(x,y,w,r,length,color,opac){
                    pushMatrix();  
                    translate(x,y);
                    rotate(r);
                    noStroke();
                    for(var i = 0; i < length; i ++){
                        fill(color,map(i,0,length,opac,0));
                        rect(0,i,w,1);
                    }
                    popMatrix();
                };
                
                background(43, 54, 79);
                randomSeed(4);
                for(var i = 0; i < 100; i ++){
                    diagonalGradient(random(0,950),random(0,650),random(10,50),26.5,random(50,300),color(59, 73, 99),random(20,40));
                    diagonalGradient(random(0,950),random(0,650),random(10,50),206.5,random(50,300),color(59, 73, 99),random(20,40));
                    
                    diagonalGradient(random(0,950),random(0,650),random(10,50),26.5,random(50,300),color(39, 53, 79),random(20,40));
                    diagonalGradient(random(0,950),random(0,650),random(10,50),206.5,random(50,300),color(39, 53, 79),random(20,40));
                }
                
                
                
                noFill();
                strokeWeight(1);
                for(var i = 1100; i > 600; i --){
                    stroke(0,map(i,1100,600,70,0));
                    ellipse(450,300,i,i);
                }
                fill(0,5);
                noStroke();
                ellipse(450,300,700,700);
                
                filter(BLUR,2);
                
                var vsbackground = get(0,0,900,600);
                
                    
                background(0);
                fill(255);
                quad(0,0,0,600,300,600,600,0);
                
                var mask = get(0,0,900,600);
                    
                    
                if(vsbackground){
                    vsbackground.mask(mask);
                }
                
                var c1 = color(31, 40, 59);
                var c2 = color(43, 54, 79);
                for(var i = 600; i > 0; i --){
                    
                    fill(lerpColor(c1,c2, constrain(i,0,300)/300));
                    quad(0,0,0,600,300+i,600,600+i,0);
                }
                randomSeed(4);
                
                for(var i = 0; i < 100; i ++){
                    diagonalGradient(random(0,950),random(0,650),random(10,50),26.5,random(50,300),color(59, 73, 99),random(20,40));
                    diagonalGradient(random(0,950),random(0,650),random(10,50),206.5,random(50,300),color(59, 73, 99),random(20,40));
                    
                    diagonalGradient(random(0,950),random(0,650),random(10,50),26.5,random(50,300),color(39, 53, 79),random(20,40));
                    diagonalGradient(random(0,950),random(0,650),random(10,50),206.5,random(50,300),color(39, 53, 79),random(20,40));
                }
                
                
                
                
                noFill();
                strokeWeight(1);
                for(var i = 1100; i > 600; i --){
                    stroke(0,map(i,1100,600,70,0));
                    ellipse(450,300,i,i);
                }
                fill(0,5);
                noStroke();
                ellipse(450,300,700,700);
                
                filter(BLUR,2);
                image(vsbackground,0,0);
            }
        },
        blueBanner:{
            w:400,
            h:150,
            d:function(){
                var banner = function(){
                    beginShape();
                    vertex(0,0);
                    vertex(400,0);
                    vertex(350,75);
                    vertex(400,150);
                    vertex(0,150);
                    endShape(CLOSE);  
                };
                background(0);
                fill(255);
                noStroke();
                banner();
                var mask = get(0,0,400,150);
                
                background(83, 153, 181);
                noFill();
                strokeWeight(1);
                
                var c1 = color(61, 131, 158);
                var c2 = color(83, 153, 181);
                for(var i = 1; i > 0.7; i -= 0.01){
                    pushMatrix();
                    translate(200,75);
                    scale(i);
                    translate(-200,-75);
                    fill(lerpColor(c2,c1,(i-0.7)/0.3));
                    banner();
                    popMatrix();
                }
                
                
                var img = get(0,0,400,150);
                
                if(img){
                    img.mask(mask);
                }
                
                background(255,0);
                image(img,0,0);
            }
        },
        redBanner:{
            w:400,
            h:150,
            d:function(){
                var banner = function(){
                    beginShape();
                    vertex(0,0);
                    vertex(400,0);
                    vertex(350,75);
                    vertex(400,150);
                    vertex(0,150);
                    endShape(CLOSE);  
                };
                
                background(0);
                fill(255);
                noStroke();
                banner();
                var mask = get(0,0,400,150);
    
                background(255,0);
                noFill();
                strokeWeight(1);
                
                var c1 = color(179, 38, 78);
                var c2 = color(207, 56, 101);
                for(var i = 1; i > 0.7; i -= 0.01){
                    pushMatrix();
                    translate(200,75);
                    scale(i);
                    translate(-200,-75);
                    fill(lerpColor(c2,c1,(i-0.7)/0.3));
                    banner();
                    popMatrix();
                }
                var img2 = get(0,0,400,150);
                
                if(img2){
                    img2.mask(mask);
                }
            }
        },
        shield1:{
            w:100,
            h:150,
            d:function(){
                var shield = function(x,y,s){
                    pushMatrix();
                    translate(x,y);
                    scale(s);
                    beginShape();
                    vertex(50,0);
                    bezierVertex(80,25,90,25,100,30);
                    bezierVertex(100,100,100,125,50,150);
                    bezierVertex(0,125,0,100,0,30);
                    bezierVertex(10,24,20,25,50,0);
                    endShape();
                    popMatrix();
                };
                
                background(135, 155, 171);
                strokeWeight(1);
                for(var i = 0; i < 125; i ++){
                    for(var j = 0; j < 150; j ++){
                        var n = map(noise((i-10)/15,j/15),0.4,0.6,10,50);
                        stroke(200,200,255,n);
                        point(i,j);
                    }
                }
                fill(255,30);
                shield(4,5,0.925);
                filter(BLUR,1);
                
                fill(0,50);
                ellipse(11,38,5,5);
                ellipse(89,38,5,5);
                ellipse(50,17,5,5);
                ellipse(50,137,5,5);
                var img = get(0,0,125,150);
                
                background(0);
                fill(255);
                noStroke();
                shield(0,0);
                
                quad(50,10,45,10,50,20,55,10);
                var mask = get(0,0,125,150);
                
                if(img){
                    img.mask(mask);
                }
                
                background(0);
                fill(255);
                shield(7,11,0.85);
                
                fill(0);
                quad(50,10,40,15,50,25,60,15);
                quad(5,35,15,30,17,42,5,45);
                quad(95,35,85,30,83,42,95,45);
                quad(50,142,40,137,50,127,60,137);
                
                var mask = get(0,0,125,150);
                
                background(68, 68, 115);
                var c1 = color(61, 61, 112);
                var c2 = color(86, 86, 138);
                for(var i = 0; i < 150; i ++){
                    fill(lerpColor(c1,c2,i/150));
                    ellipse(125/2,75,150-i,150-i);
                }
                var img2 = get(0,0,125,150);
                
                if(img2){
                    img2.mask(mask);
                }
                
                background(255,0);
                image(img,0,0);
                image(img2,0,0);
                
                fill(176, 148, 57);
                
                function laurel(clr1,clr2,weight){
                    
                    var laurelLeaf = function(x,y,r,s){
                        pushMatrix();
                        translate(x,y+50);
                        rotate(r);
                        translate(0,-50);
                        scale(s);
                        beginShape();
                        vertex(0,0);
                        bezierVertex(10 + random(-3,3),10 + random(-4,4),20+random(-3,3),40 + random(-4,4),0,50);
                        bezierVertex(-13 + random(-3,3),40 + random(-4,4),-5+ random(-3,3),20 + random(-4,4),0,0);
                        endShape();
                        popMatrix();
                    };
                    
                    function laurelHalf(clr,clr2,weight){
                        noStroke();
                        fill(clr);
                        
                        laurelLeaf(328,110,40,2);
                
                        for(var i = 215; i >= 90; i -= 15){
                            laurelLeaf(450+cos(i)*225,300+sin(i)*225,i+90,2);
                            laurelLeaf(450+cos(i)*225,300+sin(i)*225,i-90 ,1);
                        }
                    }
                
                    pushMatrix();
                    translate(450,300);
                    scale(1.1);
                    translate(-450,-300);
                    translate(0,-30);
                    laurelHalf(clr1,clr2,weight);
                    pushMatrix();
                    translate(450,0);
                    scale(-1,1);
                    translate(-450,0);
                    laurelHalf(clr1,clr2,weight);
                    popMatrix();
                    
                
                    fill(clr1);
                    beginShape();
                    
                    for(var i = -90; i < 270 + 72; i += 72){
                        curveVertex(450 + cos(i) * 100, 250 + sin(i) * 100);
                        curveVertex(450 + cos(i + 36) * 50, 250 + sin(i + 36) * 50);
                    }
                    endShape(CLOSE);
                    popMatrix();
                    
                    
                }
                
                pushMatrix();
                translate(-400,-230);
                translate(450,300);
                scale(0.12);
                
                translate(-450,-300);
                laurel(color(200,200,255),color(200,200,255),15);
                popMatrix();
            }
        },
        shield2:{
            w:100,
            h:150,
            d:function(){
                var shield = function(x,y,s){
                    pushMatrix();
                    translate(x,y);
                    scale(s);
                    beginShape();
                    vertex(50,0);
                    bezierVertex(80,25,90,25,100,30);
                    bezierVertex(100,100,100,125,50,150);
                    bezierVertex(0,125,0,100,0,30);
                    bezierVertex(10,24,20,25,50,0);
                    endShape();
                    popMatrix();
                };
                
                background(135, 155, 171);
                strokeWeight(1);
                for(var i = 0; i < 125; i ++){
                    for(var j = 0; j < 150; j ++){
                        var n = map(noise((i-10)/15,j/15),0.4,0.6,10,50);
                        stroke(200,200,255,n);
                        point(i,j);
                    }
                }
                fill(255,30);
                shield(4,5,0.925);
                filter(BLUR,1);
                
                fill(0,50);
                ellipse(11,38,5,5);
                ellipse(89,38,5,5);
                ellipse(50,17,5,5);
                ellipse(50,137,5,5);
                var img = get(0,0,125,150);
                
                background(0);
                fill(255);
                noStroke();
                shield(0,0);
                
                quad(50,10,45,10,50,20,55,10);
                var mask = get(0,0,125,150);
                
                if(img){
                    img.mask(mask);
                }
                
                background(0);
                fill(255);
                shield(7,11,0.85);
                
                fill(0);
                quad(50,10,40,15,50,25,60,15);
                quad(5,35,15,30,17,42,5,45);
                quad(95,35,85,30,83,42,95,45);
                quad(50,142,40,137,50,127,60,137);
                
                var mask = get(0,0,125,150);
                
                background(68, 68, 115);
                var c1 = color(173, 12, 66);
                var c2 = color(186, 48, 92);
                for(var i = 0; i < 150; i ++){
                    fill(lerpColor(c1,c2,i/150));
                    ellipse(125/2,75,150-i,150-i);
                }
                var img2 = get(0,0,125,150);
                
                if(img2){
                    img2.mask(mask);
                }
                
                background(255,0);
                image(img,0,0);
                image(img2,0,0);
                
                fill(176, 148, 57);
                
                function laurel(clr1,clr2,weight){
                    
                    var laurelLeaf = function(x,y,r,s){
                        pushMatrix();
                        translate(x,y+50);
                        rotate(r);
                        translate(0,-50);
                        scale(s);
                        beginShape();
                        vertex(0,0);
                        bezierVertex(10 + random(-3,3),10 + random(-4,4),20+random(-3,3),40 + random(-4,4),0,50);
                        bezierVertex(-13 + random(-3,3),40 + random(-4,4),-5+ random(-3,3),20 + random(-4,4),0,0);
                        endShape();
                        popMatrix();
                    };
                    
                    function laurelHalf(clr,clr2,weight){
                        noStroke();
                        fill(clr);
                        
                        laurelLeaf(328,110,40,2);
                
                        for(var i = 215; i >= 90; i -= 15){
                            laurelLeaf(450+cos(i)*225,300+sin(i)*225,i+90,2);
                            laurelLeaf(450+cos(i)*225,300+sin(i)*225,i-90 ,1);
                        }
                    }
                
                    pushMatrix();
                    translate(450,300);
                    scale(1.1);
                    translate(-450,-300);
                    translate(0,-30);
                    laurelHalf(clr1,clr2,weight);
                    pushMatrix();
                    translate(450,0);
                    scale(-1,1);
                    translate(-450,0);
                    laurelHalf(clr1,clr2,weight);
                    popMatrix();
                    
                
                    fill(clr1);
                    beginShape();
                    
                    for(var i = -90; i < 270 + 72; i += 72){
                        curveVertex(450 + cos(i) * 100, 250 + sin(i) * 100);
                        curveVertex(450 + cos(i + 36) * 50, 250 + sin(i + 36) * 50);
                    }
                    endShape(CLOSE);
                    popMatrix();
                    
                    
                }
                
                pushMatrix();
                translate(-400,-230);
                translate(450,300);
                scale(0.12);
                
                translate(-450,-300);
                laurel(color(255,200,255),color(200,200,255),15);
                popMatrix();
            }
        },
        shield1Front:{
            w:40,
            h:150,
            d:function(){
                noStroke();
                
                background(0);
                fill(255);
                ellipse(7,75,20,130);
                var mask = get(0,0,30,150);
                
                var c1 = color(61, 61, 112);
                var c2 = color(86, 86, 138);
                for(var i = 0; i < 10; i ++){
                    fill(lerpColor(c1,c2,i/10));
                    rect(7+i,0,1,150);
                }
                var img = get(0,0,30,150);
    
                if(img){
                    img.mask(mask);
                }
                
                background(255,0);
                fill(105, 122, 135);
                rect(13,50,7,7);
                rect(13,93,7,7);
                arcs(13,75,15,50,90,270);
                
                pushMatrix();
                translate(20,0);
                image(img,0,0);
                
                fill(135, 155, 171);
                rect(0,0,10,150);
                strokeWeight(1);
                for(var i = 0; i < 10; i ++){
                    for(var j = 0; j < 150; j ++){
                        var n = map(noise((i-10)/15,j/15),0.4,0.6,10,50);
                        stroke(200,200,255,n);
                        point(i,j);
                    }
                }
                
                for(var i = 0; i < 30; i ++){
                    fill(0,i*2);
                    rect(0,i,10,1);
                }
                
                popMatrix();
            }
        },
        shieldInterior:{
            w:100,
            h:150,
            d:function(){
                var shield = function(x,y,s){
                    pushMatrix();
                    translate(x,y);
                    scale(s);
                    beginShape();
                    vertex(50,0);
                    bezierVertex(80,25,90,25,100,30);
                    bezierVertex(100,100,100,125,50,150);
                    bezierVertex(0,125,0,100,0,30);
                    bezierVertex(10,24,20,25,50,0);
                    endShape();
                    popMatrix();
                };
                
                background(112, 122, 130);
                strokeWeight(1);
                for(var i = 0; i < 125; i ++){
                    for(var j = 0; j < 150; j ++){
                        var n = map(noise((i-10)/15,j/15),0.4,0.6,10,50);
                        stroke(200,200,255,n);
                        point(i,j);
                    }
                }
                fill(255,30);
                shield(4,5,0.925);
                filter(BLUR,1);
                
                fill(0,50);
                ellipse(11,38,5,5);
                ellipse(89,38,5,5);
                ellipse(50,17,5,5);
                ellipse(50,137,5,5);
                var img = get(0,0,125,150);
                
                background(0);
                fill(255);
                noStroke();
                shield(0,0);
                
                quad(50,10,45,10,50,20,55,10);
                var mask = get(0,0,125,150);
                
                if(img){
                    img.mask(mask);
                }
                
                background(0);
                fill(255);
                shield(7,11,0.85);
                
                fill(0);
                quad(50,10,40,15,50,25,60,15);
                quad(5,35,15,30,17,42,5,45);
                quad(95,35,85,30,83,42,95,45);
                quad(50,142,40,137,50,127,60,137);
                
                var mask = get(0,0,125,150);
                
                background(68, 68, 115);
                var c1 = color(116, 116, 135);
                var c2 = color(71, 71, 87);
                for(var i = 0; i < 150; i ++){
                    fill(lerpColor(c1,c2,i/150));
                    ellipse(125/2,75,150-i,150-i);
                }
                var img2 = get(0,0,125,150);
                
                if(img2){
                    img2.mask(mask);
                }
                
                background(255,0);
                image(img,0,0);
                image(img2,0,0);
            }
        },
        shieldBar:{
            w:150,
            h:20,
            d:function(){
                noStroke();
    
                fill(70,70,90);
                beginShape();
                vertex(295,20);
                vertex(95,20);
                vertex(80,100);
                vertex(280,100);
                endShape();
                
                fill(100,100,120);
                beginShape();
                vertex(0,0);
                vertex(300,0);
                vertex(296,20);
                vertex(96,20);
                vertex(80,100);
                vertex(0,100);
                endShape();
                
                background(28,143,189);
                var c2 = color(28,143,189);
                var c1 = color(16, 101, 135);
                for(var i = 0; i < 50; i ++){
                    fill(lerpColor(c1,c2,i/50));
                    rect(i,0,1,20);
                }
                var c1 = color(28,143,189);
                var c2 = color(175, 42, 212);
                for(var i = 0; i < 100; i ++){
                    fill(lerpColor(c1,c2,i/100));
                    rect(i+50,0,1,20);
                }
                
                fill(0,20);
                rect(0,10,150,10);
                rect(0,5,150,15);
            }
        },
        energyBar:{
            w:150,
            h:20,
            d:function(){
                noStroke();
                
                background(210, 235, 23);
                var c2 = color(224, 224, 40);
                var c1 = color(173, 173, 38);
                for(var i = 0; i < 50; i ++){
                    fill(lerpColor(c1,c2,i/50));
                    rect(i,0,1,20);
                }
                var c1 = color(224, 224, 40);
                var c2 = color(84, 176, 222);
                for(var i = 0; i < 100; i ++){
                    fill(lerpColor(c1,c2,i/100));
                    rect(i+50,0,1,20);
                }
                
                fill(0,20);
                rect(0,10,150,10);
                rect(0,5,150,15);
            }
        },
        healthBar:{
            w:150,
            h:20,
            d:function(){
                noStroke();
                
                background(189, 28, 74);
                var c2 = color(189, 28, 74);
                var c1 = color(148, 28, 132);
                for(var i = 0; i < 50; i ++){
                    fill(lerpColor(c1,c2,i/50));
                    rect(i,0,1,20);
                }
                var c1 = color(189, 28, 74);
                var c2 = color(204, 103, 20);
                for(var i = 0; i < 100; i ++){
                    fill(lerpColor(c1,c2,i/100));
                    rect(i+50,0,1,20);
                }
                
                fill(0,20);
                rect(0,10,150,10);
                rect(0,5,150,15);
            }
        },
        playerStats:{
            w:315,
            h:115,
            d:function(){
                
                noStroke();
                background(255,0);
    
                fill(189, 28, 74);
                beginShape();
                vertex(25,12);
                bezierVertex(60,-19,54,40,25,50);
                bezierVertex(-4,40,-10,-19,25,10);
                endShape();
                
                fill(0,20);
                beginShape();
                vertex(25,12);
                bezierVertex(60,-19,54,40,25,50);
                endShape();
                
                var heartIcon = get(0,0,50,50);
                
                background(255,0);
                
                fill(224, 224, 40);
                beginShape();
                vertex(10,0);
                vertex(40,0);
                vertex(25,20);
                vertex(35,20);
                vertex(13,50);
                vertex(18,25);
                vertex(8,25);
                endShape();
                
                fill(0,30);
                quad(13,50,35,20,25,20,18,25);
                
                var boltIcon = get(0,0,50,50);
                
                background(255,0);
                
                fill(28,143,189);
                beginShape();
                vertex(25,0);
                vertex(50,5);
                bezierVertex(50,10,55,40,25,50);
                bezierVertex(-5,40,0,5,0,5);
                endShape();
                
                fill(0,30);
                beginShape();
                vertex(25,0);
                vertex(50,5);
                bezierVertex(50,10,55,40,25,50);
                endShape();
                
                var shieldIcon = get(0,0,50,50);
                
                noStroke();
                
                fill(90,90,110);
                beginShape();
                vertex(0,0);
                vertex(300,0);
                vertex(297,15);
                vertex(106,15);
                vertex(90,100);
                vertex(280,100);
                vertex(300,0);
                vertex(315,0);
                vertex(295,115);
                vertex(0,115);
                vertex(0,100);
                endShape();
                
                fill(70,70,90);
                ellipse(40,50,60,60);
                
                ellipse(90,30,20,20);
                ellipse(85,55,20,20);
                ellipse(80,80,20,20);
                
                image(heartIcon,83,23,15,15);
                image(shieldIcon,78,48,14,14);
                image(boltIcon,74,73,15,15);
            }
        },
        fightTree:{
            w:400,
            h:400,
            d:function(){
                noStroke();
    
                background(0);
                
                pushMatrix();
                translate(0,100);
                fill(255);
                beginShape();
                vertex(50,300);
                vertex(200,300);
                bezierVertex(183,281,168,296,165,278);
                bezierVertex(154,252,184,220,190,215);
                bezierVertex(272,141,241,159,264,125);
                vertex(312,56);
                vertex(274,92);
                bezierVertex(294,54,288,32,291,25);
                bezierVertex(244,134,235,150,230,140);
                bezierVertex(216,100,231,93,240,76);
                vertex(218,93);
                bezierVertex(202,58,244,2,252,-6);
                bezierVertex(192,39,199,73,199,3);
                bezierVertex(163,53,219,100,204,122);
                bezierVertex(218,166,184,168,177,178);
                bezierVertex(176,131,137,75,163,-38);
                bezierVertex(135,33,145,11,140,45);
                vertex(125,21);
                bezierVertex(143,90,155,130,142,119);
                vertex(103,70);
                bezierVertex(163,176,143,173,135,188);
                bezierVertex(97,193,88,134,92,132);
                bezierVertex(101,54,76,34,110,1);
                bezierVertex(68,21,78,41,76,41);
                bezierVertex(24,-31,18,-8,18,-19);
                bezierVertex(86,79,75,105,61,105);
                bezierVertex(79,208,97,224,108,229);
                bezierVertex(131,296,50,282,50,300);
                endShape();
                
                popMatrix();
                var mask = get(0,0,400,400);
                
                pushMatrix();
                
                translate(1,2);
            
                background(92, 64, 49);
                fill(125, 84, 65);
                beginShape();
                vertex(70,202);
                vertex(48,192);
                vertex(82,342);
                vertex(108,330);
                bezierVertex(70,247,70,202,70,202);
                endShape();
                
                beginShape();
                vertex(104,372);
                vertex(42,362);
                vertex(50,400);
                bezierVertex(71,404,83,415,104,372);
                endShape();
                
                beginShape();
                vertex(201,144);
                vertex(203,87);
                vertex(171,111);
                vertex(202,256);
                bezierVertex(231,229,201,176,201,144);
                endShape();
                
                beginShape();
                vertex(135,291);
                vertex(95,164);
                vertex(122,104);
                vertex(139,143);
                bezierVertex(155,185,161,251,135,291);
                endShape();
                
                fill(0,25);
                beginShape();
                vertex(150,400);
                bezierVertex(161,237,220,323,273,190);
                vertex(343,124);
                vertex(400,400);
                endShape();
                
                beginShape();
                vertex(125,400);
                bezierVertex(126,342,177,296,177,279);
                vertex(177,57);
                vertex(359,85);
                vertex(337,400);
                endShape();
                
                fill(125, 84, 65,50);
                beginShape();
                vertex(110,400);
                bezierVertex(133,375,107,317,141,280);
                vertex(97,175);
                vertex(149,38);
                vertex(3,40);
                vertex(0,400);
                endShape();
                
                popMatrix();
                
                filter(BLUR,2);
                
                stroke(0,20);
                strokeWeight(1);
                var off = 3704;
                for(var j = 0; j <= 400; j ++){
                    for(var i = 0; i < 400; i ++){
                        var n = noise((i+off)/50,(j+off)/200).toFixed(2);
                        if((n * 100)%2===0){
                            point(i,j);
                        }
                    }
                }
                
                var img = get(0,0,400,400);
                
                if(img){
                    img.mask(mask);
                }
                
                background(255,0);
                
                function leaf(x,y,s,r){
                    pushMatrix();
                    translate(x,y);
                    rotate(r || random(0,360));
                    scale(s || random(0.2,0.25));
                    
                    beginShape();
                    vertex(0,1);
                    bezierVertex(15,1,27,5,30,31);
                    bezierVertex(5,27,-1,22,0,1);
                    endShape();
                    
                    popMatrix();
                }  
                function bundle(x,y,r,clr){
                    /*
                        Bundle your home and auto insurance and save
                    */
                    var re = red(clr);
                    var g = green(clr);
                    var b = blue(clr);
                    pushMatrix();
                    for(var i = 0; i < r*r/1.5; i ++){
                        var X = random(x - r, x + r);
                        var Y = random(y - r, y + r);
                        
                        if(dist(X,Y,x,y) < r){
                            fill(color(re + random(-20,20) - (X -x),g+random(-20,20) - (X - x) ,b + random(-20,20) - (X - x) ));
                            leaf(X,Y);
                        }
                    }
                    popMatrix();
                }
                pushMatrix();
                translate(50,0);
            
                bundle(29,87,30,color(17, 115, 68));
                bundle(162,57,45,color(35, 135, 87));
                bundle(162,181,60,color(8, 64, 35));
                bundle(75,205,40,color(9, 89, 50));
                bundle(96,111,40,color(7, 89, 49));
                bundle(229,184,50,color(24, 99, 63));
                bundle(229,90,50,color(9, 120, 67));
                bundle(293,130,40,color(25, 120, 74));
                bundle(293,190,40,color(25, 120, 74));
                bundle(20,140,40,color(48, 156, 104));
                bundle(87,67,40,color(30, 125, 79));
                
                image(img,0,0);
                
                bundle(36,209,20,color(52, 158, 107));
                bundle(57,209,20,color(52, 158, 107));
                bundle(97,169,20,color(52, 158, 107));
                bundle(107,179,20,color(52, 158, 107));
                bundle(107,179,20,color(52, 158, 107));
                bundle(173,93,30,color(52, 158, 107));
                bundle(127,119,20,color(52, 158, 107));
                bundle(232,169,20,color(52, 158, 107));
                bundle(173,193,30,color(52, 158, 107));
                popMatrix();
    
        
            }
        },
        shockedOutline:{
            w:60,
            h:80,
            d:function(){
                var outline = function(x,y,sx,sy){
                    pushMatrix();
                    translate(x,y);
                    scale(sx,sy);
                    beginShape();
                    vertex(9,4);
                    vertex(16,2);
                    vertex(25,6);
                    vertex(26,15);
                    vertex(28,17);
                    vertex(25,20);
                    vertex(22,27);
                    vertex(27,36);
                    vertex(28,45);
                    vertex(22,60);
                    vertex(20,62);
                    vertex(11,62);
                    vertex(9,59);
                    vertex(5,38);
                    vertex(8,30);
                    vertex(12,29);
                    vertex(7,13);
                    endShape();
                    popMatrix();
                
                };
                
                pushMatrix();
                translate(1,1);
                noStroke();
                fill(28, 143, 189,100);
                outline(6,6,1.3,1.2);
                fill(28, 143, 189,50);
                outline(3,6,1.5,1.2);
                outline(-4,0,1.9,1.4);
                
                fill(225,235,255,100);
                outline(10,10,1.1);
                
                filter(BLUR,1);
                popMatrix();
            }
        },
        laurel:{
            w:900,
            h:600,
            d:function(){
                background(255,0);
                
                laurel(color(255,0),color(28, 143, 189,50),15);
                laurel(color(255,0),color(28, 143, 189,50),10);
                laurel(color(255,0),color(28, 143, 189,50),5);
                laurel(color(255,0),color(200,200,255,100),2);
            },
        },
        minigameTitle:{
            w:200,
            h:50,
            d:function(){
                noStroke();
                for(var i = 0; i < 25; i ++){
                    fill(0,i*3);
                    rect(i,0,1,50);
                    rect(200-i,0,1,50);
                }
                rect(25,0,151,50);
            }
        },
        daylight:{
            w:900,
            h:600,
            d:function(){
                background(255,0);
    
                noStroke();
                fill(0,0,50,20);
                randomSeed(101);
                beginShape();
                vertex(900,100);
                for(var i = 900; i >= 0; i -= 100){
                    curveVertex(i,100+random(-50,50));
                }
                vertex(0,100);
                vertex(0,200);
                noStroke();
                for(var i = 0; i <= 900; i += 100){
                    curveVertex(i,200+random(-50,50));
                }
                vertex(900,100);
                endShape(CLOSE);
                
                for(var i = 0; i < 1000; i ++){
                    fill(0,3);
                    ellipse(random(0,900),random(0,600),20,20);
                    fill(255,3);
                    ellipse(random(0,900),random(0,600),20,20);
                }
                
                filter(BLUR,10);
            }
        },
        chimneyBackdrop:{
            w:160,
            h:600,
            d:function(){
                noStroke();
                
                var c1 = color(50);
                var c2 = color(69, 60, 52);
                for(var i = 0; i < 80; i ++){
                    fill(lerpColor(c1,c2,i/70));
                    rect(0,350 + i,140,1);
                }
            }
        },
        chimney:{
            w:160,
            h:600,
            d:function(){
                pushMatrix();
                scale(0.6);
                background(200);
                noStroke();
                for(var i = 0; i <= 400; i += 40){
                    for(var j = 0; j < 650; j += 40){
                        stone(i,j,random(80,120));
                        stone(i-20,j+20,random(80,120));
                    }
                }
                fill(0,50);
                rect(0,0,250,541);
                rect(0,0,250,700);
                popMatrix();
                
                var chimney = get(0,0,140,400);
                
                background(0);
                fill(255);
                beginShape();
                vertex(30,100);
                vertex(30,0);
                vertex(110,0);
                vertex(110,100);
                vertex(140,200);
                vertex(140,400);
                vertex(0,400);
                vertex(0,200);
                endShape();
                fill(0);
                ellipse(70,304,105,105);
                fill(255);
                rect(0,325,150,100);
                var mask = get(0,0,140,400);
                
                if(chimney){
                    chimney.mask(mask);
                }
                
                pushMatrix();
                translate(10,0);
                background(255,0);
                
                image(chimney,0,100);
                for(var i = 0; i < 140; i += 27){
                    stone(i-9,425,color(115 + random(0,5), 110+random(0,5), 104),0.6);
                }
                
                for(var i = 0;i <= 200; i += 20){
                    pushMatrix();
                    translate(70,404);
                    rotate(i);
                    translate(-70,-404);
                    stone(20,404,color(115 + random(0,5), 110+random(0,5), 104),0.6,90);
                    popMatrix();
                }
                popMatrix();

            }
        },
        notice:{
            w:300,
            h:400,
            d:function(){
                fill(222, 207, 173);
                stroke(196, 181, 147);
                strokeWeight(5);
                beginShape();
                vertex(0,0);
                for(var i = 50; i < 250; i += random(30,50)){
                    vertex(i,random(0,20));
                }
                vertex(300,0);
                for(var i = 50; i < 350; i += random(30,50)){
                    vertex(random(280,300),i);
                }
                vertex(300,400);
                for(var i = 250; i > 50; i -= random(30,50)){
                    vertex(i,random(380,400));
                }
                vertex(0,400);
                for(var i = 350; i > 50; i -= random(30,50)){
                    vertex(random(0,20),i);
                }
                endShape(CLOSE);
                
                fill(140, 132, 114);
                textAlign(CENTER,CENTER);
                textFont(createFont('Marcellus Bold'),60);
                text('Notice',150,80);
                
                textAlign(LEFT,CENTER);
                textFont(createFont('Noto Sans'),20);
                text('Hear ye, hear ye. The 42nd Annual Tourney is about to begin. Sign up now at your local blacksmith\'s shop. \n\n1st prize - Sword and set of personal armor.',40,85,240,300);
                
                noStroke();
                fill(50);
                ellipse(150,40,15,15);


            }
        },
        anvil:{
            w:100,
            h:50,
            d:function(){
                background(0);
                noStroke();
                fill(255);
                beginShape();
                vertex(10,10);
                bezierVertex(15,12,31,15,40,13);
                vertex(40,5);
                vertex(100,5);
                vertex(100,15);
                bezierVertex(70,20,87,39,90,50);
                vertex(40,50);
                bezierVertex(37,45,52,35,50,30);
                bezierVertex(10,26,10,10,10,10);
                endShape();
                var mask = get(0,0,100,50);
                
                background(30);
                fill(255,3);
                for(var i = 0; i < 120; i ++){
                    ellipse(random(0,100),random(0,50),15,15);
                }
                filter(BLUR,1);
                var img = get(0,0,100,50);
                
                if(img){
                    img.mask(mask);
                }
                background(255,0);
                image(img,0,0);
            }
        },
        buck:{
            w:100,
            h:125,
            d:function(){
                

                background(0);
                fill(255);
                noStroke();
                
                var shield = function(x,y,sx,sy){
                    pushMatrix();
                    translate(x,y);
                    scale(sx,sy);
                    beginShape();
                    vertex(50,0);
                    bezierVertex(60,5,70,5,80,5);
                    vertex(90,25);
                    bezierVertex(75,40,90,60,90,70);
                    bezierVertex(90,75,90,100,50,110);
                    bezierVertex(10,100,10,75,10,70);
                    bezierVertex(10,60,25,40,10,25);
                    vertex(20,5);
                    bezierVertex(30,5,40,5,50,0);
                    endShape();
                    popMatrix();
                };
                shield();
                var mask = get(0,0,100,110);
                
                background(99, 66, 56);
                stroke(0,20);
                strokeWeight(1);
                var off = 3771;
                for(var j = 0; j <= 110; j ++){
                    for(var i = 0; i < 100; i ++){
                        var n = noise((i+off)/50,(j+off)/200).toFixed(2);
                        if((n * 100)%2===0){
                            point(i,j);
                        }
                    }
                }
                strokeWeight(8);
                noFill();
                stroke(0,30);
                shield(-3,-3);
                stroke(191, 164, 138,50);
                shield(3,3);
                var img = get(0,0,100,110);
                
                if(img){
                    img.mask(mask);
                }
                
                background(255,0);
                image(img,10,27,80,80);
                
                var antler = function(){
                    noStroke();
                    fill(247, 236, 205);
                    beginShape();
                    vertex(45,45);
                    bezierVertex(6,16,17,5,20,0);
                    bezierVertex(22,19,22,10,24,16);
                    vertex(30,5);
                    bezierVertex(28,27,33,21,33,25);
                    vertex(35,20);
                    endShape();
                };
                antler();
                pushMatrix();
                translate(50,0);
                scale(-1,1);
                translate(-50,0);
                antler();
                popMatrix();
                
                fill(153, 132, 92);
                noStroke();
                beginShape();
                vertex(50,95);
                bezierVertex(70,80,70,60,60,50);
                vertex(40,50);
                bezierVertex(30,60,30,80,50,95);
                endShape();
                
                fill(179, 153, 104);
                beginShape();
                vertex(50,80);
                bezierVertex(59,80,55,73,56,70);
                bezierVertex(63,67,62,52,63,50);
                bezierVertex(57,32,49,42,50,35);
                bezierVertex(51,42,43,32,37,50);
                bezierVertex(38,52,37,67,44,70);
                bezierVertex(45,73,41,80,50,80);
                endShape();
                
                var ear = function(){
                    fill(179, 153, 104);
                    beginShape();
                    vertex(45,50);
                    vertex(45,55);
                    bezierVertex(24,45,30,45,25,35);
                    bezierVertex(54,40,47,90,45,50);
                    endShape();
                    
                    fill(153, 132, 92);
                    pushMatrix();
                    translate(34,45);
                    rotate(37);
                    ellipse(0,0,10,5);
                    popMatrix();
                    
                };
                ear();
                
                pushMatrix();
                translate(50,0);
                scale(-1,1);
                translate(-50,0);
                ear();
                popMatrix();
                
                
                stroke(0,100);
                strokeWeight(1);
                line(50,77,46,80);
                line(50,77,54,80);
                stroke(0,50);
                line(50,55,50,65);
                line(56,70,57,65);
                line(44,70,43,65);
                
                line(40,49,44,52);
                line(60,49,56,52);
                
                noStroke();
                fill(50);
                ellipse(50,75,7,4);
                
                pushMatrix();
                translate(40,55);
                rotate(-20);
                ellipse(0,0,4,6);
                popMatrix();
                
                pushMatrix();
                translate(60,55);
                rotate(20);
                ellipse(0,0,4,6);
                popMatrix();
            }
        },
        books:{
            w:50,
            h:50,
            d:function(){
                noStroke();
                fill(105, 16, 6);
                rect(0,38,50,12,5);
                
                fill(0,50);
                rect(7,38,2,12);
                rect(41,38,2,12);
                
                fill(171, 152, 65);
                textFont(createFont('Marcellus Bold'),8);
                text('Math',25,44);
                
                fill(50, 58, 179);
                rect(5,14,40,13,10,0,0,10);
                
                fill(207, 188, 159);
                rect(7,16,38,9,10,0,0,10);
                
                fill(0,50);
                rect(7,18,38,1);
                rect(7,21,38,1);
                rect(7,23,38,1);
                
                fill(27, 64, 0);
                rect(0,27,50,12,5);
                
                fill(0,50);
                rect(7,27,2,12);
                rect(41,27,2,12);
                
                fill(171, 152, 65);
                textFont(createFont('Marcellus Bold'),8);
                text('History',22,33);
            }
        },
        button:{
            w:450,
            h:75,
            d:function(){
                background(0);
                fill(255);
                arcs(225,75,400,100,181,360);
                noStroke();
                for(var i = 0; i < 50; i ++){
                    fill(0,map(i,0,50,220,255));
                    rect(0,25 + i,450,1);
                }
                filter(BLUR,4);
                var mask = get(0,0,450,75);
                
                background(255,255,255);
                var button = get(0,0,450,75);
                
                if(button){
                    button.mask(mask);
                }
                background(255,0);
                image(button,0,0);
            }
        },
        buttonHighlight:{
            w:60,
            h:20,
            d:function(){
                background(0,0,0,0);
                noStroke();
                fill(255,100);
                ellipse(30,10,30,5);
                
                
                fill(255,10);
                for(var i = 0; i < 20; i ++){
                    ellipse(30,10,30+i*1.7,5+i);
                }
            }
        },
        howto:{
            w:900,
            h:600,
            d:function(){
                pushMatrix();
                translate(13,0);
                
                stroke(255,100);
                fill(255,50);
                rect(150,225,175,175,10);
                image(imgs.button,350,275,175,75);
                rect(350,225,175,175,10);
                image(imgs.button,550,275,175,75);
                rect(550,225,175,175,10);
                image(imgs.button,150,275,175,75);
                
                var Key = function(letter,x,y){
                    pushMatrix();
                    translate(x,y);
                    noFill();
                    stroke(255,200);
                    strokeWeight(2);
                    rect(0,0,40,40,5);
                    rect(0,0,40,47,5);
                    textFont(createFont('Noto Sans Bold',30));
                    fill(255,200);
                    text(letter,20,20);
                    popMatrix();
                };
                Key('a',167,295);
                Key('s',217,295);
                Key('d',267,295);
                Key('w',217,240);
                
                pushMatrix();
                translate(15,20);
                noFill();
                strokeWeight(4);
                beginShape();
                vertex(410,250);
                vertex(410,300);
                vertex(425,295);
                vertex(431,310);
                vertex(437,308);
                vertex(431,293);
                vertex(446,288);
                endShape(CLOSE);
                
                strokeWeight(2);
                for(var i = 135; i < 390; i += 45){
                    var ct = cos(i);
                    var st = sin(i);
                    
                    line(410+ct*10,250+st*10,410+ct*20,250+st*20);
                }
                popMatrix();
                
                strokeWeight(2);
                rect(607,270,60,60,10);
                textFont(createFont('Marcellus Bold'),30);
                
                strokeWeight(4);
                beginShape();
                vertex(617,290);
                vertex(637,310);
                vertex(687,260);
                endShape();
                beginShape();
                vertex(617,290);
                vertex(637,305);
                vertex(687,260);
                endShape();
                
                fill(255);
                text('Movement',237,370);
                text('Interaction',437,370);
                text('Missions',637,370);   
                popMatrix();
            }
        },
        flower1:{
            w:16,
            h:16,
            d:function(){
                noStroke();
                
                for(var i = 0; i < 360; i += 60){
                    fill(234 + random(-10,-10), 245+random(-10,10), 201+random(-10,10));
                    pushMatrix();
                    translate(8,8);
                    rotate(i+random(-10,10));
                    beginShape();
                    vertex(0,0);
                    bezierVertex(1,6,6,6,6,6);
                    bezierVertex(6,0,0,0,0,0);
                    endShape();
                    popMatrix();
                }
                fill(212, 195, 38);
                ellipse(8,8,4,4);
            }
        },
        flower2:{
            w:16,
            h:16,
            d:function(){
                noStroke();
                fill(191, 34, 34);
                beginShape();
                vertex(0,0);
                bezierVertex(0,12,4,16,8,16);
                bezierVertex(6,0,0,0,0,0);
                endShape();
                
                fill(222, 84, 84);
                beginShape();
                vertex(16,0);
                bezierVertex(16,12,12,16,8,16);
                bezierVertex(10,0,16,0,16,0);
                endShape();
                
                fill(209, 57, 57);
                beginShape();
                vertex(8,0);
                bezierVertex(3,0,6,12,8,16);
                bezierVertex(16,3,7,2,7,0);
                endShape();

            }
        },
        flower3:{
            w:16,
            h:16,
            d:function(){
                noStroke();
                
                for(var i = 0; i < 360; i += 60){
                    fill(209 + random(-10,-10), 57+random(-10,10), 57+random(-10,10));
                    pushMatrix();
                    translate(8,8);
                    rotate(i+random(-10,10));
                    beginShape();
                    vertex(0,0);
                    bezierVertex(1,6,6,6,6,6);
                    bezierVertex(6,0,0,0,0,0);
                    endShape();
                    popMatrix();
                }
                fill(212, 195, 38);
                ellipse(8,8,4,4);
            }
        },
        flower4:{
            w:16,
            h:16,
            d:function(){
                noStroke();
                fill(214, 225, 181);
                beginShape();
                vertex(0,0);
                bezierVertex(0,12,4,16,8,16);
                bezierVertex(6,0,0,0,0,0);
                endShape();
                
                fill(244, 255, 221);
                beginShape();
                vertex(16,0);
                bezierVertex(16,12,12,16,8,16);
                bezierVertex(10,0,16,0,16,0);
                endShape();
                
                fill(234, 245, 201);
                beginShape();
                vertex(8,0);
                bezierVertex(3,0,6,12,8,16);
                bezierVertex(16,3,7,2,7,0);
                endShape();
            }
        },
        earth:{
            w:900,
            h:600,
            d:function(){
                background(0);
                noStroke();
                fill(255);
                landMass();
                var landMask = get();
                
                background(9, 120, 11);
                fill(207, 173, 93,200);
                
                beginShape();
                vertex(620,352);
                vertex(508,334);
                vertex(477,275);
                vertex(476,279);
                vertex(556,253);
                vertex(574,268);
                vertex(598,266);
                vertex(612,268);
                vertex(713,259);
                vertex(657,376);
                vertex(620,357);
                endShape(CLOSE);
                
                
                fill(212, 166, 57,120);
                beginShape();
                vertex(534,436);
                vertex(589,415);
                vertex(616,410);
                vertex(623,436);
                vertex(576,481);
                endShape(CLOSE);
                
                beginShape();
                vertex(583,257);
                vertex(580,206);
                vertex(581,201);
                vertex(697,145);
                vertex(754,291);
                vertex(754,291);
                endShape(CLOSE);
                
                beginShape();
                vertex(259,299);
                vertex(260,294);
                vertex(257,294);
                vertex(264,265);
                vertex(271,275);
                vertex(290,289);
                vertex(299,284);
                vertex(303,256);
                vertex(305,228);
                vertex(302,226);
                vertex(279,178);
                vertex(258,173);
                vertex(245,217);
                vertex(230,282);
                endShape(CLOSE);
                
                beginShape();
                vertex(325,358);
                vertex(359,395);
                vertex(374,436);
                vertex(363,506);
                vertex(363,519);
                endShape(CLOSE);
                
                fill(255,200);
                beginShape();
                vertex(298,67);
                vertex(417,169);
                vertex(458,197);
                vertex(531,112);
                vertex(678,16);
                vertex(325,25);
                endShape(CLOSE);
                
                fill(0,50,0,6);
                for(var i = 225; i < 675; i ++){
                    for(var j = 75; j < 525; j += 5){
                        fill(0,50,0,noise(i/20,j/20) * 50 - 20 );
                        rect(i,j,5,5);
                    }
                }
                filter(BLUR,5);
                var landImg = get();
                
                if(landImg){
                    landImg.mask(landMask);
                }
                
                background(255,0);
                noStroke();
                for(var i = 225; i < 675; i += 3){
                    for(var j = 75; j < 525; j += 3){
                        var n = noise((i + noise(i/100))/100, (j + noise(j/100))/40);
                        var k = i *n;
                        var l = j *n;
                        var nn = noise((k + noise(i/100))/100, (l + noise(j/100))/40)/n;
                        
                        k = k*nn;
                        l = l*nn;
                        var nnn = noise((k + noise(i/100))/70, (l + noise(j/100))/70)/nn;
                    
                        if(nnn > 0.47){
                            fill(255,(nnn-0.49)*600);
                            rect(i,j,3,3);
                        }
                    }
                }
                filter(BLUR,3);
                var clouds = get();
                
                background(0);
                noStroke();
                fill(255);
                ellipse(450,300,450,450);
                
                
                var mask = get();
                
                background(31, 38, 130);
                fill(0,0,50,6);
                for(var i = 0; i < 600; i ++){
                    ellipse(random(200,700),random(50,550),50,50);
                }
                filter(BLUR,2);
                
                image(landImg,0,0);
                
                strokeWeight(1);
                noFill();
                for(var i = 0; i < 150; i ++){
                    stroke(255,75-i/2);
                    line(200 + i,0,200+i,600);
                }
                for(var i = 0; i < 300; i ++){
                    stroke(0,150-i/2);
                    line(700 - i,0,700-i,600);
                }
                image(clouds,0,0);
                
                var img = get();
                
                if(img){
                    img.mask(mask);
                }
                background(200,200,255,0);
                noFill();
                strokeWeight(1);
                for(var i = 0; i < 30; i ++){
                    stroke(255,30-i);
                    arcs(450-i,300,450,450,90,270);
                }
                filter(BLUR,2);
                var glow = get();
                
                image(imgs.stars1,0,0);
                image(glow,4,4);
                image(img,0,0);
            }
        },
        earthRuined:{
            w:900,
            h:600,
            d:function(){

                background(0);
                noStroke();
                fill(255);
                landMass();
                
                var landMask = get();
                
                background(56, 51, 44);
                fill(207, 173, 93,200);
                
                beginShape();
                vertex(620,352);
                vertex(508,334);
                vertex(477,275);
                vertex(476,279);
                vertex(556,253);
                vertex(574,268);
                vertex(598,266);
                vertex(612,268);
                vertex(713,259);
                vertex(657,376);
                vertex(620,357);
                endShape(CLOSE);
                
                
                fill(212, 166, 57,120);
                beginShape();
                vertex(534,436);
                vertex(589,415);
                vertex(616,410);
                vertex(623,436);
                vertex(576,481);
                endShape(CLOSE);
                
                beginShape();
                vertex(583,257);
                vertex(580,206);
                vertex(581,201);
                vertex(697,145);
                vertex(754,291);
                vertex(754,291);
                endShape(CLOSE);
                
                beginShape();
                vertex(259,299);
                vertex(260,294);
                vertex(257,294);
                vertex(264,265);
                vertex(271,275);
                vertex(290,289);
                vertex(299,284);
                vertex(303,256);
                vertex(305,228);
                vertex(302,226);
                vertex(279,178);
                vertex(258,173);
                vertex(245,217);
                vertex(230,282);
                endShape(CLOSE);
                
                beginShape();
                vertex(325,358);
                vertex(359,395);
                vertex(374,436);
                vertex(363,506);
                vertex(363,519);
                endShape(CLOSE);
                
                fill(255,200);
                beginShape();
                vertex(298,67);
                vertex(417,169);
                vertex(458,197);
                vertex(531,112);
                vertex(678,16);
                vertex(325,25);
                endShape(CLOSE);
                
                fill(0,50,0,6);
                for(var i = 225; i < 675; i ++){
                    for(var j = 75; j < 525; j += 5){
                        fill(0,50,0,noise(i/20,j/20) * 50 - 20 );
                        rect(i,j,5,5);
                    }
                }
                filter(BLUR,5);
                var landImg = get();
                
                if(landImg){
                    landImg.mask(landMask);
                }
                
                background(255,0);
                noStroke();
                for(var i = 225; i < 675; i += 3){
                    for(var j = 75; j < 525; j += 3){
                        var n = noise((i + noise(i/100))/100, (j + noise(j/100))/40);
                        var k = i *n;
                        var l = j *n;
                        var nn = noise((k + noise(i/100))/100, (l + noise(j/100))/40)/n;
                        
                        k = k*nn;
                        l = l*nn;
                        var nnn = noise((k + noise(i/100))/70, (l + noise(j/100))/70)/nn;
                    
                        if(nnn > 0.47){
                            fill(100,(nnn-0.45)*600);
                            rect(i,j,3,3);
                        }
                    }
                }
                filter(BLUR,3);
                var clouds = get();
                
                background(0);
                noStroke();
                fill(255);
                ellipse(450,300,450,450);
                
                
                var mask = get();
                
                background(67, 60, 79);
                fill(0,0,50,6);
                for(var i = 0; i < 600; i ++){
                    ellipse(random(200,700),random(50,550),50,50);
                }
                filter(BLUR,2);
                
                image(landImg,0,0);
                
                strokeWeight(1);
                noFill();
                for(var i = 0; i < 150; i ++){
                    stroke(255,75-i/2);
                    line(200 + i,0,200+i,600);
                }
                for(var i = 0; i < 300; i ++){
                    stroke(0,150-i/2);
                    line(700 - i,0,700-i,600);
                }
                image(clouds,0,0);
                
                var img = get();
                
                if(img){
                    img.mask(mask);
                }
                background(200,200,255,0);
                noFill();
                strokeWeight(1);
                for(var i = 0; i < 30; i ++){
                    stroke(133, 39, 13,60-i*2);
                    arcs(450-i,300,450,450,90,270);
                }
                filter(BLUR,2);
                var glow = get();
                
                //image(glow,4,4);
                image(img,0,0);
                
                
                        
                function warp(i,j,am){
                    var n = noise((i + noise(i/am))/am, (j + noise(j/am))/am);
                    
                    var k = i *n;
                    var l = j *n;
                    var nn = noise((k + noise(i/am))/am, (l + noise(j/am))/am)/n;
                    
                    k = k*nn;
                    l = l*nn;
                    var nnn = noise((k + noise(i/am))/am, (l + noise(j/am))/am)/nn;
                
                    k = k * nnn + 10;
                    l = l * nnn + 10;
                    var nnnn = noise((k + noise(i/am))/am, (l + noise(j/am))/am)/nnn;
                    
                    return(nnnn);
                }
                background(84, 73, 62);
                noStroke();
                for(var i = 0; i < 450; i += 2){
                    for(var j = 0; j < 450; j += 2){
                        fill(warp(i,j,20)*255,warp(i,j,20)*100,warp(i,j,20)*30,warp(i,j,100)*70);
                        rect(i+225,j+75,2,2);
                    }
                }
                filter(BLUR,1);
                var lava = get();
                
                background(0);
                fill(255);
                ellipse(450,300,450,450);
                for(var i = 0; i < 450; i += 2){
                    for(var j = 0; j < 450; j += 2){
                        fill(0,warp(i,j,40)*255 - i);
                        rect(i+225,j+75,2,2);
                    }
                }
                filter(BLUR,1);
                var mask = get();
                
                if(lava){
                    lava.mask(mask);
                    //lava.mask(landMask);
                }
                image(imgs.stars1,0,0);
                image(glow,0,0);
                image(img,0,0);
                image(lava,0,0);
                var l = get();
                
                if(l){
                    l.mask(landMask);
                }
                
                image(imgs.stars1,0,0);
                image(glow,0,0);
                image(img,0,0);
                image(l,0,0);
            }
        },
        nuke:{
            w:325,
            h:150,
            d:function(){
                background(0);
                noStroke();
                fill(255);
                beginShape();
                vertex(0,50);
                bezierVertex(0,100,50,100,100,100);
                vertex(200,100);
                bezierVertex(250,85,275,75,300,50);
                bezierVertex(275,25,250,15,200,0);
                vertex(100,0);
                bezierVertex(50,0,0,0,0,50);
                endShape();
                var mask = get(0,0,300,100);
                
                background(46, 107, 49);
                fill(12, 84, 59);
                rect(200,0,100,100);
                arcs(125,50,50,50,-60,0);
                arcs(125,50,50,50,60,120);
                arcs(125,50,50,50,180,240);
                stroke(46, 107, 49);
                strokeWeight(5);
                ellipse(125,50,15,15);
                noFill();
                stroke(12, 84, 59);
                strokeWeight(2);
                ellipse(125,50,60,60);
                
                noStroke();
                for(var i = 0; i < 50; i ++){
                    fill(0,sin(i/5*9)*30);
                    rect(0,50+i,300,1);
                    fill(255,sin(i/5*9)*30);
                    rect(0,50-i,300,1);
                }
                var img = get(0,0,300,100);
                
                if(img){
                    img.mask(mask);
                }
                
                background(255,0);
                image(img,25,25);
                fill(12, 84, 59);
                rect(0,73,100,4);
                triangle(0,0,35,45,100,25);
                triangle(0,150,35,105,100,125);
            }
        },
        street1Foreground:{
            w:800,
            h:600,
            d:function(){
                noStroke();
                background(255,0);
                fill(0,2);
                for(var i = 0; i < 50; i += 2){
                    ellipse(25,25,i,i);
                }
                var circ = get(0,0,50,50);
                
                background(0);
                noStroke();
                fill(255);
                quad(0,0,0,20,900,20,900,5);
                fill(0);
                for(var i = 0; i < 900; i += random(10,15)){
                    ellipse(i,23,random(20,25),random(5,15));
                }
                var mask = get(0,0,900,20);
                
                background(107, 85, 110);
                fill(255,30);
                quad(0,0,0,3,900,8,900,5);
                
                
                var crack = function(x,y){
                    stroke(0,50);
                    strokeWeight(1);
                    noFill();
                    pushMatrix();
                    translate(x,y);
                    var k = 0;
                    var l = 0;
                    
                    beginShape();
                    for(var i = 0; i < random(5,15); i ++){
                        vertex(k,l);
                        k += random(-4,5);
                        l += random(-2,5);
                    }
                    endShape();
                    popMatrix();
                };  
                
                fill(0,50);
                for(var i = 100; i < 900; i += 100){
                    rect(i,0,2,20);
                }
                for(var i = 0; i < 900; i += random(20,10)){
                    crack(i,random(-5,10));
                }
                noFill();
                for(var i = 0; i < 900; i += random(50,20)){
                    stroke(random(200,255),random(10,20));
                    strokeWeight(random(5,15));
                    arc(i,10,random(10,15),random(20,30),-90,90);
                }
                var img = get(0,0,900,20);
                
                if(img){
                    img.mask(mask);
                }
                
                noStroke();
                background(255,0);
                fill(87, 59, 49);
                rect(0,410,900,200);
                fill(0,30);
                beginShape();
                for(var i = 0; i <= 850; i += random(50,100)){
                    var yOff = i<720?cos(i/2):1;
                    vertex(i,yOff*50+400+100+random(-20,20));
                }
                vertex(800,600);
                vertex(0,600);
                endShape();
                fill(0,30);
                beginShape();
                for(var i = 0; i <= 850; i += random(50,100)){
                    var yOff = i<720?cos(i/2):1;
                    vertex(i,yOff*50+550+random(-20,20));
                }
                vertex(600,600);
                vertex(0,600);
                endShape();
                fill(0,20);
                for(var i = 0; i < 60; i ++){
                    var y = random(500,600);
                    var s = map(y,500,600,20,40)+random(3,-3);
                    ellipse(random(0,800),y,s,s);
                }
                image(img,0,400);
                
                rock(200,500,1,1);
                rock(100,550,20,0.8);
                rock(320,580,20,0.5);
                rock(450,540,10,0.8);
                rock(600,580,20,1);
                rock(725,500,10,0.65);
                var foreground = get();
                
                background(0);
                fill(255);
                quad(0,400,0,600,900,600,900,405);
                fill(0);
                for(var i = 0; i < 900; i += random(10,15)){
                    ellipse(i,395+i/900*3,random(20,25),random(5,15));
                }
                for(var i = 0; i < 200; i ++){
                
                    image(circ,random(-20,900),random(450+random(0,50+random(0,50)),600));
                    
                    fill(0,i*1.3);
                    rect(0,425+i,900,1);
                }
                var mask = get();
                
                if(foreground){
                    foreground.mask(mask);
                }
                
                background(255,0);
                image(foreground,0,0);
            }
        },
        ruinedCity:{
            w:800,
            h:600,
            d:function(){
                noStroke();
                background(255,0);
                fill(0,2);
                for(var i = 0; i < 50; i += 2){
                    ellipse(25,25,i,i);
                }
                var circ = get(0,0,50,50);

                background(0);
                fill(255);
                quad(0,400,0,600,900,600,900,405);
  
                randomSeed(1);
                
                background(0);
                fill(255);
                noStroke();
                beginShape();
                vertex(0,348);
                vertex(10,344);
                vertex(11,332);
                vertex(13,336);
                vertex(13,324);
                vertex(16,325);
                vertex(19,320);
                vertex(18,326);
                vertex(22,322);
                vertex(27,328);
                vertex(28,335);
                vertex(28,316);
                vertex(32,316);
                vertex(34,312);
                vertex(31,310);
                vertex(33,310);
                vertex(31,305);
                vertex(31,294);
                vertex(44,294);
                vertex(47,299);
                vertex(52,298);
                vertex(50,303);
                vertex(55,303);
                vertex(55,325);
                vertex(52,322);
                vertex(46,327);
                vertex(52,328);
                vertex(51,331);
                vertex(48,335);
                vertex(56,335);
                vertex(56,330);
                vertex(62,331);
                vertex(63,308);
                vertex(59,307);
                vertex(63,299);
                vertex(63,288);
                vertex(67,288);
                vertex(67,296);
                vertex(78,283);
                vertex(85,283);
                vertex(84,287);
                vertex(89,286);
                vertex(94,282);
                vertex(99,285);
                vertex(105,287);
                vertex(117,307);
                vertex(111,307);
                vertex(111,321);
                vertex(116,314);
                vertex(122,319);
                vertex(125,313);
                vertex(131,322);
                vertex(132,319);
                vertex(141,323);
                vertex(129,329);
                vertex(140,330);
                vertex(143,327);
                vertex(143,308);
                vertex(148,311);
                vertex(154,305);
                vertex(148,305);
                vertex(144,301);
                vertex(150,301);
                vertex(146,293);
                vertex(141,292);
                vertex(141,276);
                vertex(145,271);
                vertex(149,275);
                vertex(154,265);
                vertex(175,258);
                vertex(176,282);
                vertex(172,282);
                vertex(172,284);
                vertex(168,295);
                vertex(176,294);
                vertex(175,306);
                vertex(175,315);
                vertex(179,313);
                vertex(179,308);
                vertex(186,308);
                vertex(186,315);
                vertex(190,316);
                vertex(193,326);
                vertex(195,292);
                vertex(203,281);
                vertex(194,286);
                vertex(195,277);
                vertex(195,268);
                vertex(201,271);
                vertex(203,265);
                vertex(212,270);
                vertex(213,254);
                vertex(221,248);
                vertex(224,239);
                vertex(228,246);
                vertex(227,287);
                vertex(222,281);
                vertex(213,277);
                vertex(203,283);
                vertex(212,290);
                vertex(214,283);
                vertex(223,289);
                vertex(215,293);
                vertex(227,298);
                vertex(239,282);
                vertex(248,284);
                vertex(246,295);
                vertex(255,290);
                vertex(257,297);
                vertex(261,295);
                vertex(264,308);
                vertex(262,317);
                vertex(257,315);
                vertex(254,308);
                vertex(246,312);
                vertex(253,313);
                vertex(254,324);
                vertex(262,321);
                vertex(263,332);
                vertex(270,325);
                vertex(272,330);
                vertex(271,269);
                vertex(272,246);
                vertex(276,230);
                vertex(280,263);
                vertex(281,245);
                vertex(287,234);
                vertex(295,244);
                vertex(305,243);
                vertex(302,256);
                vertex(311,255);
                vertex(310,279);
                vertex(300,271);
                vertex(286,278);
                vertex(295,280);
                vertex(302,275);
                vertex(298,286);
                vertex(302,285);
                vertex(305,283);
                vertex(293,328);
                vertex(308,294);
                vertex(308,326);
                vertex(322,208);
                vertex(329,207);
                vertex(330,201);
                vertex(337,201);
                vertex(344,159);
                vertex(347,178);
                vertex(344,178);
                vertex(347,186);
                vertex(345,201);
                vertex(354,201);
                vertex(352,207);
                vertex(356,206);
                vertex(354,215);
                vertex(358,215);
                vertex(360,237);
                vertex(353,229);
                vertex(357,227);
                vertex(352,223);
                vertex(339,224);
                vertex(345,234);
                vertex(343,242);
                vertex(353,240);
                vertex(356,271);
                vertex(356,278);
                vertex(365,275);
                vertex(369,281);
                vertex(379,278);
                vertex(377,297);
                vertex(384,292);
                vertex(383,307);
                vertex(393,299);
                vertex(398,276);
                vertex(395,266);
                vertex(389,270);
                vertex(384,263);
                vertex(394,259);
                vertex(383,253);
                vertex(398,246);
                vertex(405,255);
                vertex(405,243);
                vertex(414,243);
                vertex(417,238);
                vertex(413,233);
                vertex(410,238);
                vertex(409,228);
                vertex(418,227);
                vertex(415,215);
                vertex(405,216);
                vertex(406,195);
                vertex(414,198);
                vertex(414,160);
                vertex(425,153);
                vertex(435,88);
                vertex(433,127);
                vertex(438,140);
                vertex(446,152);
                vertex(441,159);
                vertex(447,170);
                vertex(452,158);
                vertex(455,171);
                vertex(457,188);
                vertex(445,187);
                vertex(447,200);
                vertex(454,194);
                vertex(460,211);
                vertex(465,251);
                vertex(484,247);
                vertex(485,253);
                vertex(492,251);
                vertex(494,258);
                vertex(497,257);
                vertex(495,292);
                vertex(485,278);
                vertex(477,279);
                vertex(477,291);
                vertex(485,287);
                vertex(488,290);
                vertex(481,296);
                vertex(490,302);
                vertex(491,321);
                vertex(506,319);
                vertex(509,250);
                vertex(498,232);
                vertex(505,230);
                vertex(511,217);
                vertex(517,198);
                vertex(530,184);
                vertex(527,192);
                vertex(538,183);
                vertex(538,193);
                vertex(550,192);
                vertex(542,207);
                vertex(545,236);
                vertex(540,259);
                vertex(548,260);
                vertex(549,261);
                vertex(545,271);
                vertex(558,273);
                vertex(555,278);
                vertex(564,296);
                vertex(568,267);
                vertex(569,228);
                vertex(578,235);
                vertex(581,228);
                vertex(590,232);
                vertex(600,226);
                vertex(601,256);
                vertex(597,250);
                vertex(589,254);
                vertex(594,262);
                vertex(596,254);
                vertex(603,272);
                vertex(601,293);
                vertex(603,324);
                vertex(610,306);
                vertex(620,308);
                vertex(630,275);
                vertex(663,275);
                vertex(658,291);
                vertex(651,288);
                vertex(654,301);
                vertex(662,312);
                vertex(657,320);
                vertex(672,321);
                vertex(670,332);
                vertex(687,331);
                vertex(689,302);
                vertex(682,301);
                vertex(694,283);
                vertex(707,284);
                vertex(708,288);
                vertex(713,285);
                vertex(714,290);
                vertex(721,283);
                vertex(733,284);
                vertex(742,300);
                vertex(735,300);
                vertex(734,313);
                vertex(728,307);
                vertex(718,309);
                vertex(721,318);
                vertex(726,311);
                vertex(732,320);
                vertex(753,319);
                vertex(757,299);
                vertex(766,295);
                vertex(762,307);
                vertex(771,298);
                vertex(775,296);
                vertex(779,301);
                vertex(776,303);
                vertex(781,309);
                vertex(788,307);
                vertex(791,316);
                vertex(798,319);
                vertex(800,331);
                vertex(800,600);
                vertex(0,600);
                endShape(CLOSE);
                for(var i = 0; i < 150; i ++){
                    fill(0,255-i*2);
                    rect(0,400-i,800,1);
                }
                fill(0);
                rect(0,400,800,200);
                fill(0,150);
                rect(0,0,800,600);
                
                for(var i = 0; i < 100; i ++){
                    var x = random(0,800);
                    var y = random(100,400);
                    var s = random(50,100);
                    for(var j = 0; j < 3; j ++){
                        image(circ,x,y,s,s);
                    }
                    
                }
                var mask = get(0,0,800,600);
                
                background(50,0,0,50);
                var ruinedCity = get(0,0,800,600);
                
                if(ruinedCity){
                    ruinedCity.mask(mask);
                }
                
                background(255,0);
                image(ruinedCity,0,0);
            }
        },
        introBackdrop:{
            w:900/5,
            h:600/5,
            d:function(){
                function warp(i,j,am){
                    var n = noise((i + noise(i/am))/am, (j + noise(j/am))/am);
                    
                    var k = i *n;
                    var l = j *n;
                    var nn = noise((k + noise(i/am))/am, (l + noise(j/am))/am)/n;
                    
                    k = k*nn;
                    l = l*nn;
                    var nnn = noise((k + noise(i/am))/am, (l + noise(j/am))/am)/nn;
                
                    k = k * nnn + 10;
                    l = l * nnn + 10;
                    var nnnn = noise((k + noise(i/am))/am, (l + noise(j/am))/am)/nnn;
                    
                    return(nnnn);
                }
                background(84, 73, 62);
                noStroke();
                for(var i = 0; i < 900/5; i ++){
                    for(var j = 0; j < 600/5; j ++){
                        fill(warp(i-300,j,40)*15);
                        rect(i,j,1,1);
                    }
                }
            }
        },
        introHighlight:{
            w:400,
            h:400,
            d:function(){
                fill(200,3);
                noStroke();
                for(var i = 0; i < 400; i += 20){
                    ellipse(200,200,i,i);
                }
            }
        },
        skipButton:{
            w:100,
            h:50,
            d:function(){
                background(0);
                fill(255);
                noStroke();
                rect(0,10,60,30);
                triangle(58,0,58,50,90,25);
                fill(0);
                textFont(createFont('Noto Sans Bold'),30);
                textAlign(CENTER,CENTER);
                text('SKIP',37,25);
                var mask = get(0,0,100,50);
                
                noStroke();
                background(255);
                var c1 = color(255,230,230);
                var c2 = color(255,255,255);
                for(var i = 0; i < 90; i ++){
                    fill(lerpColor(c1,c2,i/90));
                    rect(i,0,1,50);
                }
                var img = get(0,0,100,50);
                
                if(img){
                    img.mask(mask);
                }
                background(0,0);
                image(img,0,0);
            }
        },
        houndFoot:{
            w:30,
            h:35,
            d:function(){
                background(255,0);
                noStroke();
                fill(250, 218, 242);
                beginShape();
                vertex(10,0);
                bezierVertex(10,10,7,20,2,25);
                bezierVertex(10,35,20,35,30,30);
                vertex(25,0);
                endShape();
                
                fill(122, 184, 107);
                triangle(3,25,0,33,6,27);
                triangle(7,28,3,35,11,33);
                
                noFill();
                stroke(250, 240, 208,30);
                strokeWeight(4);
                beginShape();
                vertex(11,0);
                bezierVertex(11,10,8,20,3,25);
                endShape();
                
                fill(0,30);
                noStroke();
                beginShape();
                vertex(20,0);
                bezierVertex(20,10,20,20,20,35);
                bezierVertex(20,35,20,35,30,30);
                vertex(25,0);
                endShape();
                
                stroke(0,50);
                strokeWeight(4);
                point(20,25);
                strokeWeight(2);
                line(12,22,20,5);
                line(22,12,20,20);
            }
        },
        houndCalf:{
            w:20,
            h:40,
            d:function(){
                background(255,0);
            noStroke();
            fill(243, 240, 245);
            rect(0,0,20,40,0,0,10,10);
            fill(250, 240, 208,30);
            rect(0,0,5,40);
            fill(0,30);
            rect(10,0,10,40);
            stroke(0,50);
            strokeWeight(3);
            line(5,25,10,15);
            line(10,35,15,15);
            strokeWeight(5);
            point(5,30);
            point(10,10);
            }
        },
        houndThigh:{
            w:30,
            h:40,
            d:function(){
                background(255,0);
                noStroke();
                fill(220, 250, 237);
                rect(0,0,20,40,10,0,10,10);
                beginShape();
                vertex(20,0);
                bezierVertex(30,0,30,15,20,35);
                endShape();
                fill(204, 176, 94,30);
                rect(0,0,5,40,10,0,0,10);
                fill(0,30);
                rect(10,0,10,40,0,0,10,0);
                beginShape();
                vertex(20,0);
                bezierVertex(30,0,30,15,20,35);
                endShape();
                stroke(0,50);
                strokeWeight(3);
                line(5,25,10,15);
                line(10,35,15,15);
                strokeWeight(5);
                point(5,30);
                point(10,10);
            }
        },
        houndFoot2:{
            w:30,
            h:35,
            d:function(){
                background(255,0);
                noStroke();
                fill(194, 161, 186);
                beginShape();
                vertex(10,0);
                bezierVertex(10,10,7,20,2,25);
                bezierVertex(10,35,20,35,30,30);
                vertex(25,0);
                endShape();
                
                fill(100, 158, 86);
                triangle(3,25,0,33,6,27);
                triangle(7,28,3,35,11,33);
                
                noFill();
                stroke(250, 240, 208,30);
                strokeWeight(4);
                beginShape();
                vertex(11,0);
                bezierVertex(11,10,8,20,3,25);
                endShape();
                
                fill(0,30);
                noStroke();
                beginShape();
                vertex(20,0);
                bezierVertex(20,10,20,20,20,35);
                bezierVertex(20,35,20,35,30,30);
                vertex(25,0);
                endShape();
                
                stroke(0,50);
                strokeWeight(4);
                point(20,25);
                strokeWeight(2);
                line(12,22,20,5);
                line(22,12,20,20);
            }
        },
        houndCalf2:{
            w:20,
            h:40,
            d:function(){
                background(255,0);
                noStroke();
                fill(200, 188, 207);
                rect(0,0,20,40,0,0,10,10);
                fill(250, 240, 208,30);
                rect(0,0,5,40);
                fill(0,30);
                rect(10,0,10,40);
                stroke(0,50);
                strokeWeight(3);
                line(5,25,10,15);
                line(10,35,15,15);
                strokeWeight(5);
                point(5,30);
                point(10,10);
            }
        },
        houndThigh2:{
            w:30,
            h:40,
            d:function(){
                background(255,0);
                noStroke();
                fill(181, 201, 192);
                rect(0,0,20,40,10,0,10,10);
                beginShape();
                vertex(20,0);
                bezierVertex(30,0,30,15,20,35);
                endShape();
                fill(204, 176, 94,30);
                rect(0,0,5,40,10,0,0,10);
                fill(0,30);
                rect(10,0,10,40,0,0,10,0);
                beginShape();
                vertex(20,0);
                bezierVertex(30,0,30,15,20,35);
                endShape();
                stroke(0,50);
                strokeWeight(3);
                line(5,25,10,15);
                line(10,35,15,15);
                strokeWeight(5);
                point(5,30);
                point(10,10);
            }
        },
        houndSpike:{
            w:20,
            h:30,
            d:function(){
                background(0,0);
                noStroke();
                fill(252, 250, 242);
                triangle(20,0,15,30,0,30);
                fill(217, 178, 217);
                beginShape();
                vertex(0,30);
                vertex(15,30);
                vertex(17,20);
                vertex(13,25);
                vertex(11,20);
                vertex(7,25);
                vertex(7,20);
                endShape();
            }
        },
        houndBody:{
            w:100,
            h:100,
            d:function(){
                noStroke();
                fill(255);
                background(0);
                beginShape();
                vertex(0,20);
                bezierVertex(30,10,50,30,60,34);
                bezierVertex(81,45,70,60,60,60);
                bezierVertex(50,60,30,70,0,60);
                endShape();
                var mask = get(0,0,100,100);
                
                background(207, 207, 207);
                var c2 = color(250, 218, 242);
                var c1 = color(220, 250, 237);
                strokeWeight(3);
                randomSeed(3);
                for(var i = 0; i < 60; i ++){
                    for(var j = 0; j < 4; j ++){
                        var x1 = random(i-5,i+5);
                        var x2 = x1 + random(5,10);
                        var y1 = random(15,70);
                        var y2 = y1 + random(-5,5);
                        var clr = lerpColor(c1,c2,i/60);
                        stroke(red(clr) + random(-15,15), green(clr) + random(-15,15), blue(clr) + random(-15,15));
                        line(x1,y1,x2,y2);
                    }
                }
                randomSeed(8);
                stroke(0,50);
                strokeWeight(2);
                line(5,36,20,31);
                line(5,25,25,25);
                line(26,40,40,45);
                line(42,35,55,40);
                line(40,50,50,50);
                line(14,50,25,50);
                strokeWeight(4);
                point(8,30);
                point(35,35);
                point(15,40);
                point(60,45);
                point(30,57);
                
                noFill();
                stroke(255,100);
                strokeWeight(6);
                beginShape();
                vertex(0,23);
                bezierVertex(30,13,50,33,60,37);
                endShape();
                
                fill(0,30);
                noStroke();
                quad(0,40,70,50,70,80,0,80);
                quad(0,50,70,55,70,80,0,80);
                
                var houndBody = get(0,0,100,100);

                if(houndBody){
                    houndBody.mask(mask);
                }
                
                background(255,0);
                image(houndBody,0,0);
            }
        },
        houndTopHead:{
            w:50,
            h:50,
            d:function(){
                background(0,0);
                noStroke();
                fill(255);
                triangle(7,21,17,25,15,32);
                fill(163, 44, 163,60);
                triangle(7,21,17,25,16,28);
                
                noStroke();
                fill(220, 250, 237);
                beginShape();
                vertex(40,25);
                bezierVertex(40,10,40,0,30,0);
                bezierVertex(27,0,23,3,20,10);
                bezierVertex(17,15,13,15,10,15);
                bezierVertex(8,15,5,20,5,20);
                bezierVertex(15,30,25,25,30,25);
                endShape();
                popMatrix();
                
                stroke(255,100);
                strokeWeight(4);
                noFill();
                beginShape();
                vertex(30,0);
                bezierVertex(27,2,23,5,20,12);
                bezierVertex(17,17,13,17,10,17);
                bezierVertex(8,17,5,22,8,21);
                endShape();
                
                stroke(50,0,50,50);
                strokeWeight(2);
                line(20,20,25,15);
                line(16,23,32,20);
                line(5,20,15,19);
                line(30,5,37,10);
                
                fill(20);
                noStroke();
                ellipse(24,11,6,6);
                ellipse(30,12,4,4);
                ellipse(10,17,3,2);
                
                fill(255,100);
                ellipse(23,10,3,3);
                ellipse(29,11,2,2);
            }
        },
        houndBottomHead:{
            w:50,
            h:50,
            d:function(){
                noStroke();
                fill(171,195,185);
                beginShape();
                vertex(5,20);
                bezierVertex(14,36,25,35,30,40);
                bezierVertex(40,30,40,30,40,20);
                endShape();
            }
        },  
        cat:{
            w:150,
            h:80,
            d:function(){
                strokeWeight(1);
                background(0);
                fill(255);
                beginShape();
                vertex(30,91);
                bezierVertex(35,72,40,72,55,71);
                bezierVertex(63,73,83,74,93,73);
                bezierVertex(115,72,116,73,136,82);
                vertex(150,110);
                vertex(78,110);
                bezierVertex(60,115,50,112,36,110);
                bezierVertex(30,105,30,97,30,91);
                
                endShape();
                var bodyMask = get(0,50,150,75);
                
                background(0);
                for(var i = -10; i < 160; i += 0.02){
                    stroke(255,random(4,8));
                    var y = random(0,75);
                    line(i,y,i+5,y + noise(i/50)*10-5);
                }
                for(var i = 0; i < 25; i ++){
                    fill(255,i*2);
                    rect(0,40-i,150,1);
                }
                var body = get(0,0,150,75);
                
                if(body){
                    body.mask(bodyMask);
                }
                pushMatrix();
                translate(-50,-75);
                fill(200);
                background(0);
                beginShape();
                vertex(64,80);
                vertex(54,83);
                bezierVertex(62,95,58,100,56,104);
                vertex(66,107);
                endShape();
                popMatrix();
                noStroke();
                for(var i = 0; i < 20; i ++){
                    fill(0,i*14);
                    rect(i,0,1,35);
                }
                var backlegmask = get(0,0,20,35);
                background(0);
                for(var i = -10; i < 20; i += 0.02){
                    stroke(0,random(10,25));
                    var y = random(0,35);
                    line(i,y,i+3,y + noise(i/50)*6-3);
                }
                var backleg = get(0,0,20,35);
                
                if(backleg){
                    backleg.mask(backlegmask);
                }
                 background(0);
                fill(255);
                pushMatrix();
                translate(-25,-90);
                beginShape();
                vertex(31,90);
                bezierVertex(27,113,51,120,46,144);
                bezierVertex(40,134,14,100,31,90);
                endShape();
                popMatrix();
                var tailmask = get(0,0,35,60);
                
                background(0);
                for(var i = -10; i < 40; i += 0.02){
                    stroke(255,random(4,8));
                    var y = random(0,60);
                    line(i,y,i+2,y + noise(i/50)*20);
                }
                fill(0,30);
                rect(0,0,35,60);
                var tail = get(0,0,35,60);
                if(tail){
                    tail.mask(tailmask);
                }
                pushMatrix();
                translate(-70,-90);
                background(0);
                fill(255);
                beginShape();
                vertex(90,110);
                bezierVertex(100,113,109,116,117,113);
                bezierVertex(130,110,135,110,155,110);
                bezierVertex(155,101,140,100,135,104);
                bezierVertex(125,96,115,101,108,103);
                endShape();
                
                for(var i = 0; i < 10; i ++){
                    stroke(200,255-i*25);
                    line(80-i,110-i,108-i,103-i);
                }
                popMatrix();
                var frontlegmask = get(0,0,100,30);
                
                background(0);
                for(var i = -10; i < 100; i += 0.04){
                    stroke(255,random(4,8));
                    var y = random(0,30);
                    line(i,y,i+5,y + noise(i/50)*10-5);
                }
                for(var i = 0; i < 15; i ++){
                    fill(255,i*4);
                    rect(0,15-i,100,1);
                }
                fill(255,20);
                rect(0,0,100,30);
                var frontleg = get(0,0,100,30);
                if(frontleg){
                    frontleg.mask(frontlegmask);
                }
                
                background(0);
                fill(255);
                pushMatrix();
                translate(-125,-75);
                beginShape();
                vertex(131,81);
                bezierVertex(141,76,151,70,161,86);
                bezierVertex(163,93,165,92,169,101);
                bezierVertex(165,110,160,110,125,110);
                endShape();
                popMatrix();
                var headMask = get(0,0,50,50);
                
                background(0);
                for(var i = -10; i < 60; i += 0.02){
                    stroke(255,random(4,8));
                    var y = random(0,50);
                    line(i,y,i+5,y + noise(i/50)*10-3);
                }
                for(var i = 0; i < 20; i ++){
                    fill(255,i*2);
                    rect(0,20-i,50,1);
                }
                fill(125, 98, 125);
                ellipse(42,26,4,5);
                stroke(150);
                noFill();
                arcs(35,15,10,6,0,180);
                noStroke();
                var head = get(0,0,50,50);
                
                if(head){
                    head.mask(headMask);
                }
                background(0);
                fill(255);
                pushMatrix();
                translate(-145,-65);
                beginShape();
                vertex(145,78);
                bezierVertex(160,62,158,70,157,83);
                endShape();
                popMatrix();
                var earmask = get(0,0,20,20);
                
                background(0);
                for(var i = -10; i < 30; i += 0.02){
                    stroke(255,random(4,8));
                    var y = random(0,55);
                    line(i,y,i+5,y + noise(i/50)*10-5);
                }
                var ear = get(0,0,20,20);
                
                if(ear){
                    ear.mask(earmask);
                }
                
                background(0);
                fill(255);
                pushMatrix();
                translate(-135,-70);
                beginShape();
                vertex(138,91);
                bezierVertex(132,68,147,74,150,85);
                endShape();
                popMatrix();
                var ear2mask = get(0,0,20,20);
                
                background(0);
                for(var i = -10; i < 30; i += 0.02){
                    stroke(255,random(4,8));
                    var y = random(0,75);
                    line(i,y,i+5,y + noise(i/50)*10-5);
                }
                noFill();
                stroke(0);
                strokeWeight(3);
                pushMatrix();
                translate(-135,-70);
                beginShape();
                vertex(138,91);
                bezierVertex(132,68,147,74,150,85);
                endShape();
                popMatrix();
                var ear2 = get(0,0,20,20);
                
                if(ear2){
                    ear2.mask(ear2mask);
                }
                
                background(255,0);
                pushMatrix();
                translate(-25,-65);
                
                
                image(tail,26,90);
                image(body,0,50);
                image(backleg,50,75);
                noStroke();
                fill(255,10);
                beginShape();
                vertex(54,83);
                bezierVertex(62,95,58,100,56,104);
                vertex(78,110);
                bezierVertex(60,115,50,112,36,110);
                bezierVertex(30,105,30,97,30,91);
                endShape();
                fill(255,15);
                beginShape();
                vertex(56,104);
                vertex(78,110);
                bezierVertex(60,115,50,112,36,110);
                endShape();
                image(ear,145,65);
                image(head,125,75);
                fill(71, 88, 135);
                beginShape();
                vertex(132,82);
                bezierVertex(127,90,127,100,135,110);
                vertex(138,110);
                bezierVertex(130,100,130,90,135,80);
                endShape();
                image(frontleg,70,90);
                image(ear2,135,70);
                popMatrix();
            }
        },
        apocalypseShop1:{
            w:800,
            h:600,
            d:function(){
                background(247,233,232);
                noFill();
                for(var i = 0; i < 65; i ++){
                    stroke(0,i/2-5);
                    arcs(47/2,20,i,i,0,359);
                }
                
                var paper = get(0,0,48,40);
                
                background(199,118,92);
                var off = 1010;
                for(var i = 0; i <= 620; i ++){
                	for(var j = 0; j < 15; j ++){
                		var n = noise((i+off)/50,(j+off)/70).toFixed(2);
                		if((n * 100)%2===0){
                		    stroke(0,20);
                			point(i,j);
                		}
                	}
                }
                var top = get(0,0,620,15);
                
                fill(194,105,78);
                rect(0,0,15,55);
                var off = 1010;
                for(var i = 0; i <= 15; i ++){
                	for(var j = 0; j < 55; j ++){
                		var n = noise((i+off)/50,(j+off)/70).toFixed(2);
                		if((n * 100)%2===0){
                		    stroke(0,20);
                			point(i,j);
                		}
                	}
                }
                var wood = get(0,0,15,55);
                
                
                background(255,0);
                noStroke();
                for(var i = 0; i <= 585; i += 65){
                    image(wood,i+100,0);
                    if(i < 585){
                        fill(153, 68, 44);
                        rect(i+115,0,3,55);
                        image(paper,i+117,15);
                    }
                    
                }
                for(var i = 0; i < 30; i ++){
                    fill(0,90-i*3);
                    rect(100,15+i,600,1);
                }
                
                image(top,90,0);
                
                fill(118,74,69);
                rect(90,55,620,5,5);
                fill(84, 44, 40);
                quad(92,60,708,60,700,70,100,70);
                for(var i = 0; i < 10; i ++){
                    fill(0,i*6);
                    rect(100,60+i,600,1);
                }
                fill(133, 87, 76);
                rect(100,70,600,20);
                fill(0,80);
                for(var i = 0; i < 600; i += 20){
                    rect(i+100,70,1,20);
                }
                for(var i = 100; i <= 700; i ++){
                	for(var j = 70; j < 90; j ++){
                		var n = noise((i+off)/50,(j+off)/70).toFixed(2);
                		if((n * 100)%2===0){
                		    stroke(0,20);
                			point(i,j);
                		}
                	}
                }
                stroke(0,50);
                strokeWeight(1);
                noFill();
                var crack = function(x,y){
                    
                    pushMatrix();
                    translate(x,y);
                    var k = 0;
                    var l = 0;
                    
                    beginShape();
                    for(var i = 0; i < random(10,35); i ++){
                        vertex(k,l);
                        k += random(-4,5);
                        l += random(-2,5);
                    }
                    endShape();
                    popMatrix();
                };  
                
                randomSeed(6);
                for(var i = 100; i < 700; i += random(5,10)){
                    crack(i,random(0,90));
                }
                                
                var roof = get(0,0,800,90);
                
                background(0);
                fill(255);
                rect(90,0,620,15,10);
                rect(100,0,600,90);
                quad(92,60,708,60,700,70,100,70);
                rect(90,55,620,5,5);
                fill(0);
                beginShape();
                vertex(800,0);
                for(var i = 800; i > 400; i -= random(5,15)){
                    vertex(i,random(-5,5));
                }
                vertex(400,0);
                vertex(0,0);
                randomSeed(15);
                for(var i = 100, y = random(70,90); i < 400; i += random(20,30)){
                    vertex(i,y);
                    y+= random(-20,5);
                }
                endShape();
                var mask = get(0,0,800,90);
                
                if(roof){
                    roof.mask(mask);
                }
                
                background(255,0);
                var pipe = function(x,y){
                    pushMatrix();
                    translate(x,y);
                    fill(125, 107, 115);
                    noStroke();
                    beginShape();
                    vertex(0,0);
                    for(var i = 0; i < 10; i +=2){
                        vertex(i,random(0,10));
                    }
                    vertex(10,100);
                    vertex(0,100);
                    endShape();
                    fill(255,50);
                    rect(0,0,2,100);
                    fill(0,30);
                    rect(5,5,5,95);
                    popMatrix();
                };
                randomSeed(7);
                for(var i = 0; i <= 200; i += 65){
                
                    pipe(104+i,random(10-i/9,30));
                }
                
                image(roof,0,0);
                var roof = get(0,0,800,90);
                
                background(255,0);
                
                for(var i = 0; i < 600; i += 50){
                    fill(153, 70, 87);
                    if(i% 100 === 0){
                        fill(143, 64, 71);    
                    }
                       
                    quad(i+100,90,i+151,90,map(i+50,0,600,51,751),170,map(i,0,600,50,750),170);
                }
                for(var i = 0; i < 700; i += 700/12){
                    fill(143, 60, 78);
                    if(floor(i%(700/6)) === 0 || floor(i%(700/6)) === floor(700/6)){
                        fill(128, 50, 58);    
                    }
                    rect(50+i,170,700/12+1,90);
                }
                var fabric = get(0,90,800,150);
                
                background(0);
                fill(255);
                quad(100,0,50,80,750,80,700,0);
                for(var i = 0; i < 700; i += 700/12){
                    rect(50+i,80,700/12+1,50);
                    arc(50+i + 700/24,130,700/12,30,0,180);
                }
                fill(0);
                randomSeed(59);
                for(var i = 50; i < 710; i += random(10,30)){
                    crack(i,random(0,150));
                    crack(i,random(100,150));
                }
                beginShape();
                vertex(0,150);
                for(var i = 0; i < 800; i += random(5,15)){
                    vertex(i,random(135,150));
                }
                vertex(800,150);
                endShape();
                
                    
                var mask = get(0,0,800,150);
                
                if(fabric){
                    fabric.mask(mask);
                }
                
                
                noStroke();
                background(240, 233, 226);
                for(var i = 0; i < 1000; i ++){
                    var s = random(20,30);
                    noStroke();
                    fill(0,2);
                    ellipse(random(0,600),random(0,300),s,s);
                }
                filter(BLUR,1);
                for(var i = 0; i < 600; i += 7){
                    noFill();
                    stroke(0,50);
                    crack(i,random(0,400));
                }
                for(var i = 0; i < 150; i ++){
                    noStroke();
                    fill(0,1);
                    rect(0,0,600,i);
                }
                var wall = get(0,0,600,400);
                
                background(0);
                fill(255);
                rect(0,0,600,400);
                fill(0);
                rect(46,130,368,211,15);
                
                var mask = get(0,0,600,400);
                
                if(wall){
                    wall.mask(mask);
                }
                
                noStroke();
                fill(194,105,78);
                rect(0,0,15,400);
                var off = 1010;
                for(var i = 0; i <= 15; i ++){
                	for(var j = 0; j < 400; j ++){
                		var n = noise((i+off)/50,(j+off)/70).toFixed(2);
                		if((n * 100)%2===0){
                		    stroke(0,20);
                			point(i,j);
                		}
                	}
                }
                var wood2 = get(0,0,15,400);
                
                background(0);
                noStroke();
                fill(100);
                rect(0,0,250,150,10);
                fill(150);
                textAlign(LEFT,CENTER);
                textFont(createFont("Noto Sans Bold"),30);
                text("SALE",25,100);
                textFont(createFont("Noto Sans"),10);
                text("Save up to 50%",25,120);
                fill(0);
                
                var broken = function(){
                    beginShape();
                    vertex(41,63);
                    vertex(47,80);
                    vertex(47,72);
                    vertex(55,78);
                    vertex(49,70);
                    vertex(49,70);
                    vertex(54,71);
                    vertex(54,66);
                    vertex(63,67);
                    vertex(54,62);
                    vertex(54,62);
                    vertex(54,57);
                    vertex(49,57);
                    vertex(43,47);
                    vertex(40,57);
                    vertex(35,57);
                    vertex(35,57);
                    vertex(38,61);
                    vertex(35,66);
                    endShape(CLOSE);
                    beginShape();
                    vertex(71,152);
                    vertex(56,138);
                    vertex(71,147);
                    vertex(66,141);
                    vertex(68,136);
                    vertex(62,132);
                    vertex(69,127);
                    vertex(75,128);
                    vertex(75,115);
                    vertex(79,121);
                    vertex(83,113);
                    vertex(85,124);
                    vertex(79,129);
                    vertex(92,125);
                    vertex(90,132);
                    vertex(95,132);
                    vertex(102,141);
                    vertex(100,150);
                    endShape(CLOSE);
                    
                    beginShape();
                    vertex(117,0);
                    vertex(126,15);
                    vertex(125,9);
                    vertex(130,15);
                    vertex(131,7);
                    vertex(133,9);
                    vertex(134,16);
                    vertex(126,22);
                    vertex(139,17);
                    vertex(139,19);
                    vertex(137,21);
                    vertex(144,22);
                    vertex(144,13);
                    vertex(152,20);
                    vertex(156,17);
                    vertex(152,15);
                    vertex(157,15);
                    vertex(163,10);
                    vertex(157,7);
                    vertex(159,4);
                    vertex(169,0);
                    endShape(CLOSE);
                    beginShape();
                    vertex(159,154);
                    vertex(167,135);
                    vertex(170,142);
                    vertex(175,137);
                    vertex(171,135);
                    vertex(180,131);
                    vertex(164,127);
                    vertex(174,112);
                    vertex(184,110);
                    vertex(188,103);
                    vertex(192,110);
                    vertex(197,108);
                    vertex(202,116);
                    vertex(207,104);
                    vertex(211,105);
                    vertex(215,117);
                    vertex(208,126);
                    vertex(218,118);
                    vertex(220,105);
                    vertex(227,109);
                    vertex(232,125);
                    vertex(235,119);
                    vertex(239,123);
                    vertex(236,129);
                    vertex(242,130);
                    vertex(241,136);
                    vertex(235,140);
                    vertex(245,152);
                    endShape(CLOSE);
                };
                broken();
                
                
                var mask = get(0,0,250,150);
                
                background(255,0);
                fill(187, 222, 240);
                rect(0,0,300,150);
                noFill();
                stroke(111, 137, 161);
                strokeWeight(2);
                broken();
                noStroke();
                for(var i = 0; i < 250; i ++){
                    fill(255,3);
                    ellipse(random(0,250),random(0,150),15,15);
                }
                stroke(111, 137, 161);
                noFill();
                strokeWeight(1);
                randomSeed(31);
                for(var i = 0; i < 10; i ++){
                    crack(random(0,250),random(0,150));
                }
                
                fill(255);
                textAlign(LEFT,CENTER);
                textFont(createFont("Noto Sans Bold"),30);
                text("SALE",25,100);
                textFont(createFont("Noto Sans"),10);
                text("Save up to 50%",25,120);
                stroke(0,10);
                noFill();
                for(var i = 1; i < 10; i ++){
                    strokeWeight(i);
                    rect(i/2,i/2,250-i,150-i,10);
                    
                }
                var window1 = get(0,0,250,150);
                
                if(window1){
                    window1.mask(mask);
                }
                background(0);
                fill(255);
                rect(67.5,0,100,200,50,50,0,0);
                var mask2 = get(0,0,200,300);
                
                background(125, 73, 30);
                stroke(102, 50, 24);
                strokeWeight(1);
                for(var i = 0; i < 200; i += 10){
                	line(i,0,i,300);
                }
                noFill();
                randomSeed(1);
                for(var i = 0; i < 40; i ++){
                    crack(random(0,200),random(0,300));
                }
                var door = get(0,0,200,300);
                if(door){
                	door.mask(mask2);
                }
                
                background(0);
                stroke(255);
                strokeWeight(30);
                fill(255);
                rect(70,15,95,170,100,100,0,0);
                var mask = get(0,0,200,300);
                
                background(199,118,92);
                var off = 1010;
                strokeWeight(1);
                for(var i = 0; i <= 200; i ++){
                    for(var j = 0; j < 300; j ++){
                        var n = noise((i+off)/50,(j+off)/70).toFixed(2);
                        if((n * 100)%2===0){
                            stroke(0,20);
                            point(i,j);
                        }
                    }
                }
                var doorBack = get(0,0,200,300);
                if(doorBack){
                    doorBack.mask(mask);
                }
                
                background(255,0,0);
                image(roof,0,0);
                
                
                fill(240, 233, 226);
                rect(100,90,600,100);
                fill(0,115);
                rect(100,90,600,100);
                image(wall,75,130,650,375);
                
                image(wood2,75,130,15,375);
                image(wood2,710,130,15,375);
                image(top,75,490,650,15);
                image(fabric,0,90);
                image(window1,124,250,400,200);
                image(doorBack,500,290,200,300);
                image(door,500,304,200,300);
                noStroke();
                fill(217, 180, 32);
                ellipse(645,405,15,15);
                fill(255,100);
                ellipse(646,402,9,7);

            }
        },
        streetSign:{
            w:100,
            h:300,
            d:function(){
                noStroke();
                fill(120, 103, 106);
                rect(45,0,10,300);
                for(var i = 0; i < 10; i ++){
                    var ci = cos(i*18) * 50;
                    if(ci > 0){
                        fill(255,abs(ci));
                    }
                    else{
                        fill(0,abs(ci));
                    }
                    rect(i+45,0,1,300);
                }
                fill(13,109,95);
                rect(0,0,100,20,4);
                stroke(230,230,240);
                strokeWeight(1);
                rect(2,2,95,15,2);
                noStroke();
                for(var i = 0; i < 100; i += 2){
                    fill(random(0,255),random(3,5));
                    ellipse(i,random(5,15),10,10);
                }
                textFont(createFont("Noto Sans"),13);
                textAlign(CENTER,CENTER);
                fill(230,230,240);
                text("Marion",50,10);
                textSize(10);
                text("Ave",85,11);
                text("Nw",15,11);
                
                fill(190,24,14);
                beginShape();
                for(var i = 45/2; i < 360; i += 45){
                    vertex(50+cos(i)*35,55+sin(i)*35);
                }
                endShape();
                
                noFill();
                stroke(230,230,240);
                strokeWeight(2);
                beginShape();
                for(var i = 45/2; i < 360; i += 45){
                    vertex(50+cos(i)*32,55+sin(i)*32);
                }
                endShape(CLOSE);
                pushMatrix();
                translate(50,55);
                scale(1,1.2);
                fill(230,230,240);
                textFont(createFont("Noto Sans Bold"),20);
                text("STOP",0,0);
                popMatrix();
                
                noStroke();
                for(var i = 0; i < 300; i ++){
                    var r = random(0,360);
                    var s = random(0,27);
                    fill(random(0,255),random(2,4)+s/10);
                    ellipse(50 + cos(r)*s,55+sin(r)*s,10,10);
                }
            }
        },
        streetLamp:{
            w:100,
            h:325,
            d:function(){
                background(0);
                noStroke();
                fill(255);
                rect(45,60,10,240);
                rect(30,270,40,30);
                rect(35,265,30,5);
                quad(37,265,63,265,57,220,43,220);
                rect(41,217,18,3,3);
                arc(50,60,20,25,0,180);
                rect(42,70,16,3,3);
                triangle(50,5,35,15,65,15);
                ellipse(50,5,5,5);
                var mask = get(0,0,100,300);
                
                background(77, 65, 77);
                function grad(x,y,w,h){
                    for(var i = 0; i < w; i ++){
                        var ci = cos(i/w*180) * 50;
                        if(ci > 0){
                            fill(255,abs(ci));
                        }
                        else{
                            fill(0,abs(ci));
                        }
                        rect(i+x,y,1,h);
                    }
                }
                function grad2(x,y,w,h){
                    noStroke();
                    for(var i = 0; i < h; i ++){
                        fill(0,map(i,0,h,50,0));
                        rect(x,y+i,w,1);
                    }
                }
                grad(35,0,30,15);
                grad(40,60,20,15);
                grad(45,75,10,142);
                grad(35,217,30,53);
                grad(30,270,40,30);
                grad2(0,73,100,10);
                grad2(0,60,100,15);
                grad2(0,220,100,10);
                var img = get(0,0,100,300);
                
                if(img){
                    img.mask(mask);
                }
                
                background(0);
                fill(100);
                stroke(255);
                strokeWeight(2);
                ellipse(50,35,40,57);
                noStroke();
                fill(180);
                ellipse(50,50,15,15);
                fill(0);
                rect(0,60,100,15);
                rect(0,0,100,15);
                var mask = get(0,0,100,75);
                
                background(222, 222, 151);
                for(var i = 0; i < 100; i ++){
                    fill(255,20);
                    ellipse(random(30,70),random(0,75),10,10);
                }
                fill(255);
                ellipse(40,50,15,15);
                for(var i = 0; i < 30; i ++){
                    fill(255,20);
                    ellipse(50,50,5+i*2,5+i*2);
                }
                stroke(77, 65, 77);
                strokeWeight(3);
                ellipse(50,35,40,57);
                var light = get(0,0,100,75);
                
                if(light){
                    light.mask(mask);
                }
                
                background(255,0);
                noStroke();
                for(var i = 0; i < 25; i ++){
                    fill(255,15);
                    ellipse(50,55,i*5,i*5);
                }
                image(img,0,25);
                image(light,0,25);
            }
        },
        streetLampBroken:{
            w:100,
            h:325,
            d:function(){
                var crack = function(x,y){
                    
                    pushMatrix();
                    translate(x,y);
                    var k = 0;
                    var l = 0;
                    
                    beginShape();
                    for(var i = 0; i < random(10,15); i ++){
                        vertex(k,l);
                        k += random(-4,5);
                        l += random(-2,5);
                    }
                    endShape();
                    popMatrix();
                };  
                
                background(0);
                noStroke();
                fill(255);
                rect(45,60,10,240);
                rect(30,270,40,30);
                rect(35,265,30,5);
                quad(37,265,63,265,57,220,43,220);
                rect(41,217,18,3,3);
                arc(50,60,20,25,0,180);
                rect(42,70,16,3,3);
                triangle(50,5,35,15,65,15);
                ellipse(50,5,5,5);
                var mask = get(0,0,100,300);
                
                background(77, 65, 77);
                function grad(x,y,w,h){
                    for(var i = 0; i < w; i ++){
                        var ci = cos(i/w*180) * 50;
                        if(ci > 0){
                            fill(255,abs(ci));
                        }
                        else{
                            fill(0,abs(ci));
                        }
                        rect(i+x,y,1,h);
                    }
                }
                function grad2(x,y,w,h){
                    noStroke();
                    for(var i = 0; i < h; i ++){
                        fill(0,map(i,0,h,50,0));
                        rect(x,y+i,w,1);
                    }
                }
                grad(35,0,30,15);
                grad(40,60,20,15);
                grad(45,75,10,142);
                grad(35,217,30,53);
                grad(30,270,40,30);
                grad2(0,73,100,10);
                grad2(0,60,100,15);
                grad2(0,220,100,10);
                noFill();
                stroke(0,100);
                strokeWeight(1);
                for(var i = 0; i < 30; i ++){
                    crack(random(0,100),random(0,300));
                }
                var img = get(0,0,100,300);
                
                if(img){
                    img.mask(mask);
                }
                
                background(0);
                fill(100);
                stroke(255);
                strokeWeight(2);
                ellipse(50,35,40,57);
                noStroke();
                fill(0);
                rect(0,60,100,15);
                rect(0,0,100,15);
                fill(140);
                ellipse(50,50,15,15);
                fill(0);
                stroke(160);
                strokeWeight(1);
                beginShape();
                vertex(42,24);
                vertex(47,18);
                vertex(48,24);
                vertex(53,23);
                vertex(50,28);
                vertex(53,30);
                vertex(49,39);
                vertex(44,31);
                vertex(36,28);
                endShape(CLOSE);
                randomSeed(21);
                noFill();
                for(var i = 0; i < 2; i ++){
                    crack(random(30,70),random(10,40));
                }
                var mask = get(0,0,100,75);
                
                noStroke();
                background(222, 222, 151);
                for(var i = 0; i < 100; i ++){
                    fill(255,20);
                    ellipse(random(30,70),random(0,75),10,10);
                }
                
                for(var i = 0; i < 30; i ++){
                    fill(255,20);
                    ellipse(50,50,5+i*2,5+i*2);
                }
                stroke(77, 65, 77);
                strokeWeight(3);
                noFill();
                ellipse(50,35,40,57);
                var light = get(0,0,100,75);
                
                if(light){
                    light.mask(mask);
                }
                
                background(255,0,0);
                noStroke();
                image(img,0,25);
                image(light,0,25);
            }
        },
        apocalypseShop2:{
            w:600,
            h:400,
            d:function(){
                background(0);
                fill(255);
                noStroke();
                beginShape();
                vertex(25,30);
                bezierVertex(200,30,200,0,300,0);
                bezierVertex(400,0,400,30,575,30);
                vertex(575,125);
                vertex(25,125);
                endShape();
                fill(0);
                beginShape();
                vertex(299,0);
                vertex(317,18);
                vertex(329,12);
                vertex(337,40);
                vertex(348,30);
                vertex(356,43);
                vertex(367,35);
                vertex(378,38);
                vertex(387,28);
                vertex(409,35);
                vertex(414,25);
                vertex(432,17);
                vertex(486,21);
                vertex(487,44);
                vertex(496,45);
                vertex(488,60);
                vertex(500,67);
                vertex(497,74);
                vertex(519,79);
                vertex(527,94);
                vertex(547,91);
                vertex(550,106);
                vertex(560,135);
                vertex(590,139);
                vertex(590,0);
                endShape(CLOSE);
                beginShape();
                vertex(17,50);
                vertex(32,69);
                vertex(42,62);
                vertex(61,65);
                vertex(63,57);
                vertex(86,44);
                vertex(89,48);
                vertex(115,16);
                vertex(18,18);
                endShape(CLOSE);
                var mask = get(0,0,600,125);
                
                background(0);
                fill(255);
                beginShape();
                vertex(40,45);
                bezierVertex(200,45,200,15,300,15);
                bezierVertex(400,15,400,45,560,45);
                vertex(560,115);
                vertex(40,115);
                endShape();
                var mask2 = get(0,0,600,125);
                
                background(224, 192, 162);
                noFill();
                stroke(0,50);
                strokeWeight(10);
                beginShape();
                vertex(42,47);
                bezierVertex(202,47,202,17,302,17);
                bezierVertex(402,17,402,47,562,47);
                vertex(563,118);
                vertex(42,118);
                endShape(CLOSE);
                filter(BLUR,2);
                textFont(createFont("Marcellus Bold"),50);
                fill(189, 59, 87);
                text("Marco's Macaroni",297,76);
                fill(0,70);
                textFont(createFont("Marcellus"),50);
                text("Marco's Macaroni",300,75);
                var img2 = get(0,0,600,125);
                
                if(img2){
                    img2.mask(mask2);
                }
                
                background(199,118,92);
                strokeWeight(1);
                var off = 1001;
                for(var i = 0; i <= 600; i ++){
                	for(var j = 0; j < 125; j ++){
                		var n = noise((i+off)/50,(j+off)/70).toFixed(2);
                		if((n * 100)%2===0){
                		    stroke(0,20);
                			point(i,j);
                		}
                	}
                }
                noStroke();
                image(img2,0,0);
                for(var i = 0; i < 200; i ++){
                    fill(0,5);
                    ellipse(random(0,600),random(0,125),20,20);
                }
                stroke(0,50);
                strokeWeight(1);
                noFill();
                var crack = function(x,y){
                    
                    pushMatrix();
                    translate(x,y);
                    var k = 0;
                    var l = 0;
                    
                    beginShape();
                    for(var i = 0; i < random(10,35); i ++){
                        vertex(k,l);
                        k += random(-4,5);
                        l += random(-2,5);
                    }
                    endShape();
                    popMatrix();
                };  
                
                randomSeed(6);
                for(var i = 0; i < 600; i += random(5,10)){
                    crack(i,random(0,100));
                }
                var img = get(0,0,600,125);
                
                if(img){
                    img.mask(mask);
                }
                background(255,0);
                var pipe = function(x,y){
                    pushMatrix();
                    translate(x,y);
                    fill(125, 107, 115);
                    noStroke();
                    beginShape();
                    vertex(0,0);
                    for(var i = 0; i < 10; i +=2){
                        vertex(i,random(0,10));
                    }
                    vertex(10,75);
                    vertex(0,75);
                    endShape();
                    fill(255,50);
                    rect(0,0,2,75);
                    fill(0,30);
                    rect(5,5,5,70);
                    popMatrix();
                };
                pipe(30,45);
                pipe(55,40);
                pipe(80,25);
                pipe(310,0);
                pipe(335,5);
                pipe(360,15);
                pipe(385,13);
                pipe(500,30);
                pipe(525,44);
                pipe(550,50);
                image(img,0,0);
                var img = get(0,0,600,125);
                
                background(255,0);
                for(var i = 0, num = 0; i < 525; i += 712/24, num ++){
                    fill(153, 70, 87);
                    if(num%2 === 0){
                        fill(143, 64, 71);     
                    }
                
                    quad(i+25,125,i+55,125,map(i+55,0,525,-10,535),150,map(i+25,0,525,-10,535),150);
                    rect(map(i+25,0,525,-10,535),150,32,25);
                }
                fill(0,30);
                rect(15,150,555,25);
                var fabric = get(0,0,600,175);
                
                background(0);
                fill(255);
                quad(25,125,560,125,570,150,15,150);
                
                for(var i = 0; i < 525; i += 712/24){
                    rect(map(i+24,0,525,-10,535),150,32,25,0,0,20,20);
                }
                fill(0);
                randomSeed(3);
                for(var i = 0; i < 20; i ++){
                    crack(random(0,600),random(120,150));
                }
                beginShape();
                vertex(0,180);
                for(var i = 0; i < 600; i += random(5,20)){
                    vertex(i,175 + random(-10,5));
                }
                vertex(600,180);
                endShape();
                var mask = get(0,0,600,175);
                
                if(fabric){
                    fabric.mask(mask);
                }
                
                noStroke();
                background(240, 233, 226);
                for(var i = 0; i < 1000; i ++){
                    var s = random(20,30);
                    noStroke();
                    fill(0,2);
                    ellipse(random(0,600),random(0,300),s,s);
                }
                filter(BLUR,1);
                for(var i = 0; i < 600; i += 7){
                    noFill();
                    stroke(0,50);
                    crack(i,random(0,400));
                }
                for(var i = 0; i < 150; i ++){
                    noStroke();
                    fill(0,1);
                    rect(0,0,600,i);
                }
                var wall = get(0,0,600,400);
                
                background(0);
                fill(255);
                rect(0,0,600,400);
                fill(0);
                rect(45,130,180,211,15);
                rect(600-50-180,130,180,211,15);
                var mask = get(0,0,600,400);
                
                if(wall){
                    wall.mask(mask);
                }
                
                background(0);
                fill(255);
                noStroke();
                rect(25,410,535,15);
                rect(25,125,15,300);
                rect(545,125,15,300);
                rect(242.5,250,95,170,100,100,0,0);
                var mask = get(0,125,600,325);
                
                
                background(199,118,92);
                var off = 1010;
                for(var i = 0; i <= 600; i ++){
                	for(var j = 0; j < 325; j ++){
                		var n = noise((i+off)/50,(j+off)/70).toFixed(2);
                		if((n * 100)%2===0){
                		    stroke(0,20);
                			point(i,j);
                		}
                	}
                }
                fill(0,30);
                rect(25,0,15,285);
                rect(545,0,15,285);
                var back = get(0,0,600,325);
                
                if(back){
                    back.mask(mask);
                }
                
                background(0);
                fill(255);
                rect(67.5,0,100,200,50,50,0,0);
                var mask2 = get(0,0,200,300);
                
                background(125, 73, 30);
                stroke(102, 50, 24);
                strokeWeight(1);
                for(var i = 0; i < 200; i += 10){
                	line(i,0,i,300);
                }
                noFill();
                randomSeed(1);
                for(var i = 0; i < 40; i ++){
                    crack(random(0,200),random(0,300));
                }
                var door = get(0,0,200,300);
                if(door){
                	door.mask(mask2);
                }
                
                background(0);
                noStroke();
                fill(100);
                rect(0,0,161,159,13);
                rect(355-65,0,161,159,13);
                fill(0);
                
                var broken = function(){
                    beginShape();
                    vertex(28,29);
                    vertex(34,22);
                    vertex(35,31);
                    vertex(41,23);
                    vertex(42,34);
                    vertex(52,31);
                    vertex(41,43);
                    vertex(32,44);
                    vertex(32,37);
                    vertex(21,39);
                    vertex(24,23);
                    endShape(CLOSE);
                    beginShape();
                    vertex(164,107);
                    vertex(133,90);
                    vertex(144,92);
                    vertex(143,87);
                    vertex(152,87);
                    vertex(146,72);
                    vertex(157,74);
                    vertex(156,86);
                    vertex(166,65);
                    endShape(CLOSE);
                    beginShape();
                    vertex(59,130);
                    vertex(50,122);
                    vertex(58,108);
                    vertex(71,115);
                    vertex(61,119);
                    vertex(70,122);
                    vertex(78,117);
                    vertex(80,131);
                    vertex(74,130);
                    vertex(73,140);
                    vertex(65,133);
                    vertex(53,140);
                    endShape(CLOSE);
                    
                    beginShape();
                    vertex(395,160);
                    vertex(403,136);
                    vertex(409,143);
                    vertex(405,145);
                    vertex(410,149);
                    vertex(415,146);
                    vertex(413,128);
                    vertex(428,136);
                    vertex(423,125);
                    vertex(436,117);
                    vertex(435,110);
                    vertex(445,113);
                    vertex(439,123);
                    vertex(444,123);
                    vertex(444,135);
                    vertex(461,126);
                    vertex(466,179);
                    vertex(379,178);
                    endShape(CLOSE);
                    beginShape();
                    vertex(337,33);
                    vertex(331,42);
                    vertex(342,46);
                    vertex(337,53);
                    vertex(329,48);
                    vertex(330,57);
                    vertex(322,53);
                    vertex(321,46);
                    vertex(313,56);
                    vertex(325,69);
                    vertex(331,61);
                    vertex(338,71);
                    vertex(347,61);
                    vertex(356,65);
                    vertex(355,52);
                    vertex(347,50);
                    vertex(353,43);
                    vertex(345,39);
                    vertex(346,25);
                    vertex(339,40);
                    endShape(CLOSE);
                    beginShape();
                    vertex(407,69);
                    vertex(415,52);
                    vertex(418,63);
                    vertex(425,53);
                    vertex(425,72);
                    vertex(433,65);
                    vertex(428,82);
                    vertex(420,75);
                    vertex(414,86);
                    vertex(410,76);
                    vertex(400,71);
                    endShape(CLOSE);
                };
                broken();
                
                
                var mask = get(0,0,600,160);
                
                background(255,0);
                fill(187, 222, 240);
                rect(0,0,161,159,15);
                rect(355-65,0,161,159,15);
                noFill();
                stroke(111, 137, 161);
                strokeWeight(2);
                broken();
                noStroke();
                for(var i = 0; i < 250; i ++){
                    fill(255,3);
                    ellipse(random(0,250),random(0,150),15,15);
                }
                stroke(111, 137, 161);
                noFill();
                strokeWeight(1);
                randomSeed(10);
                for(var i = 0; i < 30; i ++){
                    crack(random(0,600),random(0,150));
                }
                
                fill(255);
                stroke(0,10);
                noFill();
                for(var i = 1; i < 10; i ++){
                    strokeWeight(i);
                    rect(i/2,i/2,160-i,158-i,10);
                    rect(i/2+290,i/2,160-i,158-i,10);
                    
                }
                var window1 = get(0,0,600,160);
                
                if(window1){
                    window1.mask(mask);
                }
                
                background(255,0);
                image(img,0,0);
                image(wall,25,125,535,300);
                image(back,0,125);
                image(door,210,265,135,200);
                image(fabric,0,0);
                image(window1,65,222);
            }
        },
        
    }); 
})();

var Particle = (function(){
    
    /* 
        A leaf function 
        @function
        @params {number} x - x value,
        @params {number} y - y position
        @params {number} s - scale
        @params {number} r - rotation
    */
    function leaf(x,y,s,r){
        pushMatrix();
        translate(x,y);
        scale(s || random(0.2,0.25));
        
        beginShape();
        vertex(0,1);
        bezierVertex(15,1,27,5,30,31);
        bezierVertex(5,27,-1,22,0,1);
        endShape();
        
        popMatrix();
    } 
    
    /*
        Create a basic particle function
        @constructor
        @params {object} config - configuration
        @property {number} config.x - x position in pixels
        @property {number} config.y - y poisition in pixels
        @property {number} config.s - size (width and height) of particle
        @property {number} config.clr - color(r,g,b)
        @property {number} config.xv - x velocity in pixels for frame
        @property {number} config.yb - y velocity in pixels per frame
        @property {number} config.rotateSpeed - in degrees per frame
        @property {number} config.fadeSpeed - how quickly it fades away
        @property {number} config.fade - starting opacity
        @property {string} config.shape - "rect", "circle", "leaf", or "ellipse"
        @property {boolean} config.grav - should gravity impact the particle
    */
	var _Particle = function(config){
	    
	    //properties mostly defined above ^^^
	    this.x = config.x;
	    this.y = config.y;
	    
	    this.s = config.s;
	    
	    this.clr = config.clr;
	    
	    this.xv = config.xv;
	    this.yv = config.yv;
	    
	    this.r = random(0,360);
	    this.rotateSpeed = config.rotateSpeed;
	  
	    
	    this.fadeSpeed = config.fadeSpeed || 5;
	    this.fade = config.fade || 255;
	    
	    this.splicing = false;
	    
	    this.shape = config.shape || 'rect';
	    
	    this.grav = config.grav || false;
	};
	
	/* Render the particle*/
	_Particle.prototype.display = function(){
	   noStroke();
	    
        pushMatrix();   
        
        //transformations
        translate(this.x,this.y);
        rotate(this.r);
        
        //color
        fill(this.clr,this.fade);
        
        //pretty intuitive. Draw the correct shape
        switch(this.shape){
            case 'rect':
                rectMode(CENTER);
                rect(0,0,this.s,this.s);
                rectMode(CORNER);
            break;
            case 'circle':
            case 'ellipse':
                ellipse(0,0,this.s,this.s);    
            break;
            case 'leaf':
                leaf(0,0,this.s/30,0);
            break;
        }
        popMatrix();
        
        
	};
	
	/* Update the x and y positions, rotation*/
	_Particle.prototype.move = function(){
	    
	    //update x and y
	    this.x += this.xv;
	    this.y += this.yv;
	    
	    //update rotation
	    this.r += this.rotateSpeed;
	    
	    //gravity logic
	    if(this.grav){
	        this.yv += 0.1;
	    }
	    
	    //fade out the particle
	    this.fade -= this.fadeSpeed;
	    //this.speed -= 0.05;
	};
	return _Particle;
})();

var Trans = (function(){
    /*
        Transition functions, basic fade in and out
        @constructor
    */
    var _Trans = function(){
        //Is it running?
        this.running = false;
        
        //Scene to switch to
        this.to = null;
        
        //Misc function run on scene change.
        this.onChange = function(){};
        
        //Variable to control the transition
        this.opac = 0;
        this.state = 1;
    };
    
    /*
        Start the transition
        @params [string] scene - which scene to switch to
        @params [function] onChange - a misc. function to run on switch
    */
    _Trans.prototype.start = function(to,onChange){
        if(!this.running){
            this.to = to;
            this.running = true;
            this.onChange = onChange || function(){};
        }
    };
    
    /*
        End the transition
        Reset all variable etc.
    */
    _Trans.prototype.end = function(){
        this.running = false;
        this.opac = 0;
        this.state = 1;
        this.scl = 1;
    };
    
    /* Run on scene change */
    _Trans.prototype.change = function(){
        this.onChange();
        scene = this.to;
    };
    
    /*
        Put everything together
        Render the scene change
    */
    _Trans.prototype.run = function(){
        if(this.running){
            switch(this.state){
                //Fade out to black
                case 1:
                    this.opac = lerp(this.opac,256,0.1);
                    if(this.opac >= 255){
                        this.state = 2;
                        this.change();
                    }
                break;
                
                //Fade back in
                case 2:
                    this.opac = lerp(this.opac,-1,0.1);
                    
                    if(this.opac < 0){
                        this.end();
                    }
                break;
            }
        }  
        
        //Draw the transition
        fill(0,this.opac);
        rect(0,0,900,600);
    };
    
    //Create a new Transition
    return new_.call(_Trans);
})();

var Camera = (function(){
    
    /*
        A camera function
        @constructor
    */
    var cam = function(){
        this.x = 0;
        this.y = 0;
        this.lerpSpeed = 0.05;
        this.scale = 1;
        this.s = 1/6*9;
    };
    
    /* 
        literally just push and pop matrix lol. Where to start and stop the camera. Everything outside the two doesn't move with the player
    */
    
    cam.prototype.startLink = function(){
        pushMatrix();
    };
    cam.prototype.endLink = function(){
        popMatrix();
    };
    
    /* 
        @param {object} obj - The object to follow. Usually the Player. needs to have an x and y position.
    */
    cam.prototype.follow = function(obj){
        
        this.scl = this.scale * this.s;
        
        //lerp the object to the center of the screen
        this.x = lerp(this.x,width/2 - (obj.x + obj.w/2) * this.scl,this.lerpSpeed);
        this.y = lerp(this.y,height/2 - (obj.y + obj.h/2) * this.scl,this.lerpSpeed);
        
        //run the constrain method
        this.constrain();
        
        //transformations
        translate(~~this.x,~~this.y);
        scale(this.scl);
        
    };
    
    // update the scale. zoom in and out
    cam.prototype.setScale = function(scl){
        
        this.scale = lerp(this.scl,scl,this.lerpSpeed);
    };
    
    //shake the camera a bit
    cam.prototype.shake = function(){
        
        this.x += random(-2,2);
        this.y += random(-2,2);
    };
    
    //Constrain the camera so we only see stuff we're supposed to.
    cam.prototype.constrain = function(){
        this.x = constrain(this.x,-200*this.s,0);
        this.y = constrain(this.y,-200,0);
            
    };
    
    //return a new instance of the camera
    return (new_.call(cam));
})();

var Lightnings = (function(){
    /*
        Thunderbolts and lightning
        very very frightning
        me
        
        @author Queen ^^^ all rights reserved. IRS don't kill me
        
        @constructor
        @params {object} config - configuraton
        @property {number} config.x - x position
        @property {number} config.y - y position in pixels
        @property {number} config.clr - color(r,g,b)
        @property {number} config.opac - opacity of the bolt
    */
    
    var _Lightning = function(config){
        
        //The starting x and y coords
        this.startX = config.x;
        this.startY = config.y;
        
        //color
        this.clr = config.clr;
        
        //an array of all of the line segments constituting the bolt
        this.lines =  [];   
        
        //the number of segments to draw
        this.index = 0;
        
        //the number of times that it has split
        this.splits = 0;
        
        //run the .calc method
        this.calc();
        
        //opacity
        this.opac = config.opac || 0;
        
    };
    
    /* Create all of the line segments making up the bolt */
    _Lightning.prototype.calc = function(){
        
        /*
            so the this.lines is an array of arrays. 
            Each array inside has 2 points, (a line segment)
            like [x1, y1, x2, y2]
        */
        
        //start with one line
        this.lines.push([this.startX,this.startY,this.startX + random(-5,5),this.startY + random(20,40)]);
        
        //keep looping through the array until you've looped through all segments. Segments are added inside the loop, so .length keeps increasing
        for(var i = 0; i < this.lines.length; i ++){
            
            //the x and y of the previous segment
            var x = this.lines[i][2];
            var y = this.lines[i][3];
            
            //1 in 10 chance of splitting, and creating 2 line segments instead of the normal 1.
            var iter = 1;
            if(random() < 0.1 && this.splits < 2){
                iter = 2;
                this.splits ++;
            }
            
            //Stop when the y value is greater than the height
            if(y > 600){
                iter = 0;
            }
            
            //Push the new line segments onto the array
            for(var j = 0; j < iter; j ++){
                this.lines.push([x,y,x+ random(-50,50), y + random(20,40)]);
            }
        }
    };
    
    /*
        Draw a layer of the bolt. 
        @params {number} clr - color(r,g,b)
        @params {number} weight - the stroke weight, line thickness
    */
    _Lightning.prototype.drawLayer = function(clr,weight){
        
        //color and sweight
        stroke(clr);
        strokeWeight(weight);
        
        //loop through the array and draw the line segments
        for(var i = 0; i < constrain(this.index,0,this.lines.length); i ++){
            var l = this.lines[i];
            line(l[0],l[1],l[2],l[3]);
        }  
    };
    
    // Render the bolt 
    _Lightning.prototype.display = function(){
        
        //draw it
        fill(255,30+this.opac);
        rect(0,0,width,height);
        this.drawLayer(color(this.clr,50 + this.opac/5),15);
        this.drawLayer(color(this.clr,200 + this.opac),10);
        this.drawLayer(color(255, 255 + this.opac),3);
        
        //increase the number of segments drawn
        if(this.index < this.lines.length){
            this.index += 5;
        }
        
        //once all are drawn, fade it out nicely
        else{
            this.opac -= 10;
        }
    };
    
    /*
        The actual function that runs the Lightning bolts
        it's an array with additional properties
    */
    var _LightningSystem = [];
    
    //create new lightning bolts, adding them to the array
    _LightningSystem.add = function(config){
        this.push(new_.call(_Lightning,config));
    };
    
    //Run the bolts. two separate loops so we avoid splicing errors
    _LightningSystem.run = function(){
        //draw them
        for(var i = 0; i < this.length; i ++){
            this[i].display();
        }
        
        //remove them once they fade out
        for(var i = 0; i < this.length; i ++){
            if(this[i].opac > 255){
                this.splice(i,1);
            }
        }
    };
    
    return _LightningSystem;
})();

var Flower = (function(){
    /*
        A flower function. Moves in the 'wind' and when you collide with it
        @constructor
        @params [number] x - x position in pixels
        @params [number] y - y position in pixels
    */
    var _Flower = function(x,y){
        //Define x and y
        this.x = x;
        this.y = y+5;
        
        //Variables for animation
        this.xv = 0;
        this.x2 = this.x;
        this.am = 0;
        
        //Is the player colliding with it?
        this.collided = false;
        
        //Choose a flower image
        this.img = ['flower1','flower2','flower3','flower4'].pick();
    };
    
    /* Render the flower */
    _Flower.prototype.display = function(){
        
        //Draw the stem
        stroke(29, 120, 70);
        strokeWeight(2);
        line(this.x,this.y+20,this.x2+ cos(this.x-frameCount)*3,this.y);
        
        //Draw the flower
        pushMatrix();
        translate(this.x2 + cos(this.x-frameCount)*3,this.y);
        imageMode(CENTER);
        image(imgs[this.img],0,0,9,9);
        imageMode(CORNER);
        popMatrix();
    };
    
    /* Update the position of the flower */
    _Flower.prototype.update = function(){
        if(this.collided){
            this.x2 = lerp(this.x2,this.am,0.1);
        }
        else{
            this.x2 = lerp(this.x2,this.x,0.1); 
        }
        if(this.x2 > this.am - 0.5){
            this.collided = false;
            this.am = 0;
        }
    };
    
    /* 
        Check for collisions with something
        @params [object] obj - object to check coll
    */
    _Flower.prototype.collide = function(obj){
        if(Math.rectRect(this.x-5,this.y,10,20,obj.x,obj.y,obj.w,obj.h) && !this.collided){
            this.collided = true;
            this.am = this.x + obj.xv*2+obj.yv;
        }
    };
    return _Flower;
})();

var Torch = (function(){
    /*
        An animated torch graphic
        @constructor
        @params [object] config
        @property [number] config.x - x position in pixels
        @property [number] config.y - y position in pixels
    */
	var _Torch = function(config){
		this.x = config.x;
		this.y = config.y;
	};
	
	/*  Add particles to the fire effect */
	_Torch.prototype.add = function(){
		particles.push(new_.call(Particle,{
			x:this.x,
            y:this.y+2,
            xv:random(-0.5,0.5),
            yv:random(-1,-1.5),
            s:random(5,10),
            clr:color(200,random(60,150),20),
            fadeSpeed:random(10,12),
            fade:200,
            rotateSpeed:8,
		}));
		if(frameCount % 5 === 0){
			particles.push(new_.call(Particle,{
				x:this.x,
	            y:this.y+2,
	            xv:random(-0.5,0.5),
	            yv:random(-1,-1.5),
	            s:random(10,15),
	            clr:color(random(180,230)),
	            fadeSpeed:1.5,
	            fade:50,
	            shape:'circle',
	            rotateSpeed:8,
			}));
		}
	};
	
	/* Display the torch */
	_Torch.prototype.display = function(){
		image(imgs.torch,this.x-10,this.y);
		this.add();
	};
	return _Torch;
})();

var Clouds = (function(){
    /* 
        An animated cloud graphic 
        @constructor
        @params [number] x - starting x position
    */
    var _Cloud = function(x){
        
        //x and y position
        this.x = x || -200;
        this.y = random(0,200);
        
        
        //Scale size
        this.s = random(1,0.8);
        
        //how fast?
        this.speed = random(0.1,0.2);
        
        //Pick an image
        this.img = 'cloud1';
        if(random() < 0.5){
            this.img = 'cloud2';
        }
        
        // A random offset
        this.rand = random(0,360);
    };
    
    /* Update the clouds position*/
    _Cloud.prototype.update = function(){
        
        //Update x and y
        this.x += this.speed;
        if(sin){
            this.y += sin(frameCount+this.rand)/20;
        }
        
        //check for splicing
        if(this.x > 1000){
            this.splicing = true;
        }
        
    };
    
    /* Display the cloud image*/
    _Cloud.prototype.display = function(){
        pushMatrix();
        translate(this.x+ map(Camera.x,-200,0,0,45),this.y+map(Camera.y,-200,0,0,30));
        scale(this.s);
        image(imgs[this.img],0,0);
        popMatrix();
    };
    
    
    /*
        The Thunderhead. Controls and creates clouds
        @constructor
    */
    var _CloudSystem = function(){
        this.clouds = [];
        this.start();
    };
    
    /* Create a bunch of clouds right off the bat */
    _CloudSystem.prototype.start = function(){
        for(var i = 0; i < 5; i ++){
            this.clouds.push(new_.call(_Cloud,random(100,700)));
        }
    };
    
    /* Add new clouds to the array*/ 
    _CloudSystem.prototype.add = function(){
        if(frameCount % 800 === 0){
            this.clouds.push(new_.call(_Cloud));  
        }
    };
    
    /* Run and render all clouds */
    _CloudSystem.prototype.run = function(){
        this.clouds.sort(function (a, b) {
            return a.y - b.y;
        });
        for(var i = 0; i < this.clouds.length; i ++){
            this.clouds[i].update();
            this.clouds[i].display();
        }  
        for(var i = 0; i < this.clouds.length; i ++){
            if(this.clouds[i].splicing){
                this.clouds.splice(i,1);
            }
        }
        this.add();
    };
    
    //Create a new CloudSystem
    return new_.call(_CloudSystem);
})();

var World = (function(){
    /*
        A function to draw the lightbulbs
        
        @function
        @params [number] x - x position
        @params [number] y - y position
        @params [number] o - opacity of the light
    */
    var light = function(x,y,o){
        pushMatrix();
        translate(x,y);
        noStroke();
        strokeWeight(1);
        fill(72, 205, 212, o*8);
        stroke(109, 175, 219,255);
        ellipse(0,5,5,10);
        line(-2,0,0,7);
        line(2,0,0,7);
        popMatrix();
    };
    
    /*
        A function to draw a candle
        
        @function
        @params [number] x - x position
        @params [number] y - y position
    */
    var candle = function(x,y){
        pushMatrix();
        translate(x,y);
        scale(0.8);
        
        //Draw the light
        imageMode(CENTER);
        image(imgs.candleLight,3,5,50+cos(frameCount*2)*7,50+cos(frameCount*2)*7);
        imageMode(CORNER);
        
        //Draw the candle
        image(imgs.candle,0,5);
        
        //Draw the flame
        noStroke();
        fill(222, 173, 118);
        stroke(219, 116, 33,100);
        strokeWeight(1);
        beginShape();
        vertex(random(4,5),random(-1,1));
        bezierVertex(3-random(-1,1),1,1+random(-1,1),4+random(-1,1),4,9);
        bezierVertex(7+random(-1,1),2,5,4,5,1);
        endShape();
        
        popMatrix();
        
        //Add a particle effect
        if(frameCount % 10 === 0){
            particles.push(new_.call(Particle,{
                x:x/Camera.scale +random(2,4),
                y:y/Camera.scale +random(0,5),
                xv:random(-0.3,0.3),
                yv:random(-0.5,-1),
                s:random(1,3),
                clr:color(227, 135, 36),
                fadeSpeed:random(1,2),
                fade:100,
                rotateSpeed:0,
                shape:'circle',
            }));
        }
    };
    
    /*
        A function that animates an image, slanting it back and forth. 
        To be used like the normal `image` function
        
        @function
        @params {PImage} img - a PImage to animate
        @params {number} x 
        @params {number} y
        @params {number} w
        @params {number} h
        
    */
    function slantImage(img,x,y,w,h){
        // set default width and heights
        var W = img.width || w;
        var H = img.height || h;
        
        //make it work with varying amounts of parameters
        var am = 10;
        if(arguments.length === 4){
            am = w;
            W = img.width;
        }
        if(arguments.length === 5){
            W = w;
            H = h;
        }
        
        //How much it is being slanted at any given point
        var r = cos(x - frameCount+W/2)*am;
        
        //Transform and render the image
        pushMatrix();
        translate(x + W/2,y+H);
        scale(1.3,1);
        rotate(r);
        scale(1/1.3,1);
        rotate(-r);
        translate(-W/2,-H);
        fill(255,0,0);
        image(img,0,0,W,H);
        popMatrix();
    }
    
    /*
        So the following that is returned is an array of objects
        each corresponding to a a level.
        
        @example
        {
            backdrop:function(){
                //everything that is rendered in the far background
            },
            underWorld:function(){
                //images drawn underneath the player, but are directly behind it
            },
            overWorld:function(){
                //same as `underWorld, but drawn over the player
            },
            collision:{
                // an image with data on what the player will collide with.
                // color(255,0)       - no collision
                // color(255,255,255) - full collision
                // color(255,0,0)     - platform (bottom only) collision
            },
            flowers:[
                // flower objects to render
                new_.call(Flower, x, y),
            ],
            torches:[
                // torch objects to render
                new_.call(Torch, {x: x, y: y});
            ],
            interactions:[
                //doors to other levels mostly
                {
                    //To turn this interaction on and off
                    boolean:{boolean},
                    
                    //where the mouse needs to collide
                    hitbox:[x, y, w, h],
                    
                    onClick:function(){
                        //what happens when you click on it
                    }
                }
            ]
        },
    */
    return([
        {
            backdrop:function(){
                image(imgs.hills2,0,0);
            },
            underWorld:function(){
                slantImage(imgs.homeBackground,400,0,5);
                image(imgs.villageHouse1,25,120);
                slantImage(imgs.bush1,140,380,80,66);
                slantImage(imgs.bush2,200,350,66,100);
                candle(600,330);
                candle(612,335);
                if(frameCount % 10 === 0){
                    var clr = random(0,50);
                    particles.push(new_.call(Particle,{
                        x:random(550,700),
                        y:random(220,350),
                        xv:random(2,0.5),
                        yv:random(0,-1),
                        s:random(5,10),
                        clr:color(28, 138-clr, 96-clr),
                        fadeSpeed:random(0.5,1),
                        fade:200,
                        rotateSpeed:random(3,8),
                        shape:'leaf',
                    }));
                }
            },
            overWorld:function(){
                image(imgs.pot,120,390);
                image(imgs.homeForeground,0,0);
                
            },
            collision:function(){
                noStroke();
                background(255,0);
                fill(255);
                randomSeed(3);
                for(var  i = 0; i < 800; i += 10){
                    var yOff = sin((i+138)/3)*30;
                    ellipse(i,yOff+405,20,20);
                    
                }
            },
            flowers:[
                new_.call(Flower,100,400),
                new_.call(Flower,80,400),
                new_.call(Flower,130,375),
                new_.call(Flower,140,375),
                new_.call(Flower,650,342),  
                new_.call(Flower,630,342),      
            ],
            torches:[ 
                new_.call(Torch,{
                    x:260,
                    y:330,
                }),
                new_.call(Torch,{
                    x:380,
                    y:330,
                }),
            ],
            interactions:[
                {
                    boolean:true,
                    hitbox:[285,300,75,100],
                    onClick:function(){
                        Trans.start('play',function(){
                            level = 4;
                            Player.y = 150;
                        });
                    },
                },
            ],
        },
        {
            backdrop:function(){
                image(imgs.hills2,0,0);
            },
            underWorld:function(){
                image(imgs.villageHouse1,600,140);
                image(imgs.villageHouse2,100,0);
                
                for(var i = 0; i < 6; i ++){
                    var t = i/6;
                    var x = bezierPoint(510,551,571,620,t);
                    var y = bezierPoint(115,138,141,145,t) + 100;
                    
                    
                    light(x,y-100,cos(i*20000+frameCount*2)*10+10);
                    noStroke();
                    fill(149, 200, 240,cos(i*20000+frameCount*2)*6+6);
                    //ellipse(x,y-90,10,10);
                    ellipse(x,y-90,20,20);
                    ellipse(x,y-90,30,30);
                }
                
                slantImage(imgs.bush1,300,400,80,66);
                slantImage(imgs.bush2,0,330,66,100);
                
                particles.push(new_.call(Particle,{
                    x:150 +random(0,50),
                    y:45,
                    xv:random(-0.3,0.3),
                    yv:random(-0.5,-1),
                    s:random(6,10),
                    clr:color(50),
                    fadeSpeed:random(0.5,1),
                    fade:100,
                    rotateSpeed:0,
                    shape:'circle',
                }));
                
                //image(imgs.tavernSign,275,240);
            },
            overWorld:function(){
                image(imgs.pot,540,355);
                image(imgs.villageForeground,0,0);
                
            },
            collision:function(){
                noStroke();
                background(255,0);
                fill(255);
                randomSeed(3);
                for(var  i = 0; i < 800; i += random(5,10)){
                    var yOff = i<620?sin((i+100)/2):map(i,620,800,0,4);
                    ellipse(i,yOff*10+405,random(10,20),20);
                    
                }
                
                fill(255,0,0);
                rect(600,145,200,10);
                rect(100,120,380,10);
                
                fill(255,0,0);
                for(var i = 0; i < 100; i ++){
                    var t = i/100;
                    var x = bezierPoint(480,551,571,620,t);
                    var y = bezierPoint(115,138,141,145,t) + 100;
                    
                    ellipse(x,y-100,10,5);
                }
                triangle(450,120,200,110,200,120);
                rect(100,110,350,10);
            },
            flowers:[
                new_.call(Flower,550,345),
                new_.call(Flower,560,343),
                new_.call(Flower,100,380),
                new_.call(Flower,80,380),
                new_.call(Flower,650,378),    
            ],
            torches:[
                new_.call(Torch,{
                    x:245,
                    y:310,
                }),
                new_.call(Torch,{
                    x:370,
                    y:310,
                }),
			],
            interactions:[
                {
                    boolean:true,
                    hitbox:[275,280,65,100],
                    onClick:function(){
                        Trans.start('play',function(){
                            level = 6;
                            Player.y = 150;
                        });
                    },
                }
            ],
        },
        {
            backdrop:function(){
                image(imgs.hills1,0,0);
            },
            underWorld:function(){
                image(imgs.well,0,0);
                image(imgs.wire,0,0);
                
                for(var i = 0; i < 10; i ++){
                    var t = i/10;
                    var x = bezierPoint(600,468,300,200,t);
                    var y = bezierPoint(210,282,265,250,t);
                    
                    
                    light(x,y-100,cos(i*20000+frameCount*2)*10+10);
                    noStroke();
                    fill(149, 200, 240,cos(i*20000+frameCount*2)*6+6);
                    //ellipse(x,y-90,10,10);
                    ellipse(x,y-90,20,20);
                    ellipse(x,y-90,30,30);
                }
                image(imgs.rock1,615,300,150,150);
                image(imgs.villageHouse1,-200,140);
                
                
                slantImage(imgs.bush2,700,370,66,100);
                
                image(imgs.wellTree,200,0);
                
                slantImage(imgs.bush1,650,400,80,66);
                slantImage(imgs.bush1,-20,400,80,66);
                
                image(imgs.tavernSign,65,265);
                
                candle(600,385);
                candle(612,390);
            },
            overWorld:function(){
                image(imgs.pot,30,115);
                image(imgs.wellForeground,0,0);
                
            },
            collision:function(){
                noStroke();
                background(255,0);
                fill(255);
                randomSeed(3);
                for(var  i = 0; i < 800; i += random(5,10)){
                    var yOff = i<720?cos(i/2):1;
                    ellipse(i,yOff*50+405,random(10,20),20);
                    
                }
                
                
                fill(255,0,0);
                for(var i = 0; i < 100; i ++){
                    var t = i/100;
                    var x = bezierPoint(600,468,300,200,t);
                    var y = bezierPoint(210,282,265,250,t);
                    
                    ellipse(x,y-100,10,5);
                }
                
                stroke(255,0,0);
                strokeWeight(4);
                line(731,153,594,111);
                line(770,310,715,320);
                line(715,320,685,360);
                line(750,310,800,310);
                line(750,280,800,280);
                line(750,250,800,250);
                
                noStroke();
                rect(0,145,200,10);
                
                fill(255,0,0);
                rect(550,130,85,5);
            },
            flowers:[
                new_.call(Flower,200,363),
                new_.call(Flower,250,343),
                new_.call(Flower,500,353),
                new_.call(Flower,525,363),
                new_.call(Flower,50,105),
                new_.call(Flower,40,103),    
            ],
            torches:[
                new_.call(Torch,{
                    x:30,
                    y:350,
                }),
                new_.call(Torch,{
                    x:160,
                    y:350,
                }),
			],
            interactions:[
                {
                    boolean:true,
                    hitbox:[60,315,70,110],
                    onClick:function(){
                        Trans.start('play',function(){
                            level = 5;
                            Player.x = 310;
                            Player.y = 150;
                        })
                    },
                },
            ],
        },
        {
            backdrop:function(){
                image(imgs.hills1,0,0);
            },
            underWorld:function(){
                slantImage(imgs.wallBackground,25,50,5);
                
                
                pushMatrix();
                translate(0,285);
                rotate(-3);
                image(imgs.travellingWagon,0,0,250,187.5);
                popMatrix();
                
                candle(95,425);
                candle(110,432);
                
                //slantImage(imgs.bush1,100,400,80,66);
                //slantImage(imgs.bush2,150,370,66,100);
                image(imgs.wall,600,-50);
                if(frameCount % 10 === 0){
                    var clr = random(0,50);
                    particles.push(new_.call(Particle,{
                        x:random(250,350),
                        y:random(300,400),
                        xv:random(2,0.5),
                        yv:random(0,-1),
                        s:random(5,10),
                        clr:color(28, 138-clr, 96-clr),
                        fadeSpeed:random(0.5,1),
                        fade:200,
                        rotateSpeed:random(3,8),
                        shape:'leaf',
                    }));
                }
            },
            overWorld:function(){
                image(imgs.pot,450,383);
                image(imgs.wallForeground,0,50);
                
            },
            collision:function(){
                noStroke();
                background(255,0);
                fill(255);
                randomSeed(3);
                for(var  i = 0; i < 800; i += random(5,10)){
                    var yOff = cos((i+38)/3)*30;
                    ellipse(i,yOff+455,random(10,20),20);
                    
                }
                rect(600,-150,200,600);
            },
            flowers:[
                new_.call(Flower,180,427),
                new_.call(Flower,165,430),
                new_.call(Flower,250,417),
                new_.call(Flower,500,390),
                new_.call(Flower,460,370),
                new_.call(Flower,470,370),
            ],
            torches:[],
            interactions:[],
        },
        {
            scale:1/0.6,
            backdrop:function(){
                image(imgs.hills2,0,0);
            },
            underWorld:function(){
                pushMatrix();
                scale(0.6);
                image(imgs.insideHouse1,0,0); 
                image(imgs.window3,150,200);  
                image(imgs.window3,300,200); 
                
                image(imgs.bed,140,380);
                image(imgs.books,170,420,30,30);
                image(imgs.drawer,350,400);
                
                candle(425,410);
                candle(415,410);
                //image(imgs.candle,425,410);
                popMatrix();
               
            },
            overWorld:function(){
                pushMatrix();
                scale(0.6);
                image(imgs.insideHouseRoof,0,0);
                image(imgs.pot,630,420);
                popMatrix();
            },
            collision:function(){
                noStroke();
                background(255,0);
                fill(255);
                rect(0,270,600,10);
                rect(60,0,10,400);
                rect(408,0,10,400);
                rect(0,66,800,10);
            },
            flowers:[
                new_.call(Flower,386,236),
                new_.call(Flower,392,236),
            ],
            torches:[
                new_.call(Torch,{
                    x:162,
                    y:150,
                }),  
                new_.call(Torch,{
                    x:270,
                    y:175,
                }),
                new_.call(Torch,{
                    x:387,
                    y:175,
                }),
            ],
            interactions:[
                {
                    boolean:true,
                    hitbox:[500*0.6,250*0.6,100*0.6,200*0.6],
                    onClick:function(){
                        Trans.start('play',function(){
                            level = 0;
                            Player.y = 200;
                        });
                    },
                },    
            ],
        },
        {
            scale:1/0.6,
            backdrop:function(){
                image(imgs.hills2,0,0);
            },
            underWorld:function(){
                pushMatrix();
                scale(0.6);
                image(imgs.insideHouse3,0,0); 
                image(imgs.tavernMenu,160,200,160,110);
                
                popMatrix();
                npcs.Maya.pack();
                pushMatrix();
                scale(0.6);
                //image(imgs.window3,150,200);  
                //image(imgs.window3,300,200);
                image(imgs.bar,120,350);
                image(imgs.rootbeer,150,320);
                image(imgs.soup,210,324);
                image(imgs.water,320,326);
                image(imgs.barrel1,360,375);
                image(imgs.barrel2,425,400);
                
                candle(375,410);
                
                for(var i = 0; i < 4; i ++){
                    image(imgs.stool,125+i*60,375);
                }
                if(frameCount % 2 === 0){
                    particles.push(new_.call(Particle,{
                        x:random(210,230)*0.6,
                        y:330*0.6,
                        xv:random(-0.3,0.3),
                        yv:random(0,-0.5),
                        s:random(5,2),
                        clr:color(100),
                        fadeSpeed:random(0.5,1),
                        fade:50,
                        rotateSpeed:0,
                        shape:'circle',
                    }));
                }
                
                popMatrix();
               
            },
            overWorld:function(){
                pushMatrix();
                scale(0.6);
                image(imgs.insideHouseRoof,0,0);
                popMatrix();
            },
            collision:function(){
                noStroke();
                background(255,0);
                fill(255);
                rect(0,270,600,10);
                rect(60,0,10,400);
                rect(408,0,10,400);
                rect(0,66,800,10);
            },
            flowers:[],
            torches:[
                /*new_.call(Torch,{
                    x:162,
                    y:150,
                }),  
                new_.call(Torch,{
                    x:270,
                    y:175,
                }),
                */
                new_.call(Torch,{
                    x:387,
                    y:175,
                }),
                new_.call(Torch,{
                    x:270,
                    y:175,
                }),
            ],
            interactions:[
                {
                    boolean:true,
                    hitbox:[500*0.6,250*0.6,100*0.6,200*0.6],
                    onClick:function(){
                        Trans.start('play',function(){
                            level = 2;
                            Player.x = 50;
                            Player.y = 250;
                        });
                    },
                },    
            ],
        },
        {
            scale:1/0.6,
            backdrop:function(){
                image(imgs.hills1,0,0);
            },
            underWorld:function(){
                pushMatrix();
                scale(0.6);
                image(imgs.insideHouse2,0,0); 
                image(imgs.chimneyBackdrop,140,-50);
                image(imgs.notice,290,300,30,40);
                
                image(imgs.window3,525,200);
                image(imgs.barrel1,600,375);
                
                pushMatrix();
                translate(616,384);
                scale(-1,1);
                rotate(-20);
                image(imgs.shield1Front,0,0,12/0.6,45/0.6);
                popMatrix();
                
                popMatrix();
                
                for(var i = 0; i < 2; i ++){
                    particles.push(new_.call(Particle,{
                        x:random(150,270)*0.6,
                        y:400*0.6,
                        xv:0,
                        yv:random(0,-0.6),
                        s:random(10,15),
                        clr:color(200,random(0,130),20),
                        fadeSpeed:random(0.3,0.5),
                        fade:50,
                        rotateSpeed:0,
                        shape:'circle',
                    }));
                }
                
                
            },
            overWorld:function(){
                pushMatrix();
                scale(0.6);
                image(imgs.chimney,130,-50);
                image(imgs.buck,165,150,90,113);
                image(imgs.insideHouseRoof,0,0);
                image(imgs.anvil,220,400);
                candle(635,410);
                candle(290,410);
                popMatrix();
            },
            collision:function(){
                noStroke();
                background(255,0);
                fill(255);
                rect(0,270,600,10);
                rect(60,0,10,400);
                rect(408,0,10,400);
                rect(0,66,800,10);
            },
            flowers:[],
            torches:[],
            interactions:[
                {
                    boolean:true,
                    hitbox:[350*0.6,250*0.6,100*0.6,200*0.6],
                    onClick:function(){
                        Trans.start('play',function(){
                            level = 1;
                            Player.x = 300;
                            Player.y = 250;
                            particles = [];
                        });
                    },
                },   
            ],
        },
        {
            scale:1/0.6,
            backdrop:function(){
                image(imgs.hills1,0,0);
            },
            underWorld:function(){
                pushMatrix();
                scale(0.6);
                image(imgs.insideHouse2,0,0); 
                //image(imgs.window3,150,200);  
                //image(imgs.window3,300,200); 
                popMatrix();
               
            },
            overWorld:function(){
                pushMatrix();
                scale(0.6);
                image(imgs.insideHouseRoof,0,0);
                popMatrix();
            },
            collision:function(){
                noStroke();
                background(255,0);
                fill(255);
                rect(0,270,600,10);
                rect(60,0,10,400);
                rect(408,0,10,400);
                rect(0,66,800,10);
            },
            flowers:[],
            torches:[],
            interactions:[],
        },
    ]);
})();

var Cycles = (function(){
    /*
        A rain drop particle function.
        Can you tell me 'weather' or not this pun is bad?
        
        Fun fact: the "_" denotes a local constructor function
        You cannot access this Rain constructor outside of this scope
        
        @constructor
        @param {object} config
        @property {number} config.x - the starting x value in pixels
        @property {number} config.y - the starting y value in pixels
        @property {number} config.speed - how fast the raindrop is moving
    */
    var _Rain = function(config){
        //Set x and y positions
        this.x = config.x;
        this.y = config.y;
        
        //Calculate velocity
        this.speed = config.speed;
        
        this.xv = 1 * this.speed;
        this.yv = 5 * this.speed;
        
        //color 
        this.clr = color(68, 77, 148);
        
        //Should it be spliced
        this.splicing = false;
        
        //Should there be particles on splice
        this.splash = false;
    };
    
    /* Display the rain */
    _Rain.prototype.display = function(){
        stroke(this.clr, 150);
        strokeCap(ROUND);
        strokeWeight(2);
        line(this.x,this.y, this.x + this.xv * this.speed, this.y + 10 * this.speed);
    };
    
    /*  Move the rain, set it to the correct color based on day/night*/
    _Rain.prototype.update = function(obj){
        this.x += this.xv;
        this.y += this.yv;
        
        if(obj.time % 10000 < 5000){
            this.clr = lerpColor(this.clr, color(74, 85, 150), 0.1);
        }
        else{
            this.clr = lerpColor(this.clr,color(124, 124, 214), 0.1);
        }
    };
    
    /*
        Check if there is collision with the ground
        Check if the drop leaves the map
        @throws - an error if the raindrop can't check for collision
    */
    _Rain.prototype.checkColl = function(){
        if(this.x <= 1 || this.x >= 898 || this.y >= 599){
            this.splicing = true;
        }
        else if(this.y > 5){
            try{
                if(World[level].arr[~~(this.x/2)][~~(this.y/2)] === 1){
                    this.splicing = true;
                    this.splash = true;
                }
            }
            catch(e){
                this.splicing = true;
            }
        }
    };
    
    /* Function run on splicing*/
    _Rain.prototype.terminate = function(){
        
        //push a bunch of particles
        for(var i = 0; i < random(2,5); i ++){
            particles.push(new_.call(Particle, {
                x:this.x,
                y:this.y - 10,
                xv:random(-1,1),
                yv:random(-1,-2),
                grav:true,
                clr:color(68, 77, 148),
                shape:"circle",
                s:random(2,4),
                fade:100,
                fadeSpeed:2
            }));     
        }
    };
    
    
    /*
        Called a cycle due to its synasoidal (mispelled) nature
        Basically stuff like Time, and Weather in one convenient location
        @constructor
    */
    var _Cycles = function(){
        //How many frames have passed
        this.time = 0;
        
        //Opacity
        this.opac = 255;
        this.opac2 = 0;
        
        //Is it raining?
        this.raining = false;
        
        //Array of rain drops
        this.rain = [];
    };
    
    /*
        Run the day/night cycle
        Basically its just time
    */
    _Cycles.prototype.dayNight = function(){
        
        //Draw the night background
        image(imgs.stars2,0,0);
        
        //Half the time, it is day
        if(this.time % 10000 <= 5000){
            this.opac += 0.255;
        }
        
        //The other half is night
        else{
            this.opac -= 0.255;
        }
        
        this.opac = constrain(this.opac,0,255);
        
        /*
            Draw day on top of the night
            But only half the time
        */
        fill(91, 128, 150,this.opac);
        rect(0,0,width,height);
        
        image(imgs.daylight,0,0);
    };
    
    /*
        Control the weather.
        Two states, raining and not raining
    */
    _Cycles.prototype.weather = function(){
        
        //Create new rain
        if(this.raining){
            this.rain.push(new_.call(_Rain,{
                x:random(-200,900),
                y:0,
                speed:random(0.8,1.2),
            }));
        }
        
        // render the rain
        for(var i = 0; i < this.rain.length; i ++){
            var rain = this.rain[i];
            rain.update(this);
            rain.checkColl();
            rain.display();
        }
        
        //Check for splicing
        for(var i = 0; i < this.rain.length; i ++){
            if(this.rain[i].splicing){
                if(this.rain[i].splash){
                    this.rain[i].terminate();
                }
                this.rain.splice(i,1);
                
            }
        }
        
        /*
            Decide when it should be raining,
            and when it shouldn't be raining
            
            14421 is just a random number, basically the cycle repeats 
            every that many frames, so it doesn't line up with day/night
        */
        if(this.time % 14421 <= 1000){
            this.raining = true;
        }
        else{
            this.raining = false;
        }
    };
    
    /* 
        Tint everything based on time and whether
        For example, everything is bluer/darker at night
    */
    _Cycles.prototype.overlay = function(){
        //Increase time
        this.time ++;
        
        //Draw the overlay for time
        noStroke();
        fill(0,0,50,(255-this.opac)/8);
        rect(0,0,width,height);
        
        //Draw the overlay for weather
        fill(100,100,120,this.opac2);
        rect(0,0,width,height);
        
        //Logic for the opacity of each overlay
        if(this.raining){
            this.opac2 = lerp(this.opac2,50,0.1);
        }
        else{
            this.opac2 = lerp(this.opac2,0,0.1);
        }
        
        
    };
    
    //Create a new Cycle
    return new_.call(_Cycles);
})();

var Bullet = (function(){
    /*
        The lightning bolt shot from the sword (don't question)
        @constructor
        @params {object} config - configuration
        @property {number} config.x - starting x value in pixels
        @property {number} config.y - starting y value  "   "
        @property {number} config.r - rotational vector in degrees
        @property {object} config.from - the object that shot it
    */
    var _Bullet = function(config){
        //x and y positions
        this.x = config.x;
        this.y = config.y;
        
        //polar coordinate vector
        this.r = config.r;
        
        //turn it into cartesian velocity
        this.xv = cos(this.r)*8;
        this.yv = sin(this.r)*8;
        
        //How many vertexes to draw
        this.length = 0;
        
        //which object fired it. So you don't collide with your bullets
        this.from = config.from;
    };
    
    // Draw a single layer of the bullet
    _Bullet.prototype.bolt = function(){
        beginShape();
        for(var i = 0; i < this.length; i ++){
            vertex(this.x + i * this.xv + cos((i+frameCount)*100)*2, this.y + i * this.yv + cos((i + frameCount)*200)*2);
        }  
        endShape();  
    };
    
    /*
        Display the entire bullet
        Multiple layers drawn for glow effect
    */
    _Bullet.prototype.display = function(){
        noFill();
        
        strokeWeight(12);
        stroke(28, 143, 189,50);
        this.bolt();
        
        strokeWeight(8);
        this.bolt();
        
        strokeWeight(4);
        this.bolt();
        
        strokeWeight(2);
        stroke(240, 253, 255);
        this.bolt();
        
    };
    
    /*
        Check for rectangle collision with an entity
        
        @params {number} x - The top left x coord of the rectangle
        @params {number} y - the top left y coord of the rectangle
        @params {number} w - width of the rectangle
        @params {number} h - height of the rectangle
        
        @returns {boolean} - whether or not there is collision
    */
    _Bullet.prototype.checkRectColl = function(x,y,w,h){
        var coll = false;
        
        for(var i = 0; i < this.length; i ++){
            var px = this.x + this.xv * i;
            var py = this.y + this.yv * i;
            
            if(px > x && px < x + w && py > y && py < y + h){
                coll = true;
                i = this.length;
                this.splicing = true;
                break;
            }
        }
        return coll;
    };
    
    /*
        Increase how many segments are drawn,
        move the bullet according to velocity.
    */
    _Bullet.prototype.update = function(){
        /* 
            Max of 8 segments. That way it can grow or shrink
            and it doesn't look like it came from nowhere
        */
        if(this.length < 8 && !this.splicing){
            this.length ++;
        }
        
        /*
            Update x and y
        */
        else{
            this.x += this.xv;
            this.y += this.yv;
        }
    };  
    return _Bullet;
})();

var Missions = (function(){
    /*
        The mission constructor function
        @constructor
        @params [object] config
        @property [string] config.txt - Description of what to do
        @property [function] config.check - check if the mission is complete and return whether or not it is true
        
    */  
    var _Mission = function(config){
        //Description
        this.txt = config.txt;
        
        //A function to determine if the mission is complete. 
        this.check = config.check;
        
        //Opacities
        this.opac = 0;
        this.opac2 = 0;
        
        //Y value of the mission icon
        this.y = 0;
        
        //Which animations to run
        this.state = 1;
        this.completed = false;
        
        //Should we .splice it?
        this.splicing = false;
    };
    
    /* Display the mission icon */
    _Mission.prototype.display = function(){
        
        //A rect check box
        noFill();
        strokeWeight(2);
        stroke(0,this.opac/5);
        rect(0,2,20,20,5);
        stroke(255,this.opac);
        rect(0,0,20,20,5);
        
        //The description
        fill(0,this.opac/5);
        textAlign(LEFT,CENTER);
        textFont(createFont('Noto Sans'),15);
        text(this.txt,30,12);
        fill(255,this.opac);
        text(this.txt,30,10);
        textAlign(CENTER,CENTER);
        
        //The checkmark
        noFill();
        stroke(255,this.opac2);
        beginShape();
        vertex(5,5);
        vertex(10,15);
        vertex(30,0);
        endShape();
        beginShape();
        vertex(5,5);
        vertex(10,13);
        vertex(30,0);
        endShape();
    };
    
    /* Update the animation */
    _Mission.prototype.update = function(){
        if(!this.completed){
            this.opac = lerp(this.opac,255,0.1);
        }  
        else if(this.state === 1){
            this.opac2 = lerp(this.opac2,255.1,0.1);
            if(this.opac2 > 255){
                this.state = 2;
            }
        }
        else if(this.state === 2){
            this.opac = lerp(this.opac,0,0.1);
            this.opac2 = lerp(this.opac,0,0.1);
            
            if(this.opac2 <= 1){
                this.splicing = true;
            }
        }
        
    };

    /* 
        An array of missions with properties to run them
        @array
    */
    var _MissionSystem = [];
    
    /* 
        Create a new mission
        @params [object] config - the config passed into the Mission. See above for more details
    */
    _MissionSystem.add = function(config){
        this.push(new_.call(_Mission,config));
    };
    
    /* Display all mission */
    _MissionSystem.display = function(){
        for(var i = 0; i < this.length; i ++){
            pushMatrix();
            translate(600,this[i].y);
            this[i].display();
            popMatrix();
            
            this[i].y = lerp(this[i].y, (this.length-i)*30 + 20,0.1);
        }
        
        if(this.length !== 0){
            fill(0,50);
            textAlign(LEFT,CENTER);
            textFont(createFont('Marcellus Bold'),25);
            text('Missions',600,-8 + min(this[this.length-1].y,30));
            fill(255);
            text('Missions',600,-10 + min(this[this.length-1].y,30));
            textAlign(CENTER,CENTER);
        }
    };
    
    /* Check for mission completion and splicing */
    _MissionSystem.update = function(){
        for(var i = 0; i < this.length; i ++){
            this[i].update();
            if(this[i].check() && !this[i].completed){
                this[i].completed = true;
            }
            if(this[i].splicing){
                this.splice(i,1);
            }
        }
    };
    
    /* Put it all together */
    _MissionSystem.run = function(){
        this.update();
        this.display();
    };
    return _MissionSystem;
})();

var Conversation = (function(){
    /* 
        If the opposite of talkative is anti-social-ist,
        does that mean that the right is introverted?
         
        Not trying to be politcal ^^^, just a bad pun. Dont flag me. 
        
        The conversation function
        @constructor 
        @params [object] texts - in the following format
            
            [
                {
                    message:'Text',         //Message that the person say
                    options:[               //Array of responses
                        {  
                            response:'Text',//One thing that you can say
                            toInd:10,        
                                            //What is the next thing that 
                                            //they say? An index in the array
                                            //Make it larger than the array.length
                                            //To end the conversation
                        },
                    ],
                },
            ],
        @params [object] obj - Display the thing that is talking
        
    */
    var _Conversation = function(texts,obj){
        this.text = 0;
        this.texts = texts;  
        
        this.toY = 450;
        this.y = 700;
        
        this.ind = 0;
        
        this.obj = obj;
    };
    
    /* Talk to you. Run basically everything */
    _Conversation.prototype.talk = function(){
        
        var txt = this.texts[this.text];
        
        this.y = lerp(this.y,this.toY,0.1);
        image(imgs.convo,0,this.y,900,imgs.convo.height);
        
        pushMatrix();
        translate(100,600);
        scale(cos(frameCount*2)*0.2+0.9);
        translate(-100,-600);
        image(imgs.talkerBackground,0,this.y-150,150,300);
        popMatrix();
    
        pushMatrix();
        
        scale(2);
        if(this.obj.facing === -1){
            translate(this.obj.x+this.obj.w/2,0);
            scale(-1,1);
            translate(-this.obj.w/2,-this.obj.y);
            translate(-50/2,this.y/2+80-this.obj.h);
        }
        else{
            translate(-this.obj.x+50/2,-this.obj.y+this.y/2+80-this.obj.h);
        }
    
        
        this.obj.display();
        popMatrix();
        
        fill(0,200);
        //rect(25,this.y+100,75,35);
        
        fill(255);
        textFont(createFont('Noto Sans Bold'),22);
        text(this.obj.name,50+75/2,this.y+100+35/2);
        
        fill(200);
        textAlign(LEFT,TOP);
        textFont(createFont('Noto Sans'),20);
        text(txt.message.substring(0,this.ind),225,this.y+60,450,100);
        textAlign(CENTER,CENTER);
        
        
        
        textFont(createFont('Noto Sans Bold'),22);
        for(var i = 0; i < txt.options.length; i ++){
            if(txt.options[i].x === undefined){
                txt.options[i].x = 0;
                txt.options[i].opac = -(txt.options.length-i)*50;
            }
            fill(0,txt.options[i].opac);
            //text(txt.options[i].response,302+txt.options[i].x,this.y-i*25+1);
            fill(255,txt.options[i].opac);
            text(txt.options[i].response,450+txt.options[i].x,this.y-i*25);
            if(txt.options[i].opac >= 150 && this.ind > txt.options.length){
                if(Math.mouseRect(0,this.y-i*25-10,600,25)){
                    txt.options[i].x = lerp(txt.options[i].x,10,0.1);
                    txt.options[i].opac = lerp(txt.options[i].opac,255,0.1);
                    
                    //click
                    if(click){
                        
                        if(txt.options[i].toInd >= this.texts.length){
                            this.toY = 700;
                            if(txt.options[i].onEnd !== undefined){
                                txt.options[i].onEnd();
                            }
                            
                        }
                        else{
                            this.text = txt.options[i].toInd;
                            this.ind = 0;
                        }
                    }
                }
                else {
                    txt.options[i].x = lerp(txt.options[i].x,0,0.1);
                    txt.options[i].opac = lerp(txt.options[i].opac,150,0.1);
                }
            }
        }
        if(round(this.y) === this.toY && frameCount % 2 === 0 && this.toY < 600){
            this.ind ++;
            if(this.ind >= txt.message.length-1){
                for(var i = 0; i < txt.options.length; i ++){
                    if(txt.options[i].opac < 150){
                        txt.options[i].opac += 10;
                    }
                }
            }
        }
        if(this.y >= 600){
            for(var i = 0; i < txt.options.length; i ++){
                txt.options[i].opac = -(txt.options.length-i)*50;
            }
            if(this.y >= 699){
                this.obj.talking = false;
                this.ind = 0;
                this.obj.wantsToTalk = false;
            }
        }
        if(frameCount % 1 === 0){
            particles.push(new_.call(Particle,{
                x:random(0,800),
                y:random(this.y+50,this.y+150),
                xv:random(-1,1),
                yv:random(0,-1.5),
                s:random(5,15),
                clr:color(0),
                fadeSpeed:random(1,2),
                fade:random(150,200),
                rotateSpeed:0,
                shape:'circle',
            }));
            /*particles.push(new_.call(Particle,{
                x:random(25,125)-Camera.x,
                y:this.y+160,
                xv:random(-0.5,0.5),
                yv:random(0,-1.5),
                s:random(5,15),
                clr:color(150),
                fadeSpeed:random(1,2),
                fade:200,
                rotateSpeed:random(5,8),
                shape:'rect',
            }));*/
        }
        
    };
    return _Conversation;
})();

var Inventory = (function(){
    /*
        Your inventory of items
        @constructor
    */
    var _Inventory = function(){
        //array to store Items
        this.items = [];
        
        //Is it open
        this.isOpen = false;
        
        //Variables used for when it is open
        this.w = 0;
        this.toW = 0;
        
        //Variables controlling lid
        this.y = 0;
        this.yv = 0.15;
        this.acc = 0.01;
        
        this.scale = 1;
    };
    
    /* Display the inventory*/
    _Inventory.prototype.display = function(){
        
        //Draw the items
        fill(255,50);
        stroke(255,100);
        strokeWeight(1);
        rect(160,439,this.w,100,0,10,10,0);
        var w = this.w/this.items.length;
        for(var i = 0; i < this.items.length; i ++){
            this.items[i].inInventory(i*w+w+75,441);
        }
        
        //Draw the chest
        noStroke();
        pushMatrix();
        translate(75,450);
        translate(75/2,75/2);
        scale(this.scale);
        scale(4/3);
        pushMatrix();
        scale(1+cos(frameCount*2)*0.1);
        imageMode(CENTER);
        image(imgs.chestBackdrop,0,0);
        imageMode(CORNER);
        popMatrix();
        translate(-75/2,-75/2);
        
        image(imgs.chestLidOpen,0,~~this.y,75,max(~~25.1-~~this.y,0.1));
        image(imgs.chestLidShadow,0,0);
        if(this.y < 24){
            for(var i = 0; i < 360; i += 30){
                pushMatrix();
                translate(75/2,75/2);
                rotate(i+frameCount);
                var h = cos(i+frameCount)*20+35-this.y+cos(frameCount*3)*5-5;
                image(imgs.chestBeam,-10,-h,20,h);
                popMatrix();
            }
        }
        image(imgs.chestLid,0,0,75,max(~~this.y,0.1));
        image(imgs.chest,0,25);
        popMatrix();
        
    };  
    
    /* 
        Check for mouse collision
        Open and close it
    */
    _Inventory.prototype.update = function(){
        //Check for hover
        if(Math.mouseRect(60,440,100,100)){
            this.scale = lerp(this.scale,1.1,0.1);
            if(click){
                this.isOpen = !this.isOpen;
            }
        }
        else {
            this.scale = lerp(this.scale,1,0.1);
        }
        
        //If its open, show the items
        if(this.isOpen){
            this.y = lerp(this.y,0.1,0.1);
            this.toW = this.items.length * 100;
        }
        else{
            this.y = lerp(this.y,25.1,0.1);
            this.toW = 0;
        }
        
        this.w = lerp(this.w,this.toW,0.05);
    };
    
    /* Put it all together*/
    _Inventory.prototype.pack = function(){
        this.update();
        this.display();
    };
    return (new_.call(_Inventory));
})();

var Item = (function(){
    /*
        Items that the player can pick up
        and interact with on the map
        
        @constructor
        @params [object] config
        @property [string] config.imagePath - a PImage
        @property [string] config.name - the name of the Item
        @property [object] config.conversation - see Conversation for format
        @property [number] config.x - x position
        @property [number] config.y - y position
        @property [number] config.w - width
        @property [number] config.h - height
        @property [boolean] config.wantsToTalk - Does it say something, or do you pick it up?
        @property [number] config.world - the level to draw it in
    */
    var _Item = function(config){
        //Set the image and name
        this.imagePath = config.imagePath;
        this.name = config.name || this.imagePath;
        
        //Are you picking it up?
        this.recieving = false;
        
        //Scale x/y for pick up animation
        this.sx = 0;
        this.sy = 0;
        
        //Where to lerp scale x/y
        this.tsx = 0.1;
        this.tsy = 0.1;
        
        //Where to center pick up animation
        this.tx = 450;
        this.ty = 300;
        
        //Variables for pick up animation
        this.state = 1;
        this.opac = 0;
        this.opac2 = 0;
        
        //Is it talking to you? 
        this.talking = false;
        this.conversation = config.conversation;
        
        //x and y of the actual image
        this.x = config.x;
        this.y = config.y;
        
        //width and height
        this.w = config.w || imgs[this.imagePath].width;
        this.h = config.h || imgs[this.imagePath].height;
        
        //Does it want to talk or does it want you to pick it up?
        this.wantsToTalk = config.wantsToTalk;
        this.wantsToGrab = !this.wantsToTalk;
        
        //Which level to draw it in
        this.world = config.world;
        
        //Just choose a random synonym so it varies
        this.found = ["FOUND","LOCATED","IDENTIFIED","GRABBED","PICKED UP A"].pick();
    };
    
    /* 
        Get the shield image for pick up animation
        @returns PImage
    */
    _Item.prototype.getImage = function(){
        var img = imgs[this.imagePath];
        noStroke();
        background(0);
        fill(255);
        textAlign(CENTER,CENTER);
        var txtWidth = 40;
        textFont(createFont('Noto Sans Bold'),txtWidth);
        while(textWidth(this.name) > 85*2){
            txtWidth --;
            textFont(createFont('Noto Sans Bold'),txtWidth);
        }
        text(this.name,100,110);
        var mask = get(0,90,200,50);
        
        var c1 = color(5, 5, 54);
        var c2 = color(0, 0, 8);
        for(var i = 80; i < 140; i ++){
            fill(lerpColor(c1,c2,(i-100)/60));
            rect(0,i,200,1);
        }
        
        var gold = get(0,90,200,50);
        if(gold){
            gold.mask(mask);
        }
        background(255,0);
        fill(6, 7, 74);
        for(var i = 0; i < 360; i += 30){
            //text(this.name,100+cos(i),110+sin(i));
            //text(this.name,100+cos(i),112);
        }
        
        image(gold,0,90);
        var txt = get(0,90,200,50);
        
        
        background(255,0);
        
        image(imgs.shield,0,0);
        
        imageMode(CENTER);
        var w,h;
        if(img.width >= img.height){
            w = 80;
            h = img.height/img.width*80;
        }
        else{
            h = 80;
            w = img.width/img.height*80;
        }
        image(img,60,70,w,h);
        imageMode(CORNER);
        
        noStroke();
        for(var i = 0; i < 25; i ++){
            fill(255,i*4);
            rect(i+10,110,1,20);
            rect(110-i,110,1,20);
        }
        fill(255,100);
        rect(35,110,51,20);
        
        imageMode(CENTER);
        image(txt,62,121,100,25);
        imageMode(CORNER);
        
    
        var img = get(0,0,125,200);
        return(img);
    };
    
    /* What to do when you pick it up*/
    _Item.prototype.onRecieve = function(){
        
        //Darken the backdrop
        fill(0,this.opac);
        rect(0,0,900,600);
        
        if(this.recieving){
            
            this.opac = lerp(this.opac,100,0.05);
            
            //Add lightning effect
            if(frameCount % 10 === 0 && this.sx > 0.7){
                Lightnings.add({
                    x:random(0,900),
                    y:0,
                    clr:color(28, 143, 189),
                    opac:-100,
                });
            }
            
            //Draw the shield
            pushMatrix();
            translate(this.tx,this.ty);
            scale(this.sx,this.sy);
            imageMode(CENTER);
            image(this.img,0,0);
            imageMode(CORNER);
            popMatrix();
            
            //Text
            fill(255,this.opac2);
            textFont(createFont('Noto Sans Bold'),30);
            text('YOU '+this.found+' A '+this.name.toUpperCase(),450,100);
            
            //Run the actual animation
            if(this.state === 1){
                this.sx += 0.05;
                this.sy += 0.05;
                if(this.sx > 1.7){
                    this.state = 2;
                }
            }
            else if(this.state === 2){
                this.opac2 = lerp(this.opac2,255,0.1);    
            
                this.sx = lerp(this.sx,1.5 + this.tsx,0.1);
                this.sy = lerp(this.sy, 1.5 + this.tsy,0.1);
                
                if(frameCount % 10 === 0){
                    this.tsx = -this.tsx*random(0.7,0.9);
                    this.tsy = -this.tsy*random(0.7,0.9);
                }
                if(abs(this.tsx) < 0.005){
                    this.state = 3;
                }
            }
            else if(this.state === 3){
                this.opac = lerp(this.opac,0,0.05);
                this.opac2 = lerp(this.opac2,0,0.05);
                
                this.sx = lerp(this.sx,0,0.05);
                this.sy = lerp(this.sy,0,0.05);
                
                this.tx = lerp(this.tx,50+75/2+12.5,0.05);
                this.ty = lerp(this.ty,550-50-35,0.05);
                Inventory.isOpen = true;
                
                if(this.sx < 0.05){
                    Inventory.isOpen = false;
                    Inventory.items.push(this);
                    this.recieving = false;
                    this.sx = 0;
                    this.wantsToGrab = false;
                }
            }
        }
        else{
            this.opac = lerp(this.opac,0,0.05);
        }
    };
    
    /* Check for mouse collision*/
    _Item.prototype.checkGrab = function(){
        if(Math.mouseRect((this.x*Camera.scl+Camera.x),(this.y*Camera.scl+Camera.y),this.w*Camera.scl,this.h*Camera.scl) && abs(Player.x - this.x)  <= 100 && abs(Player.y - this.y) < 100 && this.world === level){
            cursor("pointer");
            if(click){
                if(this.wantsToTalk){
                    this.talking = true;
                    this.convo = new_.call(Conversation,this.conversation,this);
                }
                else if(this.wantsToGrab){
                    this.recieving = true;
                }
            }
        }
    };
    
    /* Run the Conversation*/
    _Item.prototype.talk = function(){
        if(this.talking){
            this.convo.talk();
        }
    };
    
    /* Draw it in the actual world*/
    _Item.prototype.display = function(){
        if(this.world === level){
            pushMatrix();
            translate(this.x,this.y);
            image(imgs[this.imagePath],0,0,this.w,this.h);
            popMatrix();
        }
    };
    
    /* 
        Draw it in the inventory
        @params [number] x - x position
        @params [number] y - y position
    */
    _Item.prototype.inInventory = function(x,y){
        pushMatrix();
        translate(x+125/4,y);
        scale(abs(this.sx),1);
        translate(-125/4,0);
        scale(0.55);
        
        //Sometimes you draw the front
        if(this.sx > 0){
            image(this.img,0,0);
        }
        
        //On hover you draw the back
        else {
            image(imgs.shieldBack,0,0);
        }
        popMatrix();
        
        //Check for mouse collision
        if(Inventory.isOpen){
            if(Math.mouseRect(x,y,67,100)){
                this.sx = lerp(this.sx,-1,0.05);
            }
            else{
                this.sx = lerp(this.sx,1,0.05);
            }
        }
        else{
            this.sx = lerp(this.sx,1,0.05);
        }
    };
    
    return(_Item);
})();

var Rig = (function(){
    
    /*
        Draw an outline of the character rig
        @params [number] x  - x position in pixels
        @params [number] y  - y position "  " 
        @params [number] sx - scale x
        @params [number] sy - scale y
    */
    var outline = function(x,y,sx,sy){
        pushMatrix();
        translate(x,y);
        translate(15,0);
        scale(sx,sy);
        translate(-15,0);
        beginShape();
        vertex(9,4);
        vertex(16,2);
        vertex(25,6);
        vertex(26,15);
        vertex(28,17);
        vertex(25,20);
        vertex(22,27);
        vertex(27,36);
        vertex(28,45);
        vertex(22,60);
        vertex(20,62);
        vertex(11,62);
        vertex(9,59);
        vertex(5,38);
        vertex(8,30);
        vertex(12,29);
        vertex(7,13);
        endShape();
        popMatrix();
    
    };
    /*
    My experiments documenting the code
        
        Generic person function
        @constructor
        @param {object} config
        @property {number} config.x - the x position in pixels
        @property {number} config.y - the y position in pixels
        @property {number} config.w - width of the character, in pixels.
        @property {number} config.h - height of the character, in pixels.
        @property {object} config.imgs - object of images
        @property {string} config.imgs.head - a PImage of the head
        @property {string} config.imgs.chest - a PImage of the chest
        @property {string} config.imgs.dress - a PImage, optional
        @property {string} config.imgs.upperArm - a PImage
        @property {string} config.imgs.lowerArm - a PImage
        @property {string} config.imgs.upperLeg - a Pimage
        @property {string} config.imgs.lowerLeg - a PImage
                
                
    */
    var _CharacterRig = function(config){
        // x and y positions
        this.x = config.x;
        this.y = config.y;
        
        //move the character up and down (for crouching)
        this.offsetY = 0;
        
        //the width and height
        this.w = config.w || 30*1.1;
        this.h = config.h || 90 * 1.1;
        
        //velocity and acceleration
        this.xv = 0;
        this.yv = 0;
        this.acc = 0.2;
        
        this.maxv = 3;
        
        /*
            facing, x scales the player from between -1 and 1. 
            Values less than one, the player faces left.
        */
        this.facing = 1;
        
        /* Used for the run cycle */
        this.time = 0;
        
        /* Scale*/
        this.scale = 1;
        
        /*
        Most images either have a 2 - 1 or 1 - 1 aspect ratio.
        */
        
        this.imgs = config.imgs;
        
        this.head = this.imgs.head;
        this.chest = this.imgs.chest;
        this.dress = this.imgs.dress || undefined;
        this.upperArm = this.imgs.upperArm;
        this.lowerArm = this.imgs.lowerArm;
        this.shoulder = this.imgs.shoulder;
        this.upperLeg = this.imgs.upperLeg;
        this.lowerLeg = this.imgs.lowerLeg;
        
        /* The rotations of different body parts, used for rigging*/
        this.r = {
            neck:0,
            hips:1,
            front:{
                shoulder:0,
                elbow:0,
                thigh:0,
                calf:0,
            },
            back:{
                shoulder:0,
                elbow:0,
                thigh:0,
                calf:0,
            },
        };
        
        /* 
            Shooting bullets. Once power  > 80, it canShoot. 
            Once the mouse is released, it hasShot
        */
        this.power = 0; 
        this.canShoot = true;
        this.hasShot = false;
        
        /* used for stabbing */
        this.hasSword = !true;
        this.stabbing = false;
        this.stabState = 0;
        
        /* Boolean used for crouching*/
        this.shielding = false;
        
        /* The stats */
        this.energy = 0;
        this.health = 0;
        this.shield = 0;
        
        this.statsOpac = 0;
        
        
        /* lerp the stats to these values */
        this.toHealth = 20;
        this.toShield = 200;
        this.toEnergy = 200;
        
        //If stunned
        this.stunned = false;
        this.stunnedScl = 0;
        this.stunnedY = this.h;
        
        this.stabbed = false;
        this.stabbedTime = 0;
        
        this.dead = false;
        
        //a point at the tip fo the sword
        this.blade = {
            x:0,
            y:0,
        };
    };
    
    /* Render the character */
    _CharacterRig.prototype.display = function(){
        pushMatrix();
        translate(this.x,this.y + this.offsetY);
        translate(this.w/2,0);
        scale(this.w/30*this.facing * this.scale,this.h/90 * this.scale);
        translate(-this.w/2,0);
        
        this.scale = lerp(this.scale,1,0.05);
        
        
        
        noFill();
        
        if(this.facing > 0 && this.hasSword && !this.shielding){
            image(imgs.shieldInterior,0,30,30,45);
        }
        
        pushMatrix();
        translate(15,60);
        rotate(this.r.hips);
        translate(-15,-60);
        
        
        //Stunned
        pushMatrix();
        translate(this.w/2,this.h/2);
        scale(this.stunnedScl);
        translate(-this.w/2,-this.h/2);
        image(imgs.shockedOutline,-12,-13,60,80);
        popMatrix();
    
        
        /* back arm*/
        pushMatrix();
        translate(15,30);
        rotate(this.r.back.shoulder);
        translate(-15,-30);
        image(imgs[this.upperArm],10,25,10,20);
        
        translate(15,45);
        rotate(this.r.back.elbow);
        translate(-15,-45);
        
        pushMatrix();
        translate(5,45);
        rotate(90);
        translate(0,-50);
        
        if(this.facing < 0){
            this.sword();
        }
        if(this.shielding && this.facing > 0){
            image(imgs[(this.imgs.shield.toString()+'Front')],10,15,12,45);
        }
        popMatrix();
        
        image(imgs[this.lowerArm],10,40,10,20);
        popMatrix();
        
        popMatrix();
        
        /* back leg*/
        pushMatrix();
        translate(15,55);
        rotate(this.r.back.thigh);
        translate(-15,-55);
        image(imgs[this.upperLeg],10,55,10,20);
        
        translate(15,75);
        rotate(this.r.back.calf);
        translate(-15,-75);
        image(imgs[this.lowerLeg],10,70,10,20);
        popMatrix();
        
        pushMatrix();
        translate(15,60);
        rotate(this.r.hips);
        translate(-15,-60);
        
        /* torso */
        image(imgs[this.chest],0,25,30,30);
        
         /* head */
        pushMatrix();
        translate(15,20);
        rotate(this.r.neck);
        translate(-15,-20);
        image(imgs[this.head],2,0,25,imgs[this.head].height/40*25);
        popMatrix();
        
        popMatrix();
        
        /* front leg*/
        pushMatrix();
        translate(15,55);
        rotate(this.r.front.thigh);
        translate(-15,-55);
        image(imgs[this.upperLeg],10,55,10,20);
        
        translate(15,75);
        rotate(this.r.front.calf);
        translate(-15,-75);
        image(imgs[this.lowerLeg],10,70,10,20);
        popMatrix();
        
        pushMatrix();
        translate(15,60);
        rotate(this.r.hips);
        translate(-15,-60);
        
        /*Dress*/
        if(this.dress){
            image(imgs[this.dress],0,55,30,30);
        }
        
        /* front arm */
        pushMatrix();
        translate(15,30);
        rotate(this.r.front.shoulder);
        translate(-15,-30);
        image(imgs[this.upperArm],10,30,10,15);
        
        translate(15,45);
        rotate(this.r.front.elbow);
        translate(-15,-45);
        
        pushMatrix();
        translate(5,45);
        rotate(90);
        translate(0,-50);
        
        if(this.facing > 0){
            this.sword();
        }
        if(this.shielding && this.facing < 0){
            image(imgs[(this.imgs.shield.toString()+'Front')],10,15,12,45);
        }
        popMatrix();
        
        image(imgs[this.lowerArm],10,40,10,20);
        popMatrix();
        
        image(imgs[this.shoulder],10,27,10,10);
        
        if(this.stunned){
            noStroke();
            fill(255,sin(frameCount * 20) * 50);
            outline(0,0, this.facing,1);
        }
        
        popMatrix();
        
        if(this.facing < 0 && this.hasSword && !this.shielding){
            image(imgs[this.imgs.shield],0,30,30,45);
        }
        
        if(this.stabbed){
            this.stabbedTime ++;
            if(this.stabbedTime > 30){
                this.stabbed = false;
                this.stabbedTime = 0;
            }
        }
        
        popMatrix();
        
        this.time += 4;
        
        if(this.stunned){
            this.time -= 2;
        }
        
        this.getSwordPos();
    };
    
    /* Move the body into the position on the 'vs' scene */
    _CharacterRig.prototype.vs = function(){
        if(this.facing > 0){
            this.r.front.shoulder = lerp(this.r.front.shoulder,15,0.05);
            this.r.front.elbow = lerp(this.r.front.elbow,-30,0.05);
        }
        if(this.facing < 0){
            this.r.back.shoulder = lerp(this.r.back.shoulder,-60,0.05);
            this.r.back.elbow = lerp(this.r.back.elbow,-40,0.05);
        }
        
        if(this.yv < 0){
            this.r.hips = lerp(this.r.hips,-10,0.05);
            this.r.neck = lerp(this.r.neck,-5,0.05);
            
            this.r.front.thigh = lerp(this.r.front.thigh,-80,0.05);
            this.r.front.calf = lerp(this.r.front.calf,70,0.05);
        }
        else{
            this.r.hips = lerp(this.r.hips,5,0.03);
            this.r.neck = lerp(this.r.neck,5,0.03);
            
            this.r.front.thigh = lerp(this.r.front.thigh,-50,0.02);
        }
        
    };
    
    /* Move the body through a walk cycle*/
    _CharacterRig.prototype.walk = function(){
        var c = cos(this.time);
        
        if((this.power < 10 && !this.stabbing && !this.shielding) || this.facing < 0){
            this.r.front.shoulder = lerp(this.r.front.shoulder, c * 10,0.1);
            this.r.front.elbow = lerp(this.r.front.elbow, -30 + c * 20,0.1);
        }
        if((this.power < 10 && !this.stabbing && !this.shielding) || this.facing > 0){
            this.r.back.shoulder = lerp(this.r.back.shoulder, -c * 10,0.1);
            this.r.back.elbow = lerp(this.r.back.elbow, -30 - c * 20, 0.1);
        }
        
        this.r.neck = lerp(this.r.neck, c * 3 + 2,0.1);
        this.r.hips = lerp(this.r.hips, c * 2 + 2, 0.1);
        
        this.r.front.thigh = lerp(this.r.front.thigh, -c * 30 - 10,0.1);
        this.r.front.calf = lerp(this.r.front.calf, -cos(this.time - 90) * 30 + 30,0.1);
        
        this.r.back.thigh = lerp(this.r.back.thigh, c * 30 - 10, 0.1);
        this.r.back.calf = lerp(this.r.back.calf, cos(this.time - 90) * 30 + 30, 0.1);
        
    };
    
    // The default movement stance
    _CharacterRig.prototype.static = function(){
        var c = cos(this.time);
        this.r.front.thigh = lerp(this.r.front.thigh, -20 + c * 1, 0.1);
        this.r.back.thigh = lerp(this.r.back.thigh, 5 + c * 1,0.1);
        
        this.r.front.calf = lerp(this.r.front.calf, 20 + c * 3, 0.1);
        this.r.back.calf = lerp(this.r.back.calf, 10 + c * 2, 0.1);
        
        this.r.hips = lerp(this.r.hips, c * 1 + 1, 0.1);
        this.r.neck = lerp(this.r.neck, c * 2, 0.1);
        
        if((this.power < 10 && !this.stabbing && !this.shielding) || this.facing < 0){
            this.r.front.shoulder = lerp(this.r.front.shoulder, c * 2 + 5, 0.1);
            this.r.front.elbow = lerp(this.r.front.elbow, c * 3 - 20, 0.1);
        }
        if((this.power < 10 && !this.stabbing && !this.shielding) || this.facing > 0){
            this.r.back.shoulder = lerp(this.r.back.shoulder, -c * 2 - 5, 0.1);
            this.r.back.elbow = lerp(this.r.back.elbow, -c * 3 + 20, 0.1);
        }
    };
    
    /* How the rig moves while jumping animation*/
    _CharacterRig.prototype.jump = function(){
        var yv = constrain(this.yv,-6,4);
        
        this.r.front.thigh = lerp(this.r.front.thigh+yv/3*2, -30, 0.1);
        this.r.back.thigh = lerp(this.r.back.thigh+yv/10, 5,0.1);
        
        this.r.front.calf = lerp(this.r.front.calf-yv/2, 20, 0.1);
        this.r.back.calf = lerp(this.r.back.calf, 10, 0.1);
        
        if(this.power < 10 && !this.stabbing){
            this.r.front.shoulder = lerp(this.r.front.shoulder,15-yv*3,0.1);
            this.r.back.shoulder = lerp(this.r.back.shoulder, -5-yv*4,0.1);
            
            this.r.front.elbow = lerp(this.r.front.elbow,-5+yv*2,0.1);
            this.r.back.elbow = lerp(this.r.back.elbow,-5+yv*5,0.1);
        }
        
        this.r.hips = lerp(this.r.hips,this.yv,0.1);
        this.r.neck = lerp(this.r.neck,this.yv*2,0.1);
        
    };
    
    /* Death animation */
    _CharacterRig.prototype.die = function(){
        if(this.toHealth < 1){
            this.dead = true;
        }  
        if(this.dead){
            this.r.hips = lerp(this.r.hips,60,0.05);
            this.r.neck = lerp(this.r.neck,20,0.05);
            
            this.r.front.thigh = lerp(this.r.front.thigh,-130,0.05);
            this.r.back.thigh = lerp(this.r.back.thigh,0,0.05);
            
            this.r.front.calf = lerp(this.r.front.calf,160,0.05);
            this.r.back.calf = lerp(this.r.back.calf,180,0.05);
            
            this.offsetY = lerp(this.offsetY,15,0.05);
        }
        else if(!this.shielding){
            this.offsetY = lerp(this.offsetY,0,0.05);
        }
    };
    
    /*
        Check collision between the sword and enemies
        @params [object] obj - Entity to check collision with
    */
    _CharacterRig.prototype.checkStab = function(obj){
        var x = this.blade.x;
        var y = this.blade.y;
        
        return(x >= obj.x && x <= obj.x + obj.w && y >= obj.y && y <= obj.y + obj.h);
    };  
    
    /* Dash forward and stab enemies animation*/ 
    _CharacterRig.prototype.stab = function(){
        
        var arm = this.r.front;
        if(this.facing < 0){
            arm = this.r.back;   
        }
        if(this.stabbing && !this.stunned && !this.dead){
            if(this.stabState === -1){
                this.xv += this.facing * 5;
                arm.shoulder = lerp(arm.shoulder,0,0.2);
                arm.elbow = lerp(arm.elbow,0,0.1);
                if(arm.shoulder <= 1){
                    this.stabState = 0;
                }
            }
            if(this.stabState === 0){
                arm.shoulder = lerp(arm.shoulder,-51,0.2);
                arm.elbow = lerp(arm.elbow,0,0.1);
                if(arm.shoulder <= -50){
                    this.stabState = 1;
                }
            }
            else if(this.stabState === 1){
                arm.shoulder = lerp(arm.shoulder,1,0.2);
                arm.elbow = lerp(arm.elbow,0,0.1);
                if(arm.shoulder >= 0){
                    this.stabbing = false;
                    if(random() <= 0.5){
                        this.stabState = -1;
                    }
                    else{
                        this.stabState = 2;
                    }
                }
            }
            else if(this.stabState === 2){
                this.xv += this.facing * 5;
                arm.elbow = lerp(arm.elbow,-60,0.2);
                arm.shoulder = lerp(arm.shoulder,-80,0.2);
                if(arm.elbow < -59){
                    this.stabState = 3;
                }
            }
            else if(this.stabState === 3){
                arm.shoulder = lerp(arm.shoulder,-51,0.2);
                arm.elbow = lerp(arm.elbow,0,0.1);
                if(arm.shoulder <= -50){
                    this.stabState = 4;
                }
            }
            else if(this.stabState === 4){
                arm.shoulder = lerp(arm.shoulder,1,0.2);
                arm.elbow = lerp(arm.elbow,0,0.1);
                if(arm.shoulder >= 0){
                    this.stabbing = false;
                    if(random() <= 0.5){
                        this.stabState = -1;
                    }
                    else{
                        this.stabState = 2;
                    }
                }
            }
        }
        
    };
    
    /* Hide behind the shield */
    _CharacterRig.prototype.crouch = function(){
        if(this.shielding && !this.stunned){
            var arm = this.r.front;
            var arm2 = this.r.back;
            if(this.facing > 0){
                arm = this.r.back;
                arm2 = this.r.front;
            }
            
            this.maxv = 0.5;
            
            arm.shoulder = lerp(arm.shoulder,-90,0.1);
            arm.elbow = lerp(arm.elbow,-90,0.1) + (mouseY - 350)/45;
            
            arm2.shoulder = lerp(arm2.shoulder,45,0.1);
            arm2.elbow = lerp(arm2.elbow,0,0.1);
            
            this.r.front.thigh = lerp(this.r.front.thigh,-130,0.1);
            this.r.back.thigh = lerp(this.r.back.thigh,0,0.1);
            
            this.r.front.calf = lerp(this.r.front.calf,160,0.1);
            this.r.back.calf = lerp(this.r.back.calf,160,0.1);
            
            this.offsetY = lerp(this.offsetY,15,0.1);
        }
        else if(this.stunned){
            this.maxv = 0.5;
        }
        else{
            this.maxv = 3;
            this.offsetY = lerp(this.offsetY,0,0.1);
        }
    };
    
    // the stunned animation
    _CharacterRig.prototype.shocked = function(){
        if(this.stunned){
            
            this.r.front.shoulder += random(-5,5);
            this.r.front.elbow += random(-5,5);
            
            this.r.back.shoulder += random(-5,5);
            this.r.back.elbow += random(-5,5);
            
            this.r.front.thigh += random(-5,5);
            this.r.front.calf += random(-5,5);
            
            this.r.back.calf += random(-5,5);
            this.r.hips += random(-2,2);
            
            this.stunnedScl = lerp(this.stunnedScl,1.01,0.04);
            
            this.stunnedY = noise(frameCount /100) * this.h * 2 - this.h/2;
            
            if(this.stunnedScl >= 1){
                this.stunned = false;
                this.stunnedY = this.h;
            }
        }    
        else{
            if(this.stunnedScl > 0){
                this.stunnedScl -= 0.01;
            }
        }
    };
    
    /* Display the sword */
    _CharacterRig.prototype.sword = function(){
        if(this.hasSword){
            pushMatrix();
            scale(0.1);
            
            noStroke();
            fill(28, 143, 189,constrain(this.power,0,80)/8);
            for(var i = 0; i < 9; i ++){
                pushMatrix();
                scale(1.2);
                translate(100,330);
                scale(0.4+constrain(this.power,0,80)/80+i*0.033+cos(frameCount*5)*0.1,constrain(this.power,0,80)/125+i*0.02+0.4);
                translate(-50,-330);
                
                beginShape();
                vertex(5,10);
                bezierVertex(16,100,25,188,14,200);
                bezierVertex(14,205,5,210,0,210);
                bezierVertex(5,230,5,240,10,300);
                vertex(60,300);
                bezierVertex(105,91,36,10,5,10);
                endShape();
                popMatrix();
            }
            image(imgs.sword,0,0);
            fill(28, 143, 189,200);
            noStroke();
            for(var i = 4; i < constrain(this.power,0,80); i ++){
                var t = i/120;
                var x = bezierPoint(60,105,36,5,t)*1.2 + 25;
                var y = bezierPoint(300,91,10,10,t)*1.2 + 10;
                fill(28, 143, 189,100);
                ellipse(x,y,10,10);
                fill(28,143,189,10);
                ellipse(x,y,30,30);
                ellipse(x,y,20,20);
                ellipse(x,y,40,40);
            }
            var points = [
                [60,10,60,10],
                [60,30,80,30],
                [60,50,100,50],
                [65,70,120,70],
                [65,90,125,90],
                [70,110,125,110],
                [70,130,130,130],
                [75,150,130,150],
                [75,170,135,170],
                [75,190,135,190],
                [75,210,130,210],
                [75,230,130,230],
                [55,250,130,250],
                [55,270,130,270],
                [60,290,125,290],
                [80,310,105,310],
                [90,330,90,330],
            ];
            
            
            fill(28, 143, 189,sin((this.power)*2)*15);
            var p = points[~~map((this.power*4)%360,0,360,points.length-1,0)];
            for(var i = 0; i < 10; i ++){
                rect(p[0]-i*3,350-(this.power*4)%360-i*3-25,p[2] - p[0]+i*6,25+i*6,50);
            }
            
            noFill();
            
            stroke(28, 143, 189,constrain(this.power*4,0,150));
            strokeWeight(20);
            beginShape();
            for(var i = p[0]; i < p[2]; i += random(10,20)){
                vertex(i,p[3] + cos(i*15)*10);
            }
            endShape();
            
            stroke(240, 253, 255,this.power*4);
            strokeWeight(10);
            beginShape();
            for(var i = p[0]; i < p[2]; i += random(10,20)){
                vertex(i,p[3] + cos(i*15)*10);
            }
            endShape();
        
            popMatrix();
        }
    };
    
    /*
        Define the point at the end of the sword (for stabbing collision)
        
        So when we display the sword, it goes through a whole bunch of
        matrix transformations. The sword is in your hand, so we have to take 
        the rotations of both the elbow and the shoulder into account.
        
        So basically we use trig to mathematically calculate where the
        sword is. 
        
    */  
    _CharacterRig.prototype.getSwordPos = function(){
        var arm = this.r.front;
        if(this.facing < 0){
            arm = this.r.back;
        }

        var a = arm.shoulder;
        var a2 = arm.elbow;
        
        this.blade.x = this.x + this.w/2 + (cos(a + 90) * 15 + cos(a + a2 + 90) * 10 + cos(a + a2) * 40) * this.facing;
        this.blade.y = this.y + 30 + sin(a + 90) * 15 + sin(a +a2 + 90) * 10 + sin(a + a2) * 40;

    };
    
    /*
        World.arr is a 2d {array} of data about the collisions of each pixel
        0 - corresponds to empty space, or no collision
        1 - corresponds to solid block, or full collision
        2 - corresponds to a platform, only bottom collision
        
        Fun fact: you can't loop through every pixel on the outside of the character. You have to leave the corners out of it. Otherwise we would have the bottom trying to do left and right collision
        
        @example - lines are where we check for collision
          ___ 
        
        |     |
        |     |
          ___ 
          
        loop through the pixels at the bottom of the character
        @returns {boolean} - whether or not there is collision on the bottom
    */
    _CharacterRig.prototype.getBottom = function(){
        var b = false;
        for(var i = ~~this.x+5; i < ~~this.x + this.w-5; i += 2){
            var w = World[level].arr[~~(i/2)][~~((~~this.y+this.h)/2)];
            if(w !== 0){
                b = w;
                break;
            }
        }
        return b;
    };
    
    /* 
        loop through the pixels on top of the character
        @returns {boolean} - whether or not there is collision on the top
    */
    _CharacterRig.prototype.getTop = function(){
        var b = false;
        for(var i = ~~this.x+5; i < ~~this.x + this.w-5; i += 2){
            if(World[level].arr[~~(i/2)][~~(this.y/2)] === 1){
                b = true;
                break;
            }
        }
        return b;
    };
    
    /* 
        loop through the pixels at the right of the character
        @returns {boolean} - whether or not there is collision on the right
    */
    _CharacterRig.prototype.getRight = function(){
        var b = false;
        for(var i = ~~this.y+5; i < ~~(this.y + this.h-5); i += 2){
            if(World[level].arr[~~((this.x+this.w)/2)][~~(i/2)] === 1){
                b = true;
                break;
            }
        }
        return b;
    };
    
    /*
        loop through the pixels at the left of the character
        @returns {boolean} - whether or not there is collision on the left
    */
    _CharacterRig.prototype.getLeft = function(){
        var b = false;
        for(var i = ~~this.y+5; i < ~~(this.y + this.h-5); i += 2){
            if(World[level].arr[~~(this.x/2)][~~(i/2)] === 1){
                b = true;
                break;
            }
        }
        return b;
    };
    
    /*
        Pixel perfect collision. Logic is pretty simple. If there is collision on the bottom of the character, move it up. Same for left and right.  
    */
    _CharacterRig.prototype.collide = function(){
        //if not changing between levels
        if(!this.changing){
            
            //Check for bottom collision
            while(this.getBottom()){
                this.y --;
                this.canJump = true;  
                this.yv = 0;
            }
            
            //Check for right collision
            while(this.getRight()){
                this.x --;
                this.xv = 0;
            }
            
            //Check for left collision
            while(this.getLeft()){
                this.x ++;
                this.xv = 0;
            } 
            
            //Check for top collision
            if(this.getTop()){
                this.yv = -this.yv/2;
            }  
        }
        this.changing = false;
        
    };
    return _CharacterRig;
})();

var NPC = (function(){
    /*
        The in-world non player characters
        
        @extends Rig
        @constructor
        @params config
        @property [string] config.name - self explanatory
        @property [number] config.world - which level to draw it in
        @property [number] config.facing - which direction it is facing. -1 or 1
        @property [object] config.conversations - information about what they say.
        See my rant in the Conversation object for more info on ^^^
    */
    var _NPC = function(config){
        Rig.call(this, config);
        
        this.name = config.name;
        this.world = config.world;
        
        this.wantsToTalk = true;
        this.talking = false;
        
        this.facing = config.facing;
        
        this.convo = 0;
        this.conversations = config.conversations;  
    };
    _NPC.prototype = Object.create(Rig.prototype);
    
    /* Check for mouse collision */
    _NPC.prototype.checkTalk = function(){
        if(this.wantsToTalk){
            image(imgs.downArrow,this.x+5,this.y-20 + cos(frameCount*4)*5,this.w-10,(this.w-10)/2);
            if(Math.mouseRect((this.x*Camera.scl+Camera.x),(this.y*Camera.scl+Camera.y),this.w*Camera.scl,this.h*Camera.scl) && abs(Player.x - this.x) <= 100){
                cursor('pointer');
                if(click && !this.talking){
                    this.talking = true;
                    this.conversation = new_.call(Conversation,this.conversations[this.convo],this);
                }
            }
        }
    };
    
    /* Talk to you.*/
    _NPC.prototype.talk = function(){
        if(this.talking){
            this.conversation.talk();
        }
    };
    
    /* */
    _NPC.prototype.pack = function(){
        this.display();
        this.static();
        this.checkTalk();
    };
    return _NPC;
})();

var Player = (function(){
    /*
        Key and mouse interaction
        
        keys is an object of which keys are currently being pressed
        
        @example
        `keys['a']` returns whether or not the 'a' key is being pressed
        `keys[65] returns whether or not the 'a' key is being pressed 
        
        {boolean} released - triggers when mouse is released
        
    */
    var released = false;
    mouseReleased = function(){
        released = true;  
    };
    
    var keys = {};
    keyPressed = function () {
      keys[key.toString()] = true;
      keys[keyCode] = true;
    };
    keyReleased = function () {
      delete keys[key.toString()];
      delete keys[keyCode];
    };
    
    /*
        The player character
        @extends Rig
        @constructor
    */
    var _Player = function(config){
        
        Rig.call(this, config);
        
        this.canJump = false;
        this.changing = false;
    };
    _Player.prototype = Object.create(Rig.prototype);
    
    /*
        Update the player's x and y positions based on key input
        Change between different levels
        Switch way the player faces based on mouse input
    */
    _Player.prototype.update = function(){
        
        // Check for key input, and accelerate accordingly
        if((keys[UP] || keys.w) && this.canJump && !this.shielding){
            this.yv = -6;
            this.canJump = false;
        }
        else{
            this.yv += this.acc;
        }
        
        if(keys[LEFT] || keys.a){
            this.xv -= this.acc;
        }
        else if(keys[RIGHT] || keys.d){
            this.xv += this.acc;
        }
        else if(this.xv > 0){
            this.xv -= this.acc;
        }
        else if(this.xv < 0){
            this.xv += this.acc;  
        }
        
        this.xv = constrain(this.xv,-this.maxv,this.maxv);
        if(abs(this.xv) < 0.2){
            this.xv = 0;
        }
        
        //update x and y coords based on velocity
        this.x += this.xv;
        this.y += this.yv;
        
        
        //Change scenes if walk off left or right side of screen
        if(this.x < 0 && level > 0){
            level --;
            this.x = 798 - this.w;
            this.y -= 50;
            this.changing = true;
            particles = [];
        }
        if(this.x > 799 - this.w){
            level ++;
            this.x = 1;
            this.y -= 50;
            this.changing = true;
            particles = [];
        }
        
        //Constrain x and y positions on the screen
        if(this.y < 0){
            this.yv = 0;
        }
        
        this.x = constrain(this.x,0,799-this.width);
        
        //Change the direction of the player
        if(mouseX < this.x*Camera.scl+Camera.x){
            this.facing = lerp(this.facing,-1,0.1);
        }
        else{
            this.facing = lerp(this.facing,1,0.1);
        }
        
        //Logic for which set of motions to use
        if(abs(this.yv) >= 0.6 && !this.canJump){
            this.jump();
        }
        else if(this.xv !== 0){
            this.walk();
        }
        else{
            this.static();
        }
        
    };
    
    /*
        Run during the Fight scene.
        Update stabbing, shielding, and shooting based on mouse input
    */
    _Player.prototype.handleFight = function(){
        
        //define the front arm
        var arm = this.r.front;
        if(this.facing < 0){
            arm = this.r.back;
        }
        
        //Right click to shield
        if(mouseIsPressed && mouseButton === RIGHT && this.shield > 5){
            this.shielding = true;
        }
        else{
            this.shielding = false;
        }
        
        //left click and hold to build up energy on your sword
        if(mouseIsPressed && !this.shot && this.canShoot && mouseButton === LEFT && this.energy >= 10){
            this.power ++;
        }
        
        if(this.power > 170){
            this.power = 80;
        }
        
        
        //aim the sword towards the mouse
        if(this.power > 10){
            if(this.facing <= 0){
                
                var a = atan2(this.y+35 - ((mouseY-Camera.y)/Camera.scl), this.x+this.w/2 - (mouseX-Camera.x)/Camera.scl) + 20;
                arm.shoulder = lerp(arm.shoulder,a*-1,0.1); 
            }
            else if(this.facing > 0){
                
                var a = (atan2(this.y+35 - ((mouseY-Camera.y)/Camera.scl), this.x+this.w/2 - (mouseX-Camera.x)/Camera.scl)+360)%360 - 180;
                arm.shoulder = lerp(arm.shoulder,a,0.1); 
            }
        }
        
        //listen for mouse released
        if((released && this.power > 0) || (released && this.energy < 10)){
            this.shot = true;
            this.canShoot = false;
        }
        if(this.shot){
            this.power = lerp(this.power,-1,0.1);
            
            //if power is less than 80, stab, otherwise, shoot
            if((this.power < 80 || this.energy < 10) && !this.stunned){
                this.stabbing = true;
                
            }
            else if(!this.stunned){
                
                this.toEnergy -= 20;
                
                // aim
                var r = atan2(((mouseY - Camera.y)/Camera.scl) - this.blade.y, ((mouseX - Camera.x)/Camera.scl) - this.blade.x);
                
                //and shoot
                bullets.push(new_.call(Bullet,{
                    x:this.blade.x,
                    y:this.blade.y,
                    r:r,
                    from:this
                    
                }));
                
            }
            
            this.shot = false;
        }
        
        //Reset the power to 0 after stabbing or shooting
        if(!this.canShoot){
            this.power = lerp(this.power,-1,0.1);
            if(this.power <= 0){
                this.shot = false;
                this.power = 0;
                this.canShoot = true;
            }
        }
        
        released = false;
        
        this.x = constrain(this.x,0,760);
        
        //run for shielding and stabbing methods
        this.stab();
        this.crouch();

    };
    
    /* Show the stats (energy, health, and shield) in the top right corner. */
    _Player.prototype.stats = function(){
        
        //define the x positions of three stats
        var e = map(this.energy,0,200,35,200);
        var h = map(this.health,0,200,35,200);
        var s = map(this.shield,0,200,35,200);
        
        //shadows
        fill(0,10);
        for(var i = 0; i < 10; i ++){
            quad(0,115 + i,0,0,315 + i,0,295 + i,115 + i);
        }

        fill(70,70,90);
        quad(0,100,0,0,300,0,280,100);
        
        noStroke();
        fill(0,50);
        rect(70,75,200,15,10);
        rect(80,25,200,15,10);
        rect(75,50,200,15,10);
        
        //draw the stats bars
        image(imgs.energyBar,70 - (200 - e),75,200,15);
        image(imgs.healthBar,80 - (200 - h),25,200,15);
        image(imgs.shieldBar,75 - (200 - s),50,200,15);
        
        if(this.energy < 10){
            
            
            this.statsOpac = lerp(this.statsOpac,255,0.1);
        }
        else{
            this.statsOpac = lerp(this.statsOpac,0,0.1);
        }
        fill(150,150,150,this.statsOpac - 100);
        rect(70 - (200 - e),75,200,15);
            
        //fill(200, this.statsOpac);
        //text('Wait to shoot',200,80);
        
        //glows on bars
        fill(189, 28, 74,40);
        rect(80 - (200 - h),21,204,23,10);
        rect(80 - (200 - h),23,202,19,10);
        
        fill(28,143,189,30);
        rect(75 - (200 - s),46,204,23,10);
        rect(75 - (200 - s),48,202,19,10);
        
        fill(224, 224, 40,30);
        rect(70 - (200 - e),71,204,23,10);
        rect(70 - (200 - e),73,202,19,10);
        
        // text showing stats
        strokeWeight(2);
        stroke(204, 103, 20);
        fill(50,50,60);
        ellipse(277 - (200 - h),33,15,15);
        
        stroke(151, 59, 179);
        ellipse(272 - (200 - s),58,15,15);
        
        stroke(84, 176, 222);
        ellipse(267 - (200 - e),83,15,15);
        
        textFont(createFont('Noto Sans Bold'), 10);
        
        noStroke();
        fill(84, 176, 222);
        text(round(map(e,35,200,0,10)),267 - (200 - e),83);
        
        fill(203, 139, 217);
        text(round(map(s,35,200,0,10)),272 - (200 - s),58);
        
        fill(204, 103, 20);
        text(round(map(h,35,200,0,10)),277 - (200 - h),33);
        
        //Name and face image
        image(imgs.playerStats,0,0);
        image(imgs[this.head],10,25,50,50);
        
        fill(255);
        textFont(createFont('Noto Sans Bold'), 17);
        text('You',40,95);
        
        if(this.energy <= 190 && frameCount % 360 === 0){
            this.toEnergy += 10;
        }
        
        //lerp the stats to their correct values
        this.health = lerp(this.health,this.toHealth,0.05);
        this.energy = lerp(this.energy,this.toEnergy,0.05);
        this.shield = lerp(this.shield,this.toShield,0.05);
        
    };
    
    /* Run update, collision, and display code in less lines */
    _Player.prototype.pack = function(){
        this.update();
        this.collide();
        this.display();
        
    };
    
    /* create a new instance of the player */
    return new_.call(_Player,{
        x:300,
        y:150,
        imgs:{
            head:"playerHead",
            chest:"knightBreastPlate",
            upperArm:"knightUpperArm",
            lowerArm:"knightLowerArm",
            shoulder:"knightShoulder",
            upperLeg:"knightUpperLeg",
            lowerLeg:"knightLowerLeg",
            shield:"shield1",
        },
    });
})();

var Hound = (function(){
    var _Hound = function(){
        this.x = 0;
        this.y = 0;
        
        this.r = {
            leg1:{
                foot:10,
                knee:52,
                hip:-22,
            },
            leg2:{
                foot:0,
                knee:0,
                hip:0,
            },
            leg3:{
                foot:0,
                knee:0,
                hip:0,
            },
            leg4:{
                foot:0,
                knee:0,
                hip:0,
            }
    
        };
        this.time = 0;
    };
    _Hound.prototype.display = function(){
        pushMatrix();
        translate(this.x,this.y);
        
        //Leg 1
        pushMatrix();
        translate(80,100);
        rotate(this.r.leg1.hip);
        image(imgs.houndThigh2,-5,0,15,20);
        
        pushMatrix();
        translate(0,15);
        rotate(this.r.leg1.knee);
        image(imgs.houndCalf2,-5,0,10,20);
        
        pushMatrix();
        translate(0,15);
        rotate(this.r.leg1.foot);
        image(imgs.houndFoot2,-10,0,20,23);
        popMatrix();
        popMatrix();
        popMatrix();
        
        //Leg 2
        pushMatrix();
        translate(50,100);
        rotate(this.r.leg2.hip);
        image(imgs.houndThigh2,-5,0,15,20);
        
        pushMatrix();
        translate(0,15);
        rotate(this.r.leg2.knee);
        image(imgs.houndCalf2,-5,0,10,20);
        
        pushMatrix();
        translate(0,15);
        rotate(this.r.leg2.foot);
        image(imgs.houndFoot2,-10,0,20,23);
        popMatrix();
        popMatrix();
        popMatrix();
        
        //Body
        pushMatrix();
        translate(30,50);
        fill(255);
        stroke(0);
        strokeWeight(1);
        image(imgs.houndSpike,0,5,10,15);
        image(imgs.houndSpike,8,4,10,15);
        image(imgs.houndSpike,16,8,10,10);
        image(imgs.houndSpike,22,11,10,8);
        image(imgs.houndSpike,27,14,10,8);
        image(imgs.houndSpike,32,18,10,6);
        image(imgs.houndSpike,40,22,7,3);
        
        image(imgs.houndBody,0,0);
        popMatrix();
    
        //Head
        image(imgs.houndBottomHead,0,70);      
        image(imgs.houndTopHead,1,70);
        
        //Leg 3
        pushMatrix();
        translate(50,100);
        rotate(this.r.leg3.hip);
        image(imgs.houndThigh,-5,0,15,20);
        
        pushMatrix();
        translate(0,15);
        rotate(this.r.leg3.knee);
        image(imgs.houndCalf,-5,0,10,20);
        
        pushMatrix();
        translate(0,15);
        rotate(this.r.leg3.foot);
        image(imgs.houndFoot,-10,0,20,23);
        popMatrix();
        popMatrix();
        popMatrix();
        
        //Leg 4
        pushMatrix();
        translate(80,100);
        rotate(this.r.leg4.hip);
        image(imgs.houndThigh,-5,0,15,20);
        
        pushMatrix();
        translate(0,15);
        rotate(this.r.leg4.knee);
        image(imgs.houndCalf,-5,0,10,20);
        
        pushMatrix();
        translate(0,15);
        rotate(this.r.leg4.foot);
        image(imgs.houndFoot,-10,0,20,23);
        popMatrix();
        popMatrix();
        popMatrix();
        
        
        popMatrix();
    };
    _Hound.prototype.walk = function(){
        this.time += 4;
        var ct = cos(this.time);
        var st = sin(this.time);
        
        this.r.leg3.hip = ct*30+15;
        this.r.leg3.knee = st*20-15;
        this.r.leg3.foot = -ct*20;
        
        this.r.leg1.hip = ct*30+15;
        this.r.leg1.knee = st*20-15;
        this.r.leg1.foot = -ct*20;
        
        this.r.leg2.hip = -ct*30+15;
        this.r.leg2.knee = -st*20-15;
        this.r.leg2.foot = ct*20;
        
        this.r.leg4.hip = -ct*30+15;
        this.r.leg4.knee = -st*20-15;
        this.r.leg4.foot = ct*20;
    };
    return _Hound;
})();

var Fighter = (function(){
    
    /*
        The fighter character in the Fight scene
        @extends Rig
        @constructor
    */
    var _Fighter = function(config){
        Rig.call(this, config);  
        
        this.canJump = false;
        this.level = config.level;
        
        this.move = {
            left:false,
            right:false,
            jump:false,
            attack:false
        };
        
        this.name = config.name;
    };
    _Fighter.prototype = Object.create(Rig.prototype);
    
    /* Update the x and y positions, change the facing value*/
    _Fighter.prototype.update = function(){
        if(this.move.up && this.canJump){
            this.yv = -6;
            this.canJump = false;
        }
        else{
            this.yv += this.acc;
        }
        
        if(this.move.left){
            this.xv -= this.acc;
        }
        else if(this.move.right){
            this.xv += this.acc;
        }
        else if(this.xv > 0){
            this.xv -= this.acc;
        }
        else if(this.xv < 0){
            this.xv += this.acc;  
        }
        
        this.xv = constrain(this.xv,-this.maxv,this.maxv);
        if(abs(this.xv) < 0.2){
            this.xv = 0;
        }
        
        this.x += this.xv;
        this.y += this.yv;
        
        this.x = constrain(this.x,0,760);
        
        if(Player.x < this.x){
            this.facing = lerp(this.facing,-1,0.1);
        }
        else {
            this.facing = lerp(this.facing,1,0.1);
        }
        
        if(abs(this.yv) >= 0.6 && !this.canJump){
            this.jump();
        }
        else if(this.xv !== 0){
            this.walk();
        }
        else{
            this.static();
        }
    };
    
    /*
        This method controls the movements and tactics iof the fighters.
    
        So there are 3 types of fighters, with varying levels of difficulty
        
        Beginner:
        The most basic AI. It moves towards the Player
        when it is a certain distance away, it try to stab him. 
        Should be pretty easy to defeat, but that is the idea
    
    */
    _Fighter.prototype.ai = function(){
        switch (this.level){
            case 1:
            case "Beginner":
            
                if(Player.x < this.x - 70){
                    this.move.left = true;
                    this.move.right = false;
                }
                else if(Player.x > this.x + 50){
                    this.move.left = false;
                    this.move.right = true;
                }
                else{
                    this.move.left = false;
                    this.move.right = false;
                    
                    if(frameCount % 30 === 0){
                        this.stabbing = true;
                    }
                }
                
                if(Player.y < this.y - 70){
                    this.move.up = true;
                }
                else{
                    this.move.up = false;
                }
                
            
            break;
        }  
    };
    
    //Display all of the stats for the Fighter
    _Fighter.prototype.stats = function(){

        var e = map(this.energy,0,200,35,200);
        var h = map(this.health,0,200,35,200);
        var s = map(this.shield,0,200,35,200);
        
        pushMatrix();
        translate(450,0);
        scale(-1,1);
        translate(-450,0);
        
        fill(0,10);
        for(var i = 0; i < 10; i ++){
            quad(0,115 + i,0,0,315 + i,0,295 + i,115 + i);
        }

        fill(70,70,90);
        quad(0,100,0,0,300,0,280,100);
        
        noStroke();
        fill(0,50);
        rect(70,75,200,15,10);
        rect(80,25,200,15,10);
        rect(75,50,200,15,10);
        
        image(imgs.energyBar,70 - (200 - e),75,200,15);
        image(imgs.healthBar,80 - (200 - h),25,200,15);
        image(imgs.shieldBar,75 - (200 - s),50,200,15);
        
        fill(189, 28, 74,40);
        rect(80 - (200 - h),21,204,23,10);
        rect(80 - (200 - h),23,202,19,10);
        
        fill(28,143,189,30);
        rect(75 - (200 - s),46,204,23,10);
        rect(75 - (200 - s),48,202,19,10);
        
        fill(224, 224, 40,30);
        rect(70 - (200 - e),71,204,23,10);
        rect(70 - (200 - e),73,202,19,10);
        
        strokeWeight(2);
        stroke(204, 103, 20);
        fill(50,50,60);
        ellipse(277 - (200 - h),33,15,15);
        
        stroke(151, 59, 179);
        ellipse(272 - (200 - s),58,15,15);
        
        stroke(84, 176, 222);
        ellipse(267 - (200 - e),83,15,15);
        
        image(imgs.playerStats,0,0);
        image(imgs[this.head],10,25,50,50);
        popMatrix();
        
        fill(255);
        textFont(createFont('Noto Sans Bold'), 17);
        text(this.name,860,95); 
        
        textFont(createFont('Noto Sans Bold'), 10);
        noStroke();
        fill(84, 176, 222);
        text(round(map(e,35,200,0,10)),633 + (200 - e),83);
        
        fill(203, 139, 217);
        text(round(map(s,35,200,0,10)),628 + (200 - s),58);
        
        fill(204, 103, 20);
        text(round(map(h,35,200,0,10)),623 + (200 - h),33);
        
        if(this.energy <= 190 && frameCount % 360 === 0){
            this.toEnergy += 10;
        }
        
        this.health = lerp(this.health,this.toHealth,0.05);
        this.energy = lerp(this.energy,this.toEnergy,0.05);
        this.shield = lerp(this.shield,this.toShield,0.05);
        
        
    };
    
    //Run all of the _Fighter functions in one place
    _Fighter.prototype.pack = function(){
        if(!this.dead && !Player.dead){
            this.update();
        }
        this.collide();
        this.display();
        
        this.crouch();
        this.stab();
        this.shocked();
        
    };
    
    //Create a new Fighter
    return new_.call(_Fighter,{
        x:300,
        y:150,
        imgs:{
            head:"playerHead",
            chest:"knightBreastPlate",
            upperArm:"knightUpperArm",
            lowerArm:"knightLowerArm",
            shoulder:"knightShoulder",
            upperLeg:"knightUpperLeg",
            lowerLeg:"knightLowerLeg",
            shield:"shield2"
        },
        level:1,
        name:"Tony"
    });
})();

var Buttons = (function(){
    /*
        Buttons for menus and such. Click on them to switch scenes.
        @constructor
        @params {object} config
        @property {number} config.x - top left x position in pixels
        @property {number} config.y - top left y position in pixels
        @property {string} config.txt - Text displayed on the button
        @property {string} config.to - Scene to switch to
        @property {function} config.onClick - Ran on change of page.
    */
    var _Button = function(config){
        //X and y
        this.x = config.x;
        this.y = config.y;
        
        //Variables for hover
        this.opac = 0;
        this.txtY = 1;
        
        //text to display
        this.txt = config.txt;
        this.to = config.to;
        
        //Anything special to do if clicked
        this.onClick = config.onClick || function(){};

    };
    
    //Render the button
    _Button.prototype.display = function(){
        pushMatrix();
        translate(this.x,this.y);
        
        //The bright highlight at the top
        imageMode(CENTER);
        pushMatrix();
        scale(7.5,max((~~this.opac)/75,0.01));
        image(imgs.buttonHighlight,30,0);
        popMatrix();
        imageMode(CORNER);
        
        //Draw the button
        noStroke();
        fill(255,40);
        rect(0,0,450,50,10);
        image(imgs.button,4,-this.txtY,450,50);
        
        //Make whiter hover effect
        stroke(255,75 + this.opac*2);
        strokeWeight(1);
        fill(255,this.opac);
        rect(0,0,450,50,10);
        fill(255,200 + this.opac);
        
        //Text
        textFont(createFont('Noto Sans Bold'),25);
        text(this.txt,225,25-this.txtY);
        popMatrix();
    };
    
    /*
    Check for collision and clicks
    Do hover effects
    */
    _Button.prototype.update = function(){
        //Check for collision
        if(Math.mouseRect(this.x,this.y,450,50)){
            
            //Hover Effects
            cursor('pointer');
            this.opac = lerp(this.opac,50,0.1);
            this.txtY = lerp(this.txtY,-3,0.1);
            
            //Check for click
            if(click && !Trans.running){
                Trans.start(this.to,this.onClick);
            }
        }    
        else{
            
            //Unhover the effects
            this.opac = lerp(this.opac,0,0.1);
            this.txtY = lerp(this.txtY,1,0.1);
        }
        
    };
    
    //Run .display and .update together
    _Button.prototype.run = function(){
        this.update();
        this.display();
    };
    
    /*
        Create an object of buttons for easy rendering
        @returns {object} - in the following format
        
        "key": new_.call(_Button,{
            x:x,
            y:y,
            txt:"text",
            to:"sceneName"
        }),
        
        In the scene, render a button like this. 
        `Buttons.key.run();
    */
    return({
        'play':new _Button({
            x:225,
            y:225,
            txt:'Campaign',
            to:'play',
        }),
        'minigames':new _Button({
            x:225,
            y:300,
            txt:'Mini Games',
            to:'minigames',
        }),
        'instructions':new _Button({
            x:225,
            y:375,
            txt:'Instructions',
            to:'how',
        }),
        'credits':new _Button({
            x:225,
            y:450,
            txt:'Credits',
            to:'credits',
        }),
        'menu':new _Button({
            x:225,
            y:500,
            txt:'Menu',
            to:'menu',
        }),
    });
})();

var Logo = (function(){
    size(900,600,1);
    var points = [
        [[0,0],[-60,0],[-60,-60],[-65,-60],[-65,-70],[-40,-70],[-40,-60],[-45,-60],[-45,0]],
        [[0,0],[-45,0],[-15,0],[-15,-20],[0,-7],[0,10],[-65,10],[-65,0],[-60,0]],
        [[0,0],[0,-40],[0,-70],[-15,-70],[-15,-30],[0,-17]],
        [[0,0],[0,-17],[30,10],[50,10],[50,10],[10,-30],[50,-70],[30,-70],[0,-40],],
    ];
    var clrs = [
        color(72, 99, 163),
        color(22, 122, 104),
        color(22, 122, 104),
        color(72, 99, 163),
    ];
    background(210, 221, 245);
    pushMatrix();
    translate(70,70);
    for(var i = 0; i < points.length; i ++){
        fill(clrs[i]);
        stroke(clrs[i]);
        strokeWeight(3);
        beginShape();
        for(var j = 1; j < points[i].length; j ++){
            vertex(points[i][j][0],points[i][j][1]);
        }
        endShape();
    }
    popMatrix();
    
    var logos = [];
    var logoX = -600;
    var logoParticle = function(x,y,img){
        this.targX = x;
        this.targY = y;
        this.x  = x +  cos(random(0,360)) *random(800,1200);
        this.y  = y  + sin(random(0,360)) *random(800,1200);
        while(this.x > 0 && this.y > 0 && this.x < 600 && this.y < 600){
            this.x  = x + cos(random(0,360)) *random(600,800);
            this.y  = y + sin(random(0,360)) *random(600,800);
        }
        this.a = atan2(this.targY-this.y,this.targX-this.x)/Math.PI*180;
        this.d = dist(this.x,this.y,this.targX,this.targY);
        this.speed = this.d/150;
        this.img = img;
        
        this.s = 0.0001;
    };  
    logoParticle.prototype.draw = function() {
        if(!Trans.running){
            if(this.d < 0){
                this.x = this.targX;
                this.y = this.targY;
                this.speed = 0;
                this.s = 8;
            }
            else{
                this.d -= this.speed;
                this.s = lerp(this.s,this.d/10+8,0.1);
            }
            this.x += cos(this.a)*this.speed;
            this.y += sin(this.a)*this.speed;
        }
        image(this.img,this.x,this.y,this.s,this.s);
    };
    for(var i = 0; i < 120; i += 8){
        for(var j = 0; j < 80; j += 8){
            logos.push(new_.call(logoParticle,i-70,j-70,get(i,j,8,8))); 
        }
    }   
    var _Logo = function(){
        this.state = 1;  
        
        this.index = 0;
        this.index2 = 0;
        
        this.scl = 2;
        
        this.opac = 255;
        this.time = 0;
        
        this.rectW = 0;
        this.txtW = 0;
    };
    _Logo.prototype.run = function(){
        background(210, 221, 245);
        pushMatrix();
        translate(width/2+10*this.scl,height/2+30*this.scl);
        scale(this.scl);
        

        if(this.state === 1){
            
            for(var i = 0; i < logos.length; i ++){
                logos[i].draw();
            }
            if(logos[0].d < 0){
                this.state = 2;
                this.index = 10;
            }
            this.time ++;
        } 
        else if(this.state === 2){

            
            this.rectW ++;
            if(this.rectW > 19){
                this.state = 3;
            }
        }
        else if(this.state === 3){
            this.txtW = lerp(this.txtW,1,0.1);
            if(this.txtW > 0.99999){
                this.state = 4;
            }
        }
        else if(this.state === 4){
            
            this.opac = lerp(this.opac,0,0.1);
            if(this.opac < 0.5){
                this.state = 5;
            }
            this.txtW = lerp(this.txtW,0,0.1);
            this.rectW = lerp(this.rectW,0,0.1);
            if(this.rectW < 2){
                this.txtW = 0;
                this.rectW = 0;
            }
            
        }
        else if (this.state === 5){

            if(this.index2 % 10 === 0){
                this.index -= 1;
            }
            this.index2 += 1;
            this.index2 = this.index2 % 10 + 1;
            if(this.index <= -3){
                this.state = 6;
                Trans.start('intro');
            }
        }
        strokeWeight(3);
        for(var i = 0; i < points.length; i ++){
            fill(clrs[i],this.opac);
            stroke(clrs[i]);
            beginShape();
            for(var j = 1; j < min(this.index,points[i].length); j ++){
               
                if(j === this.index - 1){
                    vertex(map(this.index2,0,10,points[i][j][0],points[i][j-1][0]),map(this.index2,0,10,points[i][j][1],points[i][j-1][1])); 
                } 
                else{
                    vertex(points[i][j][0],points[i][j][1]);
                }
            }
            endShape();
        }
        noStroke();
        fill(210, 221, 245);
        rect(-70,-30-this.rectW/2,120,this.rectW);
        popMatrix();
        
        fill(clrs[0]);
        textAlign(CENTER,CENTER);
        textFont(createFont('Marcellus Bold'),15*this.scl);

        pushMatrix();
        translate(width/2,height/2);
        scale(this.txtW,1);
        text('Liam K Presents',0,0);
        popMatrix();
        
        if(click && !Trans.running){
            Trans.start('intro');
        }

    };
    return new_.call(_Logo);
})();

var Scenes = (function(){
    var curLoad = 0;
    var loadState = 1;
    var loaded = 0;
    var toLoad = Object.keys(imgs).length + World.length;
    
    size(900,600,1);
    
    mouseClicked = function(){
	    click = true;  
	};
    
    var runFlowers = function(){
        for(var i = 0; i < World[level].flowers.length; i ++){
            var f = World[level].flowers[i];
            f.update();
            f.collide(Player);
            f.display();
        }
    };
    var runParticles = function(){
	    for(var i = 0; i < particles.length; i ++){
	        particles[i].display();
	        particles[i].move();
	        if(particles[i].fade <= 0){
	            particles[i].splicing = true;
	        }
	    }
	    for(var i = 0; i < particles.length; i ++){
	        if(particles[i].splicing){
	            particles.splice(i,1);   
	        }
	    }
	};
    var runTorches = function(){
        for(var i = 0; i < World[level].torches.length; i ++){
            var t = World[level].torches[i];
            t.display();
        }
    };
    
    Math.rectRect = function(x1,y1,w1,h1,x2,y2,w2,h2){
        return(x1 + w1 > x2 && y1 + h1 > y2 && x1 < x2 + w2 && y1 < y2 + h2);    
    };
    Math.mouseRect = function(x,y,w,h){
        return(mouseX > x && mouseX < x + w && mouseY > y && mouseY < y + h);
    };
    Math.pointRect = function(px,py,rx,ry,rw,rh){
        return(px > rx && px < rx + rw && py > ry && py < ry + rh);
    };
    
    function blueBanner(x,y,x1,x2){
        pushMatrix();
        translate(x,y);
        
        noFill();
        stroke(61, 131, 158);
        strokeWeight(25);
        beginShape();
        vertex(0,0);
        vertex(400,0);
        vertex(350,75);
        vertex(400,150);
        vertex(0,150);
        endShape(CLOSE);  
        
        stroke(176, 148, 57);
        strokeWeight(10);
        beginShape();
        vertex(0,0);
        vertex(400,0);
        vertex(350,75);
        vertex(400,150);
        vertex(0,150);
        endShape(CLOSE);  
    
        image(imgs.blueBanner,0,0);
        
        fill(240, 253, 255);
        textFont(createFont('Marcellus Bold'),40);
        textAlign(LEFT,CENTER);
        text('Player 1',150,40);
        textFont(createFont('Noto Sans'),12);
        text('Skill',150,75);
        text('Strength',150,107);
        textAlign(CENTER,CENTER);
        
        noStroke();
        fill(61, 131, 158);
        rect(150,85,150,15,2);
        rect(150,115,150,15,2);
        
        noStroke();
        fill(28, 143, 189,50);
        rect(153,88,x1+4,9);
        rect(153,118,x2+4,9);
        rect(152,87,x1+6,11);
        rect(152,117,x2+6,11);
        rect(150,85,x1+10,15);
        rect(150,115,x2+10,15);
        
        stroke(28, 143, 189);
        strokeWeight(1);
        fill(240, 253, 255);
        rect(155,90,x1,5);
        rect(155,120,x2,5);
        popMatrix();
    }
    function redBanner(x,y,x1,x2){
        pushMatrix();
        translate(x,y);
    
        
        pushMatrix();
        translate(200,0);
        scale(-1,1);
        translate(-200,0);
        
        noFill();
        stroke(179, 38, 78);
        strokeWeight(25);
        beginShape();
        vertex(0,0);
        vertex(400,0);
        vertex(350,75);
        vertex(400,150);
        vertex(0,150);
        endShape(CLOSE);  
        
        stroke(176, 148, 57);
        strokeWeight(10);
        beginShape();
        vertex(0,0);
        vertex(400,0);
        vertex(350,75);
        vertex(400,150);
        vertex(0,150);
        endShape(CLOSE);  
        
        image(imgs.redBanner,0,0);
        
        translate(200,0);
        scale(-1,1);
        translate(-250,0);
    
        
        fill(240, 253, 255);
        textFont(createFont('Marcellus Bold'),40);
        textAlign(LEFT,CENTER);
        text('Player 2',150,40);
        textFont(createFont('Noto Sans'),12);
        text('Skill',150,75);
        text('Strength',150,107);
        textAlign(CENTER,CENTER);
        
        noStroke();
        fill(179, 38, 78);
        rect(150,85,150,15,2);
        rect(150,115,150,15,2);
        
        noStroke();
        fill(153, 15, 56,50);
        rect(153,88,x1+4,9);
        rect(153,118,x2+4,9);
        rect(152,87,x1+6,11);
        rect(152,117,x2+6,11);
        rect(150,85,x1+10,15);
        rect(150,115,x2+10,15);
        
        stroke(153, 15, 56);
        strokeWeight(1);
        fill(240, 253, 255);
        rect(155,90,x1,5);
        rect(155,120,x2,5);
        popMatrix();
        
        popMatrix();
    }
    
    var endOpac = 0;
    
    function victory(opac){
        noStroke();
        fill(28, 143, 189,opac/3);
        rect(0,0,900,600);
        
        pushMatrix();
        translate(450,300);
        scale(max((opac - 100)/255,0));
        translate(-450,-300);
        image(imgs.laurel,0,0);
        popMatrix();
        
        pushMatrix();
            
        translate(450,300);
        scale(opac/255);
        translate(-450,-300);
        
        textFont(createFont('Marcellus Bold'),90);
            
        fill(0,opac/5);
        text('Victory',450,305);
            
        fill(255,opac);
        text('Victory',450,300);
        
        popMatrix();
        
        pushMatrix();
        translate(450,300);
        scale(map(opac,0,255,2,1));
        translate(-450,-300);
        image(imgs.vingette,0,0);
        popMatrix();
    }
    function defeat(opac){
        noStroke();
        fill(189, 28, 84,opac/3);
        rect(0,0,900,600);
        
        pushMatrix();
        translate(450,300);
        scale(max((opac - 100)/255,0));
        translate(-450,-300);
        image(imgs.redLaurel,0,0);
        popMatrix();
        
        pushMatrix();
            
        translate(450,300);
        scale(opac/255);
        translate(-450,-300);
        
        textFont(createFont('Marcellus Bold'),90);
            
        fill(0,opac/5);
        text('Defeat',450,305);
            
        fill(255,opac);
        text('Defeat',450,300);
        
        popMatrix();
        
        pushMatrix();
        translate(450,300);
        scale(map(opac,0,255,2,1));
        translate(-450,-300);
        image(imgs.vingette,0,0);
        popMatrix();
    }
    
	var items = [
        new_.call(Item,{
            name:"clock",
            x:100,
            y:300,
            w:50,
            h:75,
            imagePath:"clock",
            world:1,
            wantsToTalk:false,
        }),
        new_.call(Item,{
            name:"clock2",
            x:150,
            y:300,
            w:50,
            h:75,
            imagePath:"clock",
            world:1,
            wantsToTalk:false,
            conversation:[
                {
                    message:'A squeaky old clock',
                    options:[
                        {
                            response:'Inspect Closer',
                            toInd:1,
                        },
                        {
                            response:'*Leave*',
                            toInd:10,
                        },
                    ],
                    
                },
                {
                    message:'It tells time...',
                    options:[
                        {
                            response:'*Leave*',
                            toInd:10,
                        },
                        
                    ],
                    
                },
            ],
        }),
        new_.call(Item,{
            name:"Rat",
            x:625*0.6,
            y:428*0.6,
            w:50*0.6,
            h:25*0.6,
            imagePath:"rat2",
            world:5,
            wantsToTalk:true,
            conversation:[
                {
                    message:'Another rat? How many of these things are there?',
                    options:[
                        {
                            response:'*Leave*',
                            toInd:10,
                        },
                    ],
                    
                },
            ],
        }),
        new_.call(Item,{
            name:"Rat",
            x:250*0.6,
            y:428*0.6,
            w:50*0.6,
            h:25*0.6,
            imagePath:"rat",
            world:5,
            wantsToTalk:true,
            conversation:[
                {
                    message:'They\'re multiplying...',
                    options:[
                        {
                            response:'*Leave*',
                            toInd:10,
                        },
                    ],
                    
                },
            ],
        }),
        new_.call(Item,{
            name:"Notice",
            x:290*0.6,
            y:300*0.6,
            w:30*0.6,
            h:40*0.6,
            imagePath:"notice",
            world:6,
            wantsToTalk:true,
            conversation:[
                {
                    message:'The 42nd Annual Tourney is about to begin. Sign up now at your local blacksmith\'s shop. 1st prize - Sword and set of personal armor.',
                    options:[
                        {
                            response:'*Leave*',
                            toInd:10,
                        },
                    ],
                    
                },
            ],
        }),
        new_.call(Item,{
            name:"Teddy Bear",
            x:230*0.6,
            y:360*0.6,
            w:30*0.6,
            h:45*0.6,
            imagePath:"teddy",
            world:4,
            wantsToTalk:true,
            conversation:[
                {
                    message:"Your old Teddy Bear. It is worn with age... and use.",
                    options:[
                        {
                            response:'Now that\'s embarrassing *Leave*',
                            toInd:10,
                        },
                    ],
                    
                },
            ],
        }),
        new_.call(Item,{
            name:"Water Glass",
            x:355*0.6,
            y:377*0.6,
            w:20*0.6,
            h:40*0.6,
            imagePath:"water",
            world:4,
            wantsToTalk:true,
            conversation:[
                {
                    message:"A glass of water. It is the last one. Somebody will probably have to go get more",
                    options:[
                        {
                            response:"*Leave*",
                            toInd:10,
                        },
                    ],
                    
                },
            ],
        })
    ];
	npcs = {
	    Jessie:new_.call(NPC,{
	        x:450,
            y:295,
            w:33,
            h:90,
            imgs:{
                head:"jessieHead",
                chest:"jessieTorso",
                dress:"jessieDress",
                upperArm:"jessieUpperArm",
                lowerArm:"jessieLowerArm",
                shoulder:"jessieShoulder",
                upperLeg:"jessieUpperLeg",
                lowerLeg:"jessieLowerLeg",
                shield:"shield1",
            },
            world:0,
            name:'Jessie',
            facing: -1,
            conversations:[
                [
                    {
                        message:'So are you going to sign up for the Knight Tournament? I saw you practicing the other day.',
                        options:[
                            {
                                response:'What tournament? And who are you again.',
                                toInd:1,
                            },
                            {
                                response:'Yes, I think so',
                                toInd:3,
                            },
                            
                        ],
                        
                    },
                    {
                        message:"Don't be daft. We're friends remember. Just because you know that I'm going to win doesn't mean you shouldn't compete.",
                        options:[
                            {
                                response:"Hmm, still not ringing a bell.",
                                toInd:2,
                            }, 
                            {
                                response:"Ok, I'll be there.",
                                toInd:3,
                            },
                            
                            
                        ],
                        
                    },
                    {
                        message:"You can sign yourself up in the blacksmith'shop.",
                        options:[
                            {
                                response:"Ok, I'll do that",
                                toInd:3,
                            },
                            
                        ],
                        
                    },
                    {
                        message:"Great! May the best of us, me of course, win it all!",
                        options:[
                            {
                                response:"*Leave*",
                                toInd:100,
                                onEnd:function(){
                                    Missions.add({
                                        txt:'Join Knight Tournament',
                                        check:function(){
                                            return false;
                                        }
                                    })  
                                },
                            },  
                        ],
                    },
                ],
            ],
	    }),
	    Maya:new_.call(NPC,{
	        x:150*0.6,
            y:283*0.6,
            imgs:{
                head:"mayaHead",
                chest:"mayaTorso",
                dress:"mayaDress",
                upperArm:"mayaUpperArm",
                lowerArm:"mayaLowerArm",
                shoulder:"mayaShoulder",
                upperLeg:"jessieUpperLeg",
                lowerLeg:"jessieLowerLeg",
            },
            world:1000,
            name:'Maya',
            conversations:[
                [
                    {
                        message:'What would you like?',
                        options:[
                            {
                                response:'The rat problem in here is very bad ',
                                toInd:1,
                            },
                            {
                                response:'Can I get some soup?',
                                toInd:2,
                            },
                            
                        ],
                        
                    },
                    {
                        message:'The cat wandered off recently. Would you like to order something?',
                        options:[
                            {
                                response:'Can I get some soup?',
                                toInd:2,
                            },
                            
                        ],
                        
                    },
                    {
                        message:'That\'ll be $4.',
                        options:[
                            {
                                response:"I don't any money.",
                                toInd:3,
                            },
                            
                        ],
                        
                    },
                    {
                        message:'No money, no food.',
                        options:[
                            {
                                response:"How about a favor? Can I do something for you?",
                                toInd:4,
                            },
                        ],
                        
                    },
                    {
                        message:'If you can find our missing cat, sure.',
                        options:[
                            {
                                response:"Ok thanks. *Leave*",
                                toInd:10,
                                onEnd:function(){
                                    Missions.add({
                                        txt:'Locate and return cat',
                                        check:function(){
                                            return false;
                                        }
                                    })
                                }
                            },
                        ],
                        
                    }   
                    
                ],
            ],
	    }),
	    Nicholas:new_.call(NPC,{
	        x:475,
            y:305,
            facing:-1,
            imgs:{
                head:"nicholasHead",
                chest:"knightBreastPlate",
                upperArm:"knightUpperArm",
                lowerArm:"knightLowerArm",
                shoulder:"knightShoulder",
                upperLeg:"knightUpperLeg",
                lowerLeg:"knightLowerLeg",
            },
            
            world:3,
            name:'Nicholas',
            conversations:[
                [
                    {
                        message:'So you want to be a knight?',
                        options:[
                            {
                                response:'Yessir. Just like my dad!',
                                toInd:1,
                            },
                        ],
                        
                    },
                    {
                        message:'A scrawny thing like you? No way',
                        options:[
                            {
                                response:'But I can fight.',
                                toInd:2,
                            },
                            
                        ],
                        
                    },
                    {
                        message:'*Laughs* Prove your courage, and then we can talk',
                        options:[
                            {
                                response:"How?",
                                toInd:3,
                            },
                            {
                                response:"Ok. *Leave*",
                                toInd:100,
                            },
                        ],
                        
                    },
                    {
                        message:'Sounds like something for you to figure out. ',
                        options:[
                            {
                                response:"Ok. *Leave*",
                                toInd:100,
                            },
                        ],
                        
                    },
                    
                ],
            ],
	    }),
	    Logan:new_.call(NPC,{
	        x:300,
            y:283*0.6,
            facing:-1,
            imgs:{
                head:"nicholasHead",
                chest:"knightBreastPlate",
                upperArm:"knightUpperArm",
                lowerArm:"knightLowerArm",
                shoulder:"knightShoulder",
                upperLeg:"knightUpperLeg",
                lowerLeg:"knightLowerLeg",
            },
            
            world:6,
            name:'Logan',
            conversations:[
                [
                    {
                        message:'So you want to be a knight?',
                        options:[
                            {
                                response:'Yessir. Just like my dad!',
                                toInd:1,
                            },
                        ],
                        
                    },
                    {
                        message:'A scrawny thing like you? No way',
                        options:[
                            {
                                response:'But I can fight.',
                                toInd:2,
                            },
                            
                        ],
                        
                    },
                    {
                        message:'*Laughs* Prove your courage, and then we can talk',
                        options:[
                            {
                                response:"How?",
                                toInd:3,
                            },
                            {
                                response:"Ok. *Leave*",
                                toInd:100,
                            },
                        ],
                        
                    },
                    {
                        message:'Sounds like something for you to figure out. ',
                        options:[
                            {
                                response:"Ok. *Leave*",
                                toInd:100,
                            },
                        ],
                        
                    },
                    
                ],
            ],
	    }),
	    Mother:new_.call(NPC,{
	        x:250,
            y:283*0.6,
            facing:-1,
            imgs:{
                head:"nicholasHead",
                chest:"knightBreastPlate",
                upperArm:"knightUpperArm",
                lowerArm:"knightLowerArm",
                shoulder:"knightShoulder",
                upperLeg:"knightUpperLeg",
                lowerLeg:"knightLowerLeg",
            },
            
            world:4,
            name:'Mother',
            conversations:[
                [
                    {
                        message:'Look who finally woke up...',
                        options:[
                            {
                                response:"It's the weekend. What else can I say?",
                                toInd:1,
                            },
                            {
                                response:"My alarm didn't go off.",
                                toInd:1,
                            }
                        ],
                        
                    },
                    {
                        message:'That\'s alright. If you aren\'t busy, can you go get some water from the well for me?',
                        options:[
                            {
                                response:'Actually I was going to hang out with friends...',
                                toInd:2,
                            },
                            {
                                response:'Sure thing Mom.',  
                                toInd:4,
                            },
                            
                        ],
                        
                    },
                    {
                        message:'Just get it done sometime soon.',
                        options:[
                            {
                                response:"How?",
                                toInd:3,
                            },
                            {
                                response:"Ok. Anything else?",
                                toInd:4,
                            },
                        ],
                        
                    },
                    {
                        message:'Go to the well. Get water. It\'s pretty self explanatory.',
                        options:[
                            {
                                response:"Ok. Anything else?",
                                toInd:4,
                            },
                        ],
                    },
                    {
                        message:'Oh, and I have something for you when you get back.',
                        options:[
                            {
                                response:"Thanks *Leave*",
                                toInd:100,
                                onEnd:function(){
                                    Missions.add({
                                        txt:'Get water from well.',
                                        check:function(){
                                            return false;
                                        }
                                    })
                                }
                            },
                        ],
                    },
                    
                ],
            ],
	    }),
	};
	
	var vsScl = 0;

    var skill = 50;
    var strength = 30;
    
    var bannerx =  -450;
    var bannerx2 = -450;
    
    var tips = [
        "Loading can take up to a minute to render all of the awesome graphics",
        "If you ever get stuck, try exploring. You might be surprised where you end up.","The world ended, congratualations.",
        "Listening is a great skill to have. When an NPC wants to talk to you, it will have a blue arrow floating over it's head. They usually have something important to say.",
        "Clicking on doors can take you in and out of buildings.",
        "WASD or arrows to move. If you can't figure that one out...",
        "Offense is the best defense. Toggle between two attacks on your sword to show enemies the meaning of sharp. ",
        "Don't fix it if it ain't broke.",
        "Click on the chest to open your inventory. Anything you've collected will show up there.",
        "Free shout out to people who don't what the opposite of in is.",
        "It's usually a good idea to complete your missions. It's impossible to win by doing nothing.",
        "Make sure to subscribe for more awesome content",
        "Are you still here??",
    ];
    var start = Date.now();
    
    var intro = {
        texts:["","You reap what you sow...","We destroyed the earth,\nkilling 99% of all life.","And out of the ruins,\nrose something terrifying.","Eschewing the technology that\ndestroyed us, a refuge was created.","And they called it"],
        index:0,
        opac:250,
        state:1,
        ruin:0,
        skip:0,
        run:function(){
            
            switch(this.index){
                case 1:
                    image(imgs.stars1,0,0);
                    
                    
                    image(imgs.earthRuined,0,0);
                    
                    if(this.ruin < 255 && this.opac <= 255 && this.ruin > 0){
                        tint(255,255,255,255-this.ruin);
                        image(imgs.earth,0,0);
                        noTint();
                    }
                    else if(this.ruin === 0){
                        image(imgs.earth,0,0);
                    }
                    
                    if(this.state === 3){
                        this.ruin += 4;
                        
                        if(this.ruin > 500){
                            this.state = 1;
                        }
                    }
                break;
                case 2:
                    if(this.opac === 255 && this.state === 2){
                        this.state = 1; 
                        this.index ++;
                    }
                break;
                case 3:
                    image(imgs.apocalypseBackdrop,0,0);
                    image(imgs.ruinedCity,0,0,900,600);
                    
                    if(this.state === 3){
                        this.opac --;
                        if(this.opac < -100){
                            this.opac = 0;
                            this.state = 1;
                        }
                    }
                break;
                case 4:
                    image(imgs.stars1,0,0);
                    image(imgs.hills2,0,0,900,600);
                    image(imgs.villageHouse2,150,25);
                    image(imgs.homeForeground,0,0,900,600);
                    
                    
                    if(this.state === 3){
                        this.opac --;
                        if(this.opac < -100){
                            this.opac = 0;
                            this.state = 1;
                        }
                    }
                break;
                case 5:
                    image(imgs.apocalypseBackdrop,0,0);
                    image(imgs.redLaurel,0,0);
                    image(imgs.Apocalypta,150,100,600,400);
                    
                    fill(255,200,200);
                    textFont(createFont('Noto Sans Bold'),28);
                    text('Click Anywhere To Begin',450,390);
                    if(this.opac < 0 && click){
                        Trans.start("menu");
                    }
                break;
            }
            
             if(this.opac > 0 && this.opac < 265){
                pushMatrix();
                scale(5);
                tint(255,255,255,this.opac);
                image(imgs.introBackdrop,0,0);
                noTint();
                popMatrix();
            }
            else if(this.opac >= 265){
                image(imgs.introBackdrop,0,0,900,600);
            }
            //fill(0,this.opac);
            //rect(0,0,900,600);
            
            if(this.state === 1){
                this.opac += 5;
                if(this.opac === 255){
                    this.index ++;
                }
                if(this.opac > 810){
                    this.state = 2;
                }
            }
            if(this.state === 2){
                this.opac -= 5;
                if(this.opac < 0){
                    this.state = 3;
                }
            }
            
            pushMatrix();
            translate(450,300);
            scale(map(constrain(this.opac,255,510),255,510,0.0001,1));
            imageMode(CENTER);
            image(imgs.introHighlight,0,0,textWidth(this.texts[this.index])+50,100*this.texts[this.index].split("\n").length);
            imageMode(CORNER);
            popMatrix();
            
            fill(255,this.opac - 255);
            textFont(createFont('Marcellus'),50);
            text(this.texts[this.index],450,300);
            
            
            if(mouseX > 800 && mouseY > 540){
                this.skip = lerp(this.skip,10,0.1);
                if(click){
                    Trans.start('menu');
                }
            }
            else{
                this.skip = lerp(this.skip,0,0.1);
            }
       
            image(imgs.skipButton,800+ this.skip,540);
            
        }
    };

    return({
        load:function(){
            if(curLoad < Object.keys(imgs).length && loadState === 1){
            
                background(255,0);
                var img = imgs[Object.keys(imgs)[curLoad]];
                img.d();
                imgs[Object.keys(imgs)[curLoad]] = get(0,0,img.w,img.h);
                
                background(0,0,0,0);
                loaded ++;
            }
            else if(!Trans.running){
                
                var lvl = World[curLoad];
                lvl.collision();
                var arr = [];
                
                var clr = 0;
                var clr2 = -1;
                
                for(var i = 0; i < 800; i += 2){
                    var a = [];
                    for(var j = 0; j < 600; j += 2){
                        switch(get(i,j)){
                            case clr:
                                a.push(0);
                            break;
                            case clr2:
                                a.push(1);
                            break;
                            default:
                                a.push(2);
                            break;
                        }
                    }
                    arr.push(a);
                }   
                lvl.arr = arr;
                /*
                strokeWeight(1);
                for(var i = 0; i < arr.length; i ++){
                    for(var j = 0; j < arr[i].length; j ++){
                        switch(arr[i][j]){
                            case 2:
                                stroke(255,0,0);
                                point(i,j);
                            break;
                            case 1:
                                stroke(255);
                                point(i,j);
                            break;
                        }
                    }
                }
                imgs.wellForeground = get();
                */
                loaded ++;
                
            }
            background(0);
            image(imgs.apocalypseBackdrop,0,0);
            image(imgs.redLaurel,200,0);
            fill(255,220,255);
            textAlign(CENTER,CENTER);
            textFont(createFont('Marcellus Bold'),900/15);
            text("Loading",650,300);
            textFont(createFont('Noto Sans Bold'),20);
            textAlign(LEFT,CENTER);
            text(tips[constrain((ceil((Date.now() - start)/6000) - 1),0,tips.length-1)],50,0,300,600);
            textAlign(CENTER,CENTER);
            
            noStroke();
            fill(255,220,255);
            rect(550,350,loaded/toLoad*200,30,5);
            fill(255,200,255,50);
            rect(545,345,210,40,5);
            
            fill(255,220,255);
            rect(400,150,3,300);
            
            fill(100,0,50);
            textSize(20);
            curLoad ++;
            if(loadState === 1 && curLoad === Object.keys(imgs).length ){
                curLoad = 0;
                loadState = 2;
                    
            }

            if(loadState === 2 &&curLoad === World.length){
                if(!Trans.running){
                    for(var i = 0; i < items.length; i ++){
                        if(!items[i].wantsToTalk){
                            items[i].img = items[i].getImage();
                        }
                    }
                }
                
                Trans.start('logo');
                image(imgs.apocalypseBackdrop,0,0);
            }   
        }, 
        logo:function(){
            Logo.run();
        },
        intro:function(){
            intro.run();  
        },
        menu:function(){
            image(imgs.apocalypseBackdrop,0,0);  
            image(imgs.redLaurel,75,-100,750,500);
            image(imgs.Apocalypta,225,0,450,300);
            
            Buttons.play.run();
            Buttons.minigames.run();
            Buttons.instructions.run();
            Buttons.credits.run();
            
            if(click && mouseY > 590 && mouseButton === RIGHT){
                Trans.start('thumb',function(){
                    size(600,600,1);
                });
            }
        },
        play:function(){
            pushMatrix();
            translate(width/2,height/2)
            scale(1.11);
            translate(-width/2 + map(Camera.x,-200,0,0,45),-height/2+map(Camera.y,-200,0,0,30));
            
            Cycles.dayNight();
            World[level].backdrop();
            popMatrix();

            Clouds.run();
            
            Camera.startLink();
            Camera.follow(Player);
            Camera.scale = World[level].scale || 1;
            World[level].underWorld();
            runTorches();
            
            for(var i = 0; i < items.length; i ++){
                items[i].display();
                //items[i].checkGrab();
            }
            runFlowers();
            
            for(var i in npcs){
                var n = npcs[i];
                if(n.world === level){
                   n.pack();
                    
                }
            }
            
            Cycles.weather();
            runParticles();
            World[level].overWorld();
            
            
            
            Player.pack();
            
            Camera.endLink();
            
            Cycles.overlay();
            
            for(var i = 0; i < World[level].interactions.length; i ++){
                var int = World[level].interactions[i];
                if(Math.mouseRect(int.hitbox[0]*Camera.scl+Camera.x,int.hitbox[1]*Camera.scl+Camera.y,int.hitbox[2]*Camera.scl,int.hitbox[3]*Camera.scl)) {
                    cursor("pointer");
                    if(int.boolean && click){
                        int.onClick();
                    }
                }
            }
            
            Inventory.pack();
            
            for(var i in npcs){
                npcs[i].talk();
            }
            
            Lightnings.run();
            
            for(var i = 0; i < items.length; i ++){
                items[i].onRecieve();
                items[i].checkGrab();
                items[i].talk();
            }
            
            Missions.run();

        },
        arena:function(){
            pushMatrix();
            translate(width/2,height/2);
            scale(1.11);
            translate(-width/2 + map(Camera.x,-200,0,0,45),-height/2+map(Camera.y,-200,0,0,30));
            
            Cycles.dayNight();
            World[level].backdrop();
            popMatrix();
            
            Camera.startLink();
            Camera.follow(Player);
            Camera.scale = World[level].scale || 1;
            World[level].underWorld();
            
            for(var i = 0; i < bullets.length; i ++){
                bullets[i].update();
                bullets[i].display();
                if(bullets[i].from === Player && Player.health > 1){
                    if( bullets[i].checkRectColl(Fighter.x,Fighter.y,Fighter.w,Fighter.h) && !Fighter.stunned){
                        if(Fighter.shielding && Fighter.shield > 5){
                            Fighter.toShield -= 10;
                        }
                        else{
                            Fighter.toHealth -= 10;
                            Fighter.stunned = true;
                            bullets[i].particles = true;
                        }
                    }
                }
                else if(bullets[i].from === Fighter && Fighter.health > 1){
                    if( bullets[i].checkRectColl(Player.x,Player.y,Player.w,Player.h) && !Player.stunned){
                        if(Player.shielding && Player.shield > 5){
                            Player.toShield -= 10;
                        }
                        else{
                            Player.toHealth -= 10;
                            Player.stunned = true;
                            bullets[i].particles = true;
                        }
                    }
                }
                
                var x = bullets[i].x + bullets[i].xv * 8;
                var y = bullets[i].y + bullets[i].yv * 8;
                
                if(x <= 0 || x >= 799 || y <= 0){
                    bullets[i].splicing = true;
                }
                
                if(x > 0 && x <= 799 && y >= 0){
                    if(World[level].arr[~~(x/2)][~~(y/2)] !== 0){
                        bullets[i].splicing = true;
                    }
                    
                }
                
            }
            for(var i = 0; i < bullets.length; i ++){
                if(bullets[i].splicing){
                    bullets[i].length --;
                    if(bullets[i].length < 0){
                        if(bullets[i].particles){
                            for(var j = 0; j < 15; j ++){
                                particles.push(new_.call(Particle,{
                                    x:bullets[i].x,
                                    y:bullets[i].y,
                                    xv:-bullets[i].xv * random(0.1,0.2),
                                    yv:random(-0.7,0.7),
                                    clr:color(49, 137, 191),
                                    shape:"circle",
                                    s:random(2,4),
                                    fade:255,
                                    fadeSpeed:5
                                }));
                            }
                        }
                        bullets.splice(i,1);
                    }
                    
                }
            }
            Cycles.weather();
            World[level].overWorld();
            
            runParticles();
            
            
        
            
            if(!Player.dead && !Fighter.dead){
                Player.handleFight();
                Player.update();
                
            }
            Player.collide();
            Player.display();
            Player.shocked();
            
            if(Player.checkStab(Fighter) && Player.stabbing && !Fighter.stabbed && Player.health > 1){
                if(Fighter.shielding && Fighter.shield > 5){
                    Fighter.toShield -= 10;
                    Fighter.stabbed = true;
                }
                else{
                    Fighter.toHealth -= 10;
                    Fighter.stabbed = true;
                }
            }
            
            if(Fighter.checkStab(Player) && Fighter.stabbing && !Player.stabbed && Fighter.health > 1){
                if(Player.shielding &&  Player.shield > 5){
                    Player.toShield -= 10;
                    Player.stabbed = true;
                }
                else{
                    Player.toHealth -= 10;
                    Player.stabbed = true;
                }
            }
            
            Fighter.pack();
            
            if(!Fighter.dead && !Player.dead){
                Fighter.ai();
            }
            
            Player.die();
            Fighter.die();
        
            Camera.endLink();
            
            Cycles.overlay();
            
            Player.stats();
            Fighter.stats();
            
            image(imgs.laurel,337.5,-12.5,225,150);
            image(imgs.minigameTitle,350,37.5);
            fill(0,100);
            textFont(createFont('Marcellus Bold'),30);
            text('ARENA',450,65.5);
            fill(255);
            text('ARENA',450,62.5);
            
            if(Player.health < 1){
                endOpac = lerp(endOpac,255,0.05);
                defeat(endOpac);
            }
            else if(Fighter.health < 1){
                endOpac = lerp(endOpac,255,0.05);
                victory(endOpac);
            }
        },
        vs:function(){
            image(imgs.vsBackground,0,0);
            
            if(frameCount % 15 === 0){
                Lightnings.add({
                    x:random(0,900),
                    y:0,
                    clr:color(28, 143, 189),
                    opac:-100,
                });
            }
            Lightnings.run();
            
            pushMatrix();
            
            translate(450,300);
            scale(vsScl);
            translate(-450,-300);
            
            textAlign(CENTER,CENTER);
            textFont(createFont('Noto Sans Bold Italic'),100);
            
            function vs(x,y){
                text('VS',x,y);
                triangle(x+18 ,y-26,x+27,y-30,x+39,y-60);
                triangle(x-28,y+32,x-22,y+32,x-40,y+70);
                
                triangle(x+38,y-40,x+42,y-40,x+46,y-55);
                triangle(x-37,y+44,x-41,y+44,x-44,y+58);
            }
            
            noStroke();
            fill(28, 143, 189);
            for(var i = 0; i < 360; i += 30){
                vs(450+cos(i)*2,300+sin(i)*2);
                
            }
            fill(28, 143, 189,10);
            for(var i = 0; i < 360; i += 30){
                vs(450+cos(i)*10,300+sin(i)*10);
                
            }
            fill(28, 143, 189,10);
            for(var i = 0; i < 360; i += 30){
                vs(450+cos(i)*15,300+sin(i)*15);
                
            }
            fill(240, 253, 255);
            vs(450,300);
            
            popMatrix();
            
            
        
        
            bannerx = lerp(bannerx,-100,0.1);
            bannerx2 = lerp(bannerx2,-100,0.1);
            
            vsScl = lerp(vsScl, 1, 0.1);
            Player.y += Player.yv;
            Player.yv += Player.acc/7;
            
            if(Player.yv < 0){
                Player.scale = lerp(Player.scale,1.2,0.05);
            }
            else{
                Player.scale = lerp(Player.scale,1,0.03);
            }
            
            if(Player.y > 130){
                Player.x = 200;
                Player.y = 0;
                Camera.y = 600;
                
                Fighter.x = 700;
                Fighter.y = 0;
                
                scene = 'play';
                Player.scale = 3;
                Fighter.scale = 3;
            }
            
            Player.vs();
            
            pushMatrix();
            scale(3);
            translate(125+bannerx,75);
            Player.display();
            
            popMatrix();
            
            Fighter.y += Fighter.yv;
            Fighter.yv += Fighter.acc/7;
            
            if(Fighter.yv < 0){
                Fighter.scale = lerp(Fighter.scale,1.2,0.05);
            }
            else{
                Fighter.scale = lerp(Fighter.scale,1,0.03);
            }
            
            pushMatrix();
            scale(3);
            translate(0-bannerx2,75);
            Fighter.display();
            Fighter.vs();
            popMatrix();
            
            blueBanner(bannerx,50,skill,strength);
            
            redBanner(500 - bannerx2,400,skill,strength);
        },
        how:function(){
            image(imgs.apocalypseBackdrop,0,0);
            image(imgs.redLaurel,75,-100,750,500);
            image(imgs.Instructions,225,0,450,300);
            image(imgs.howto,0,25);
            Buttons.menu.run();
        },
        minigames:function(){
            image(imgs.apocalypseBackdrop,0,0);
            
            Buttons.menu.run();
        },
        credits:function(){
            image(imgs.apocalypseBackdrop,0,0);
            image(imgs.redLaurel,75,-100,750,500);
            image(imgs.Acknowledgements,225,0,450,300);
            textFont(createFont('Noto Sans Bold'),25);
            fill(255);
            textAlign(RIGHT,TOP);
            text('Graphics\nGameplay\nTesting\n\n\nGreat Hair\nSupport',440,225);
            fill(255,200);
            textAlign(LEFT,TOP);
            text('Liam K.\nLiam K.\nLiam K.\nSomebody\nSomebody Else\nLiam K.\nKA Community',460,225);
            textAlign(CENTER,CENTER);
            Buttons.menu.run();
        },
        thumb:function(){
            imageMode(CENTER);
            image(imgs.apocalypseBackdrop,300,300,600,600);
            image(imgs.redLaurel,300,300,1100,1100/3*2);
            image(imgs.Apocalypta,300,300,525,525/3*2);
            imageMode(CORNER);
        },
    });
})();

draw = function() {
    try{
        cursor('default');
        Scenes[scene]();
        Trans.run();
        click = false;
        
        //background(255);
    }
    catch(e){
        if (!e.infiniteLoopNodeType) {
            println(e.stack.slice(0, e.stack.indexOf("at Processing")));
            //Program.restart();
            noLoop();
        }      
    }
};
